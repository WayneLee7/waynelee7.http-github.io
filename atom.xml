<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李凤伟的小站</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-11-03T02:59:57.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>WayneLee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DAY7-4_GIT</title>
    <link href="http://yoursite.com/2021/11/03/DAY7-4-GIT/"/>
    <id>http://yoursite.com/2021/11/03/DAY7-4-GIT/</id>
    <published>2021-11-03T02:59:57.000Z</published>
    <updated>2021-11-03T02:59:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GIT-和-GITHUB"><a href="#GIT-和-GITHUB" class="headerlink" title="GIT 和 GITHUB"></a>GIT 和 GITHUB</h1><ul><li>在学习之前我们要先要清楚几个东西</li><li><code>git</code> 和 <code>github</code> 是两个东西，不是一个东西</li><li>就像 <code>java</code> 和 <code>javascript</code> 一样，是两个东西</li><li>需要搞清楚几个词语的意思<ul><li>本地：我自己的终端</li><li>远程：在网络那一头的终端</li><li>仓库：一个被 <code>git</code> 管理了的文件夹</li></ul></li></ul><h2 id="什么是-GIT"><a href="#什么是-GIT" class="headerlink" title="什么是 GIT"></a>什么是 GIT</h2><ul><li><code>git</code> 官方名称： <strong>分布式版本管理器</strong></li><li>私人解释： 就是一个管理我们文件夹的工具<ul><li>只不过可以保留所有的版本信息</li></ul></li><li>就是我们安装一个软件<ul><li>然后用这个软件来管理我们的一个文件夹</li><li>这个文件夹被 <code>git</code> 管理以后，我们可以对他进行各种操作</li><li>保证我们写过的内容不会丢失</li></ul></li></ul><a id="more"></a><h2 id="什么是-GITHUB"><a href="#什么是-GITHUB" class="headerlink" title="什么是 GITHUB"></a>什么是 GITHUB</h2><ul><li><code>github</code> 是一个网站，是一个我们托管项目的平台</li><li>是一个 <strong>世界级别</strong> 的大型网站</li><li>也就是说，我们写的项目的 <strong>源码</strong> 可以放在上面保存，只要我们不自己删除，不会丢失<ul><li>就相当于百度云</li><li>只不过功能更加强大，上面都是开发人员（世界级别）</li></ul></li><li>因为 <code>github</code> 只接受 <code>git</code> 来上传代码，所以叫做 <code>github</code></li><li>也就是说，我们可以通过 <code>git</code> 这个软件来管理我们本地的文件夹<ul><li>并且可以把文件夹里面的代码上传到 <code>github</code> 保存</li><li>也可以写一个插件之类的工具，上传到 <code>github</code> 上面让其他开发者使用</li><li>也可以从 <code>github</code> 上找到其他开发者写的插件之类的东西下载使用</li></ul></li><li>所以说，<code>github</code> 也是一个大型的 <strong>开源</strong> 的资源共享平台</li></ul><h2 id="GIT-使用"><a href="#GIT-使用" class="headerlink" title="GIT 使用"></a>GIT 使用</h2><ul><li>刚才我们说过，<code>git</code> 是一个管理我们文件夹的工具</li><li>那么我们就要先安装工具，再使用工具管理我们的文件夹</li></ul><h3 id="GIT-安装"><a href="#GIT-安装" class="headerlink" title="GIT 安装"></a>GIT 安装</h3><ul><li><p>下载 <code>git</code> 直接到官网下载就可以</p><ul><li><a href="https://git-scm.com/" target="_blank" rel="noopener">git官网</a></li><li><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git下载中心</a></li></ul></li><li><p>找到和操作系统对应的版本就可以了</p><ol><li><p>方法一： 打开官网，直接点击下载</p><p><img src="J:/课程资料/week7/assets/官网下载.png" alt></p></li><li><p>方法二： 打开下载中心，选择操作系统，选择下载版本</p><p><img src="J:/课程资料/week7/assets/下载中心1.png" alt></p><p><img src="J:/课程资料/week7/assets/下载中心2.png" alt></p></li></ol></li><li><p>下载好以后，直接双击进行安装就行</p></li><li><p>一直下一步就可以，安装再默认路径就行</p></li><li><p>安装完毕后检测一下安装是否成功</p><ol><li><p>方法一： 打开 <code>cmd</code> 窗口，输入指令检查</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 检测 git 是否安装</span><br><span class="line"><span class="meta">$</span> git --version</span><br></pre></td></tr></table></figure><ul><li><p>出现版本号，说明安装成功</p><p><img src="J:/课程资料/week7/assets/git安装检测1.png" alt></p></li></ul></li><li><p>方法二： 随便找个地方单机 <strong>鼠标右键</strong>，出现下图内容，说明安装成功</p><p><img src="J:/课程资料/week7/assets/git安装检测2.png" alt></p></li></ol></li><li><p>安装完毕，接下来我们就可以开始使用了</p></li></ul><h3 id="GIT-使用-1"><a href="#GIT-使用-1" class="headerlink" title="GIT 使用"></a>GIT 使用</h3><ul><li><p><code>git</code> 是一个软件没错，但是不是那种安装了会再桌面出现一个图标的软件</p></li><li><p>而是一个需要在 <strong>命令行</strong> 进行操作的软件</p></li><li><p>我们单机鼠标右键，点击 <code>Git Bash Here</code></p></li><li><p>会出现下图内容</p><p><img src="J:/课程资料/week7/assets/git窗口1.png" alt></p></li><li><p>我们发现点开以后，就是一个 <strong>命令行窗口</strong></p></li><li><p>其实就是给我们写一些指令使用的，只不过色彩鲜艳一点</p><ul><li>使用 <code>cmd</code> 或者 <code>powershell</code> 窗口来运行 <code>git</code> 指令也可以</li><li>只要是再终端运行就行</li><li>OS 操作系统直接在 <strong>终端</strong> 中运行就行</li></ul></li><li><p><code>Git Bash Here</code> 表示再当前目录下运行 <code>Git Base</code></p></li><li><p>所以，你在哪个文件夹下点击的，那么你出来的命令行窗口的目录就是哪里</p></li><li><p>我们就在命令行里面使用 <code>git</code> 来管理我们的文件夹</p></li></ul><h4 id="GIT-初始化"><a href="#GIT-初始化" class="headerlink" title="GIT 初始化"></a>GIT 初始化</h4><ul><li><p>我们希望一个文件夹被 <code>git</code> 管理的话，那么就要在一个文件夹下进行 <strong>git 初始化</strong></p></li><li><p>找到一个希望被 <code>git</code> 管理的文件夹</p></li><li><p>在文件夹内单击鼠标右键，点开 <code>Git Bash Here</code></p></li><li><p>输入指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> git 初始化的指令</span><br><span class="line"><span class="meta">$</span> git init</span><br></pre></td></tr></table></figure></li><li><p>然后文件夹内会多一个 <code>.git</code> 的文件夹（这个文件夹是一个隐藏文件夹）</p><p><img src="J:/课程资料/week7/assets/git-init.png" alt></p></li><li><p>这个时候，我的这个 <code>git_demo</code> 文件夹就被 <code>git</code> 管理了</p><ul><li><code>git</code> 不光管理这一个文件夹，包括所有的子文件夹和子文件都会被管理</li></ul></li><li><p>注意： <strong>只有当一个文件夹被 git 管理以后，我们才可以使用 git 的功能去做版本管理</strong></p><ul><li>也就是说，我们必须要把我们电脑中的某一个文件夹授权给 <code>git</code></li><li><code>git</code> 才能对这个文件夹里面的内容进行各种操作</li><li>而 <code>git init</code> 就是在进行这个授权的操作</li></ul></li></ul><h4 id="GIT-暂存区"><a href="#GIT-暂存区" class="headerlink" title="GIT 暂存区"></a>GIT 暂存区</h4><ul><li><p>当一个文件夹被 <code>git</code> 管理了以后</p></li><li><p><code>git</code> 就会对当前文件夹进行 <strong>“分区”</strong></p></li><li><p>会分为三个区域</p><ol><li>工作区：我们书写的源码就在工作区里面</li><li>暂存区：把我们想要存储的内容放在暂存区</li><li>历史区：把暂存区里面的内容拿出来形成一个历史版本</li></ol></li><li><p>也就是说，我们需要把想成为一个版本的代码</p><ul><li>要先放在暂存区</li><li>然后才能在暂存区里面放到历史去</li><li>才可以生成一个版本保存下来</li></ul></li><li><p>我们要放入暂存区，要使用 <code>git add</code> 指令</p></li><li><p>把单独一个文件放在暂存区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 把文件夹下的 index.txt 文本放在暂存区</span><br><span class="line"><span class="meta">$</span> git add index.txt</span><br></pre></td></tr></table></figure></li><li><p>把单独一个文件夹放在暂存区（暂存区不能存放空文件夹）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 把文件夹下的 ceshi文件夹 放在暂存区</span><br><span class="line"><span class="meta">$</span> git add ceshi/</span><br></pre></td></tr></table></figure></li><li><p>把所有文件都放在暂存区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 把文件夹下所有的内容都放在暂存区</span><br><span class="line"><span class="meta">$</span> git add --all</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> git add --all 有一个简单的写法</span><br><span class="line"><span class="meta">$</span> git add .</span><br></pre></td></tr></table></figure><ul><li>全部存放的时候使用上面两个指令哪个都行</li></ul></li><li><p>把已经放在暂存区的内容在拉回到工作区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 拉回暂存区的 index.txt 文件</span><br><span class="line"><span class="meta">$</span> git reset HEAD -- index.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 拉回暂存区的 ceshi 文件夹</span><br><span class="line"><span class="meta">$</span> git reset HEAD -- ceshi/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 拉回暂存区的 所有文件</span><br><span class="line"><span class="meta">$</span> git reset HEAD -- .</span><br></pre></td></tr></table></figure><ul><li>注意： <strong><code>--</code> 两边都有空格，拉回所有文件的时候有个 <code>.</code></strong></li></ul></li><li><p>暂存区，只是帮我们暂时存放内容，我们删除了还是会丢的</p></li><li><p>要想帮我们保存下来，那么还需要把暂存区的内容放到历史区</p></li></ul><h4 id="GIT-历史区"><a href="#GIT-历史区" class="headerlink" title="GIT 历史区"></a>GIT 历史区</h4><ul><li><p><code>git</code> 的历史区，就是把我们暂存区里面的文件变成一个历史版本</p></li><li><p>当一些文件形成一个版本的时候，就会被一直记录下来了</p></li><li><p>向历史区里面添加内容的时候，必须保证 <strong>暂存区</strong> 有内容</p></li><li><p>因为历史区就是把暂存区里面的内容收录进去</p></li><li><p>向历史区添加内容使用 <code>git commit -m &quot;做一个简单的说明&quot;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 把暂存区的内容放到历史区</span><br><span class="line"><span class="meta">$</span> git commit -m "我是第一个版本"</span><br></pre></td></tr></table></figure><ul><li>我们一定要写一个简单的说明</li><li>因为当我们的历史版本多了以后，我们自己也记不住哪个版本做了哪些修改</li><li>所以有个简单的说明会好很多</li></ul></li><li><p>这个时候历史区就有了我们的第一个版本</p></li><li><p>我们使用 <code>git log</code> 这个指令查看版本信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看当前历史区版本信息</span><br><span class="line"><span class="meta">$</span> git log</span><br></pre></td></tr></table></figure><p><img src="J:/课程资料/week7/assets/git版本信息.png" alt></p><ul><li><code>commit</code>：这一个版本的版本编号</li><li><code>Author</code>：作者</li><li><code>Date</code>：本次版本的记录时间</li><li>后面的内容就是我刚才提交的时候写的说明</li></ul></li><li><p>接下来我们对文件夹内的内容进行一些修改，然后再次创建一个历史版本</p></li><li><p>对 <code>index.txt</code> 中的文本内容进行修改</p><ul><li>从 <code>hello world</code> 改变成 <code>你好 世界</code></li></ul></li><li><p>然后我们再次打印日志看一下</p><p><img src="J:/课程资料/week7/assets/git版本信息2.png" alt></p><ul><li>我们发现，日志信息变成了两条，也就是我们存在着两个版本的内容了</li></ul></li><li><p>放在历史区的内容，理论上就丢不了了</p></li><li><p>现在我们可以把我们本地工作区中的内容给删除了，删除以后我们进行历史回退</p></li><li><p>我们使用 <code>git reset --hard 版本编号</code> 进行历史回退</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 回退到第一次提交的版本</span><br><span class="line"><span class="meta">$</span> git reset --hard ce0c17f7a703c6847552c7aaab6becea6f0197f2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 回退到第二次提交的版本</span><br><span class="line"><span class="meta">$</span> git reset --hard abb2c4f12566440e04bc166c3285f855a37a3bb2</span><br></pre></td></tr></table></figure></li><li><p>这个时候我们就可以来回来去的玩我们的历史记录了</p></li></ul><h4 id="GIT-分支"><a href="#GIT-分支" class="headerlink" title="GIT 分支"></a>GIT 分支</h4><ul><li><p><code>git</code> 分支，就是我们自己把我们的整个文件夹分成一个一个独立的区域</p></li><li><p>比如我在开发 <strong>登录</strong> 功能的时候，可以放在 <code>login</code> 分支下进行开发</p><ul><li>开发 <strong>列表</strong> 功能的时候，可以放在 <code>list</code> 分支下进行开发</li><li>大家互不干扰，每一个功能都是一个独立的功能分支</li></ul></li><li><p>这样开发就会好很多</p></li><li><p><code>git</code> 在初始化的时候，会自动生成一个分支，叫做 <code>master</code> </p></li><li><p>是表示主要分支的意思</p></li><li><p>我们就可以自己开辟出很多独立分支</p></li><li><p>开辟一个分支使用 <code>git branch 分支名称</code> 指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 开辟一个 login 分支</span><br><span class="line"><span class="meta">$</span> git branch login</span><br></pre></td></tr></table></figure></li><li><p>查看一下当前分支情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看当前分支情况</span><br><span class="line"><span class="meta">$</span> git branch</span><br></pre></td></tr></table></figure><p><img src="J:/课程资料/week7/assets/查看分支情况.png" alt></p><ul><li>会看到，当前有两个分支了</li><li>一个是 <code>master</code>，一个是 <code>login</code></li><li>前面有个 <code>*</code> 号，并且有高亮显示的，表示你当前所处的分支</li></ul></li><li><p>我们对 <strong>登录</strong> 功能的开发要移动到 <code>login</code> 分支去完成</p></li><li><p>我们切换所处分支使用 <code>git checkout 分支名称</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 切换到 login 分支</span><br><span class="line"><span class="meta">$</span> git checkout login</span><br></pre></td></tr></table></figure></li><li><p>然后我们在整个分支上进行 <strong>登录</strong> 功能的开发</p></li><li><p>开发完毕以后，我们就在当前分支上进行提交</p></li><li><p>提交以后我们进行分支切换</p><ul><li>发现 <code>master</code> 上面还是最初始的状态</li><li>而 <code>login</code> 分支上有我们新写的 <strong>登录</strong> 功能的代码</li></ul></li><li><p>我们按照分支把所有功能都开发完毕了以后</p><ul><li>只要把所有代码都合并到 <code>master</code> 主分支上就行了</li></ul></li><li><p><code>git</code> 的合并分支，只能是把别的分支的内容合并到自己的分支上</p></li><li><p>使用的指令是 <code>git merge</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 切换到 master 分支</span><br><span class="line"><span class="meta">$</span> git checkout master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 把 login 的内容合并到自己的分支</span><br><span class="line"><span class="meta">$</span> git merge login</span><br></pre></td></tr></table></figure></li><li><p>这个时候，我们刚才在 <code>login</code> 上开发的东西就都来到了 <code>master</code> 主分支上</p></li><li><p>如果是有多个分支的话，那么所有的最后都合并到 <code>master</code> 分支上的时候</p></li><li><p>我们的主分支上就有完整网站的所有页面</p><ul><li>各个分支上都是单独的页面和功能</li></ul></li><li><p>这个时候我们开辟的分支就没有什么用了，就可以删除分支了</p><ol><li><p>先切换到别的分支</p></li><li><p>使用指令 <code>git branch -d 分支名称</code> 来删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 先切换到别的分支</span><br><span class="line"><span class="meta">$</span> git checkout master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除 login 分支</span><br><span class="line"><span class="meta">$</span> git branch -d login</span><br></pre></td></tr></table></figure></li></ol></li></ul><h5 id="常用的分支命名"><a href="#常用的分支命名" class="headerlink" title="常用的分支命名"></a>常用的分支命名</h5><ul><li>我们的分支命名也要规范一些</li><li>我们有一些分支名称大家都默认是有特殊意义的</li><li>比如我们之前的写的 <code>login</code> 分支就是不规范的分支名称<ul><li>而且也是不规范的分支操作</li></ul></li><li>常见的分支名称<ol><li>master：主分支，永远只存储一个可以稳定运行的版本，不能再这个分支上直接开发</li><li>develop： 主要开发分支，主要用于所用功能开发的代码合并，记录一个个的完整版本<ul><li>包含测试版本和稳定版本</li><li>不要再这个分支上进行开发</li></ul></li><li>feature-xxx：功能开发分支，从 <code>develop</code> 创建的分支<ul><li>主要用作某一个功能的开发</li><li>以自己功能来命名就行，例如 <code>feature-login</code> / <code>feature-list</code></li><li>开发完毕后合并到 <code>develop</code> 分支上</li></ul></li><li>feature-xxx-fix:  某一分支出现 <code>bug</code> 以后，在当前分支下开启一个 <code>fix</code> 分支<ul><li>解决完 <code>bug</code> 以后，合并到当前功能分支上</li><li>如果是功能分支已经合并之后发现 <code>bug</code> 可以直接在 <code>develop</code> 上开启分支</li><li>修复完成之后合并到 <code>develop</code> 分支上</li></ul></li><li>hotfix-xxx： 用于紧急 <code>bug</code> 修复<ul><li>直接在 <code>master</code> 分支上开启</li><li>修复完成之后合并回 <code>master</code> </li></ul></li></ol></li></ul><h4 id="GIT-推送"><a href="#GIT-推送" class="headerlink" title="GIT 推送"></a>GIT 推送</h4><ul><li>我们的所有内容已经全部保留在了本地历史区</li><li>理论上是不会丢失了<ul><li>但是如果把文件夹删除了，还是没有了</li></ul></li><li>所以我们要使用 <code>git</code> 把我们所有的内容推送到 <code>github</code> 上面保存起来</li><li>那么就本地文件夹就算删除了，那么远程上面还有一份，还可以拿回来使用</li><li>所以我们现在就要把本地内容推送到远程</li><li>这个时候我们接需要一个 <code>github</code> 的账号了</li><li>先去 <a href="https://github.com/" target="_blank" rel="noopener">github官网</a> 注册一个账号</li></ul><h5 id="开辟一个远程仓库"><a href="#开辟一个远程仓库" class="headerlink" title="开辟一个远程仓库"></a>开辟一个远程仓库</h5><ul><li><p>有了 <code>github</code>  账号以后</p></li><li><p>我们就登录 <code>github</code> 网站，开辟一个远程仓库</p></li><li><p><code>github</code> 的远程也是以一个仓库一个仓库的形式来保存代码</p><ul><li>我们可以在一个 <code>github</code> 上保存很多的项目</li><li>只要一个项目一个仓库就可以了</li></ul></li><li><p>按照下面步骤开辟仓库</p><ol><li><p>先点击新建仓库</p><p><img src="J:/课程资料/week7/assets/github开辟仓库1.png" alt></p></li><li><p>按照要求填写内容</p><p><img src="J:/课程资料/week7/assets/github开辟仓库2.png" alt></p></li><li><p>出现下图表示创建仓库成功</p><p><img src="J:/课程资料/week7/assets/github开辟仓库3.png" alt></p></li></ol></li><li><p>现在我们的远程仓库建立完毕了，我们就要把我们的项目代码整个上传了</p></li></ul><h5 id="添加仓库地址"><a href="#添加仓库地址" class="headerlink" title="添加仓库地址"></a>添加仓库地址</h5><ul><li><p>接下来，要使用 <code>git</code> 上传代码了</p></li><li><p>我们先要告诉 <code>git</code> 上传到哪里</p></li><li><p>也就是给 <code>git</code> 添加一个上传的地址</p></li><li><p>我们还是来到我们的项目文件夹</p></li><li><p>使用 <code>git remote add origin 仓库地址</code> 来添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在项目文件夹下打开 git base</span><br><span class="line"><span class="meta">#</span> 添加仓库地址</span><br><span class="line"><span class="meta">$</span> git remote add origin https://github.com/guoxiang910223/ceshi1913.git</span><br></pre></td></tr></table></figure><ul><li>remote：远程的意思</li><li>add：添加的意思</li><li>origin：是一个变量名（就是指代后面一长串的地址）</li></ul></li></ul><h5 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h5><ul><li><p>上传到哪里的地址我们已经添加好了</p></li><li><p>接下来就是上传内容了</p><ul><li>上传要保证 <strong>历史区</strong> 里面有内容</li><li>上传的过程会把 <strong>历史区</strong> 里面所有的内容上传到远端</li></ul></li><li><p>我们使用 <code>git push</code> 指令来上传</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 上传内容</span><br><span class="line"><span class="meta">$</span> git push -u origin master</span><br><span class="line"><span class="meta">#</span> 表示把内容上传到 origin 这个地址</span><br><span class="line"><span class="meta">#</span> master 是上传到远程的 master 分支</span><br></pre></td></tr></table></figure><ul><li><code>-u</code> 是我们第一次的使用用到了，是为了记录一下用户名和密码</li><li>下次上传的时候就不需要再写了</li></ul></li><li><p>第二次上传</p><ul><li><p>第二次上传的时候，因为有刚才的记录，就不需要再写 <code>origin</code> 和 <code>master</code> 了</p></li><li><p>会默认传递到 <code>origin</code> 这个地址的 <code>master</code> 分支上</p></li><li><p>除非你要传递到别的分支上的时候再进行书写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 第二次上传</span><br><span class="line"><span class="meta">$</span> git push</span><br></pre></td></tr></table></figure></li></ul></li><li><p>到这里，就完成了一次 <code>git</code> 推送</p></li><li><p>这个时候本地的文件夹就真的可以删除了</p></li><li><p>因为远程有一份我们的内容，本地的删除了，可以直接把远程的拉回来就行</p></li></ul><h3 id="GIT-克隆"><a href="#GIT-克隆" class="headerlink" title="GIT 克隆"></a>GIT 克隆</h3><ul><li><p><code>git</code> 克隆是指把远程仓库里面的内容克隆一份到本地</p></li><li><p>可以克隆别人的 <strong>公开</strong> 的仓库，也可以克隆自己的仓库</p></li><li><p>克隆别人的仓库，我们只能拿下来用，修改后不能从新上传</p></li><li><p>克隆自己的仓库，我们修改后还可以再次上传更新</p></li><li><p>我们先找到一个别人的仓库，或者自己的仓库（这里以 jQuery 的仓库为例）</p><p><img src="J:/课程资料/week7/assets/github克隆仓库1.png" alt></p></li><li><p>复制好地址以后，选择一个我们要存放内容的文件夹（我这里以桌面为例）</p></li><li><p>直接在想存放内容的位置打开 <code>git base</code></p></li><li><p>输入克隆指令 <code>git clone 仓库地址</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 直接克隆仓库</span><br><span class="line"><span class="meta">$</span> git clone https://github.com/jquery/jquery.git</span><br></pre></td></tr></table></figure></li><li><p>等待一段时间</p></li><li><p>你就会发现你的文件夹里面多了一个叫做  <code>jquery</code> 的文件夹</p></li><li><p>里面就是人家仓库的所有内容</p></li></ul><h3 id="GIT-下拉"><a href="#GIT-下拉" class="headerlink" title="GIT 下拉"></a>GIT 下拉</h3><ul><li><p>不管是你克隆下来的仓库还是别的方式弄得本地仓库</p></li><li><p>当人家的代码更新以后，你想获得最新的代码</p></li><li><p>我们不需要从新克隆</p></li><li><p>只要拉取一次代码就可以了</p></li><li><p>直接在项目文件夹里面使用指令下拉</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 拉取远程最新代码</span><br><span class="line"><span class="meta">$</span> git pull</span><br></pre></td></tr></table></figure></li><li><p>这样一来，你本地的仓库就可远程的仓库同步了</p></li></ul><h2 id="GIT-冲突"><a href="#GIT-冲突" class="headerlink" title="GIT 冲突"></a>GIT 冲突</h2><ul><li><p><code>git</code> 冲突是指在我们的上传过程中</p></li><li><p>本地的版本和远程的版本不一致导致的</p></li><li><p>这个时候只要先使用 <code>git pull</code> 拉取回来</p><ul><li>让本地和远程保持一致</li></ul></li><li><p>然后再从新上传就好了</p></li><li><p>但是 <code>git pull</code> 相对不安全，因为会自动和本地内容合并</p></li><li><p>我们也可以选择使用 <code>git fetch</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 使用 fetch 获取远程最新信息并开辟一个临时分支</span><br><span class="line"><span class="meta">$</span> git fetch origin master:tmp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 讲当前分支和临时分支的内容进行对比</span><br><span class="line"><span class="meta">$</span> git diff tmp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 再选择合并分支内容</span><br><span class="line"><span class="meta">$</span> git merge tmp</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;GIT-和-GITHUB&quot;&gt;&lt;a href=&quot;#GIT-和-GITHUB&quot; class=&quot;headerlink&quot; title=&quot;GIT 和 GITHUB&quot;&gt;&lt;/a&gt;GIT 和 GITHUB&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在学习之前我们要先要清楚几个东西&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git&lt;/code&gt; 和 &lt;code&gt;github&lt;/code&gt; 是两个东西，不是一个东西&lt;/li&gt;
&lt;li&gt;就像 &lt;code&gt;java&lt;/code&gt; 和 &lt;code&gt;javascript&lt;/code&gt; 一样，是两个东西&lt;/li&gt;
&lt;li&gt;需要搞清楚几个词语的意思&lt;ul&gt;
&lt;li&gt;本地：我自己的终端&lt;/li&gt;
&lt;li&gt;远程：在网络那一头的终端&lt;/li&gt;
&lt;li&gt;仓库：一个被 &lt;code&gt;git&lt;/code&gt; 管理了的文件夹&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;什么是-GIT&quot;&gt;&lt;a href=&quot;#什么是-GIT&quot; class=&quot;headerlink&quot; title=&quot;什么是 GIT&quot;&gt;&lt;/a&gt;什么是 GIT&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git&lt;/code&gt; 官方名称： &lt;strong&gt;分布式版本管理器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;私人解释： 就是一个管理我们文件夹的工具&lt;ul&gt;
&lt;li&gt;只不过可以保留所有的版本信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;就是我们安装一个软件&lt;ul&gt;
&lt;li&gt;然后用这个软件来管理我们的一个文件夹&lt;/li&gt;
&lt;li&gt;这个文件夹被 &lt;code&gt;git&lt;/code&gt; 管理以后，我们可以对他进行各种操作&lt;/li&gt;
&lt;li&gt;保证我们写过的内容不会丢失&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="千锋" scheme="http://yoursite.com/categories/千锋/"/>
    
    
  </entry>
  
  <entry>
    <title>DAY7-3_GULP</title>
    <link href="http://yoursite.com/2021/11/03/DAY7-3-GULP/"/>
    <id>http://yoursite.com/2021/11/03/DAY7-3-GULP/</id>
    <published>2021-11-03T02:58:35.000Z</published>
    <updated>2021-11-03T02:58:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GULP"><a href="#GULP" class="headerlink" title="GULP"></a>GULP</h1><ul><li><code>gulp</code> 是一个项目开发的 <strong>自动化打包构建工具</strong></li><li>基于 <code>node</code> 环境来运行的</li></ul><h2 id="什么是自动化打包构建工具"><a href="#什么是自动化打包构建工具" class="headerlink" title="什么是自动化打包构建工具"></a>什么是自动化打包构建工具</h2><ul><li>比如<ul><li>我们在开发的过程中，会写到 <code>js</code> 文件，<code>css</code> 文件，等等</li><li>我们的项目如果想上线，那么一定要体积小一点，文件大小越小越好</li><li>而我们在写 <code>js</code> 文件的时候，会有很多 <strong>换行/空格</strong> 之类的东西</li><li>这些 <strong>换行/空格</strong> 都是占文件体积的一部分</li><li>那么我们在上线之前就要吧这些 <strong>换行/空格</strong> 尽可能的删除掉</li><li>我们又不能一个文件一个文件的去删除</li><li>就要用到一个自动化工具来帮助我们把这些多余的东西干掉</li></ul></li><li>这个就是自动化工具的意义</li><li>常见的自动化打包构建工具<ul><li><code>gulp</code></li><li><code>webpack</code></li></ul></li></ul><a id="more"></a><h2 id="安装-GULP"><a href="#安装-GULP" class="headerlink" title="安装 GULP"></a>安装 GULP</h2><ul><li><p><code>gulp</code> 是一个依赖于 <code>node</code> 的环境工具</p></li><li><p>所以我们需要先安装一个 <strong>全局 <code>gulp</code> 依赖</strong></p></li><li><p>直接使用 <code>npm</code> 去安装就可以了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 使用 npm 安装全局依赖 gulp</span><br><span class="line"><span class="meta">#</span> 我们这里安装一个 3.9.1 版本的就好了</span><br><span class="line"><span class="meta">$</span> npm install --global gulp@3.9.1</span><br></pre></td></tr></table></figure></li><li><p>等待安装完毕就好了</p></li><li><p>这个全局环境一个电脑安装一次就好了</p></li><li><p>还是照例检查一下是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gulp --version</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用-GULP"><a href="#使用-GULP" class="headerlink" title="使用 GULP"></a>使用 GULP</h2><ul><li><p>安装完毕以后，我们就可以使用 GULP 对我们的项目进行自动化构建了</p></li><li><p>首先我们要有一个项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- gulp_demo    项目文件夹</span><br><span class="line">  - src        项目源码</span><br><span class="line">    + css      css 文件夹</span><br><span class="line">    + js       js 文件夹</span><br><span class="line">    + pages    html 文件夹</span><br><span class="line">    + sass     sass 文件夹</span><br><span class="line">    + lib      第三方文件夹</span><br><span class="line">    + static   静态资源文件夹</span><br></pre></td></tr></table></figure></li><li><p>目录结构不一定都是这个样子</p></li><li><p>但是最好是一个便于管理的文件夹目录结构</p></li><li><p>因为是一个项目了，最好使用 <code>npm</code> 来帮我们管理一下</p><ul><li>这样可以记录我们的下载使用了那些依赖</li></ul></li><li><p>所以在项目文件夹 <code>gulp-demo</code> 里面执行一个 <strong><code>npm</code> 初始化</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd gulp_demo</span><br><span class="line"><span class="meta">$</span> npm init -y</span><br></pre></td></tr></table></figure></li><li><p>执行完毕之后，再来看一下我们的项目目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- gulp_demo</span><br><span class="line">  + src </span><br><span class="line">  + package.json</span><br></pre></td></tr></table></figure></li></ul><h3 id="项目-GULP-配置"><a href="#项目-GULP-配置" class="headerlink" title="项目 GULP 配置"></a>项目 GULP 配置</h3><ul><li><p>我们之前已经安装过 <code>gulp</code> 全局依赖了</p></li><li><p>但是每一个项目都要在安装一次 <code>gulp</code> 的项目依赖</p></li><li><p>因为每一个项目的打包构建规则都不一样，所以不能全都配置成一个</p></li><li><p>所以我们要在项目里面再次进行 <code>gulp</code> 安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd gulp_demo</span><br><span class="line"><span class="meta">$</span> npm install -D gulp@3.9.1</span><br></pre></td></tr></table></figure><ul><li>项目中的 <code>gulp</code> 依赖要和全局 <code>gulp</code> 环境保持版本一致</li></ul></li><li><p>接下来就是对这个项目进行打包构建的配置</p></li><li><p><code>gulp</code> 的使用，要在项目目录下新建一个 <code>gulpfile.js</code></p></li><li><p>在这个 <code>gulpfile.js</code> 文件里面进行配置</p></li><li><p>然后使用 <code>gulp</code> 进行构建的时候就会按照 <code>gulpfile.js</code> 文件里面的规则进行打包构建</p></li><li><p>再来看一下我们的目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- gulp_demo</span><br><span class="line">  + node_modules         依赖包目录</span><br><span class="line">  + src                  项目源码</span><br><span class="line">  + gulpfile.js          gulp 配置文件</span><br><span class="line">  + package-lock.json    依赖下载版本 json 文件</span><br><span class="line">  + package.json         项目管理 json 文件</span><br></pre></td></tr></table></figure></li><li><p>接下来我们就是在 <code>gulpfile.js</code> 文件里面进行配置，让我们的打包构建可以生效</p></li></ul><h3 id="打包-CSS-文件"><a href="#打包-CSS-文件" class="headerlink" title="打包 CSS 文件"></a>打包 CSS 文件</h3><ul><li><p>我们从简单的内容开始，先来打包构建 <code>css</code> 文件</p></li><li><p>其实就是在 <code>gulpfile.js</code> 里面进行一些配置</p></li><li><p>第一个事情就是引入 <code>gulp</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 gulpfile.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 引入 gulp</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>gulp</code> 是基于任务来完成构建的</p></li><li><p>所以我们要创建一个打包 <code>css</code> 的任务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 gulpfile.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 引入 gulp</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建一个 css 的任务</span></span><br><span class="line"><span class="comment">//   gulp.task() 是用来创建任务的</span></span><br><span class="line"><span class="comment">//   参数一： 任务名称</span></span><br><span class="line"><span class="comment">//   参数二： 一个函数（这个任务要做什么事情）</span></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>有了任务以后，我们就要在 <code>css</code> 这个任务里面写一些这个任务要做的事情了</p></li><li><p>我们要把 <code>./src/css/所有css文件</code> 都进行压缩处理</p></li><li><p>这个时候我们自己完成不了，就需要借助一个第三方依赖</p><ul><li><code>npm i -D gulp-cssmin</code></li></ul></li><li><p>下载完毕以后，去文件中进行配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 gulpfile.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 引入 gulp</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 引入 gulp-cssmin</span></span><br><span class="line"><span class="keyword">const</span> cssmin = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建一个 css 的任务</span></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/css/**'</span>)   <span class="comment">// 对哪些文件进行操作</span></span><br><span class="line">    .pipe(cssmin())        <span class="comment">// 都做什么，这里做的就是进行 css 压缩</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))  <span class="comment">// 把压缩完毕的文件放在 dist 文件夹下的 css 文件夹   </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>gulp.src()</code> 是指找到那些文件对其操作</li><li><code>gulp.pipe()</code> 是指要做什么</li><li><code>gulp.dest()</code> 是指输出到哪个目录下，如果没有这个目录存在会自动创建这个目录</li><li>所以上面哪个 <code>css</code> 任务的意思就是<ul><li>把 <code>./src/css/</code> 目录下的所有文件</li><li>进行压缩</li><li>压缩完毕后放在 <code>./dist/</code> 下的 <code>css/</code> 文件夹下</li></ul></li></ul></li><li><p>接下来，就是执行一下这个叫做 <code>css</code> 的任务就行了</p></li><li><p>直接在控制台使用指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示运行 gulpfils.js 配置文件中的 css 任务</span><br><span class="line"><span class="meta">$</span> gulp css</span><br></pre></td></tr></table></figure><ul><li>执行完毕以后，就会在 <code>gulp_demo</code> 目录下生成一个 <code>dist/</code> 文件夹</li><li>里面就有我们压缩好的 <code>css</code> 文件</li></ul></li></ul><h4 id="自动添加前缀"><a href="#自动添加前缀" class="headerlink" title="自动添加前缀"></a>自动添加前缀</h4><ul><li><p>我们希望在 <code>css</code> 压缩之前，能帮我自动把需要前缀的属性 <strong>自动把前缀添加上</strong> 就好了</p></li><li><p>这个是可以做到的</p></li><li><p>我们又需要一个依赖了</p><ul><li><code>npm i -D gulp-autoprefixer</code></li></ul></li><li><p>安装完还是去到文件中进行配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 gulpfile.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 引入 gulp</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 引入 gulp-cssmin</span></span><br><span class="line"><span class="keyword">const</span> cssmin = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-1. 引入 gulp-autoprefixer </span></span><br><span class="line"><span class="keyword">const</span> autoPrefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建一个 css 的任务</span></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/css/**'</span>)   </span><br><span class="line">    .pipe(autoPrefixer(&#123;</span><br><span class="line">        browsers: [<span class="string">'last 2 versions'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(cssmin())       </span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>因为添加前缀需要在压缩之前添加</li><li>所以我们就直接在任务里面多做一个事情就行了</li></ul></li></ul><h3 id="打包-SASS-文件"><a href="#打包-SASS-文件" class="headerlink" title="打包 SASS 文件"></a>打包 SASS 文件</h3><ul><li><p>接下来我们解决一下 <code>sass</code> 的问题</p></li><li><p>因为有的时候我们开发要使用 <code>sass</code> 所以我们要解决一下 <code>sass</code> 的问题</p></li><li><p>其实打包 <code>sass</code> 和 <code>css</code> 差不多，只不过先要把 <code>sass</code> 解析成 <code>css</code> </p><ol><li>把 <code>sass</code> 解析成 <code>css</code></li><li>自动添加前缀</li><li>压缩一下</li><li>放到对应的文件夹中</li></ol></li><li><p>使用 <code>gulp</code> 解析 <code>sass</code> 文件需要用到一个依赖</p><ul><li><code>npm i -D gulp-sass</code></li></ul></li><li><p>然后我们就去到配置文件里面进行配置就好了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 gulpfile.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 引入 gulp</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 引入 gulp-cssmin</span></span><br><span class="line"><span class="keyword">const</span> cssmin = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-1. 引入 gulp-autoprefixer </span></span><br><span class="line"><span class="keyword">const</span> autoPrefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-2. 引入 gulp-sass</span></span><br><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-1. 创建一个 css 的任务</span></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/css/**'</span>)   </span><br><span class="line">    .pipe(autoPrefixer(&#123;</span><br><span class="line">        browsers: [<span class="string">'last 2 versions'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(cssmin())       </span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-2. 创建一个 sass 任务</span></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/sass/**'</span>)</span><br><span class="line">    .pipe(sass())</span><br><span class="line">    .pipe(autoPrefixer())</span><br><span class="line">    .pipe(cssmin())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>我们的 <code>sass</code> 文件编译完以后也是 <code>css</code> 文件，所以就也放在 <code>css</code> 文件夹下就好了</li><li>就是要注意一下别和本来 <code>css</code> 文件夹下的文件重名就好了</li></ul></li><li><p>然后就可以去命令行执行 <code>sass</code> 这个任务了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 执行 sass 任务</span><br><span class="line"><span class="meta">$</span> gulp sass</span><br></pre></td></tr></table></figure></li></ul><h3 id="打包-JS-文件"><a href="#打包-JS-文件" class="headerlink" title="打包 JS 文件"></a>打包 JS 文件</h3><ul><li><p>接下来就是打包一下 <code>js</code> 文件了</p></li><li><p>其实套路是一样的</p></li><li><p>先来做最简单的操作</p></li><li><p>压缩一下 <code>js</code> 文件</p></li><li><p>需要用到一个依赖</p><ul><li><code>npm i -D gulp-uglify</code></li></ul></li><li><p>然后依旧是去到配置文件中进行配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 gulpfile.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 引入 gulp</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-1. 引入 gulp-cssmin</span></span><br><span class="line"><span class="keyword">const</span> cssmin = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-2. 引入 gulp-autoprefixer </span></span><br><span class="line"><span class="keyword">const</span> autoPrefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-3. 引入 gulp-sass</span></span><br><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-1. 引入 gulp-uglify</span></span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-urlify'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-1. 创建一个 css 的任务</span></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/css/**'</span>)   </span><br><span class="line">    .pipe(autoPrefixer(&#123;</span><br><span class="line">        browsers: [<span class="string">'last 2 versions'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(cssmin())       </span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-2. 创建一个 sass 任务</span></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/sass/**'</span>)</span><br><span class="line">    .pipe(sass())</span><br><span class="line">    .pipe(autoPrefixer())</span><br><span class="line">    .pipe(cssmin())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建一个 js 任务</span></span><br><span class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/js/**'</span>)</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/js'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>然后我们去命令行执行 <code>js</code> 这个任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 执行 js 任务</span><br><span class="line"><span class="meta">$</span> gulp js</span><br></pre></td></tr></table></figure></li></ul><h4 id="编译-ES6-语法"><a href="#编译-ES6-语法" class="headerlink" title="编译 ES6 语法"></a>编译 ES6 语法</h4><ul><li><p>之前我们学习 <code>es6</code> 的时候就说过</p></li><li><p>很多浏览器不是很认识 <code>es6</code> 的语法</p></li><li><p>我们要把他编译成 <code>es5</code> 的语法</p></li><li><p>所以我们在打包 <code>js</code> 文件的时候，就要转换一下</p></li><li><p>我们依旧是使用依赖来完成，只不过 <code>es6</code> 转 <code>es5</code> 需要三个依赖</p><ul><li><code>npm i -D gulp-babel@7.0.1</code></li><li><code>npm i -D babel-core</code></li><li><code>npm i -D babel-preset-es2015</code></li></ul></li><li><p>然后我们就去配置文件里面进行配置就可以了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 gulpfile.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 引入 gulp</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-1. 引入 gulp-cssmin</span></span><br><span class="line"><span class="keyword">const</span> cssmin = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-2. 引入 gulp-autoprefixer </span></span><br><span class="line"><span class="keyword">const</span> autoPrefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-3. 引入 gulp-sass</span></span><br><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-1. 引入 gulp-uglify</span></span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-urlify'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-2. 引入 gulp-babel</span></span><br><span class="line"><span class="comment">//      es6 转 es5 虽然需要下载三个依赖，但是只需要引入一个 gulp-babel 就可以了</span></span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-1. 创建一个 css 的任务</span></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/css/**'</span>)   </span><br><span class="line">    .pipe(autoPrefixer(&#123;</span><br><span class="line">        browsers: [<span class="string">'last 2 versions'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(cssmin())       </span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-2. 创建一个 sass 任务</span></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/sass/**'</span>)</span><br><span class="line">    .pipe(sass())</span><br><span class="line">    .pipe(autoPrefixer())</span><br><span class="line">    .pipe(cssmin())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建一个 js 任务</span></span><br><span class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/js/**'</span>)</span><br><span class="line">    .pipe(babel(&#123;</span><br><span class="line">        presets: [<span class="string">'es2015'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/js'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>引入以后，只要在压缩之前执行一下转码就可以了</li><li>注意要传递一个参数</li></ul></li><li><p>然后再次执行 <code>js</code> 任务就可以了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 执行 js 任务</span><br><span class="line"><span class="meta">$</span> gulp js</span><br></pre></td></tr></table></figure></li></ul><h3 id="打包-HTML-文件"><a href="#打包-HTML-文件" class="headerlink" title="打包 HTML 文件"></a>打包 HTML 文件</h3><ul><li><p>接下来就要把 <code>html</code> 文件解决一下了</p></li><li><p>还是一个套路</p></li><li><p>压缩 <code>html</code> 文件需要一个依赖</p><ul><li><code>npm i -D gulp-htmlmin</code></li></ul></li><li><p>下载好以后去到配置文件中进行配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 gulpfile.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 引入 gulp</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-1. 引入 gulp-cssmin</span></span><br><span class="line"><span class="keyword">const</span> cssmin = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-2. 引入 gulp-autoprefixer </span></span><br><span class="line"><span class="keyword">const</span> autoPrefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-3. 引入 gulp-sass</span></span><br><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-1. 引入 gulp-uglify</span></span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-urlify'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-2. 引入 gulp-babel</span></span><br><span class="line"><span class="comment">//      es6 转 es5 虽然需要下载三个依赖，但是只需要引入一个 gulp-babel 就可以了</span></span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 引入 gulp-htmlmin</span></span><br><span class="line"><span class="keyword">const</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-1. 创建一个 css 的任务</span></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/css/**'</span>)   </span><br><span class="line">    .pipe(autoPrefixer(&#123;</span><br><span class="line">        browsers: [<span class="string">'last 2 versions'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(cssmin())       </span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-2. 创建一个 sass 任务</span></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/sass/**'</span>)</span><br><span class="line">    .pipe(sass())</span><br><span class="line">    .pipe(autoPrefixer())</span><br><span class="line">    .pipe(cssmin())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建一个 js 任务</span></span><br><span class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/js/**'</span>)</span><br><span class="line">    .pipe(babel(&#123;</span><br><span class="line">        presets: [<span class="string">'es2015'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/js'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 创建一个 html 任务</span></span><br><span class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/pages/**'</span>)</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">        removeEmptyAttibutes: <span class="literal">true</span>, <span class="comment">// 移出所有空属性</span></span><br><span class="line">        collapseWhitespace: <span class="literal">true</span> <span class="comment">// 压缩 html</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/pages'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>这样就配置完毕了</li></ul></li><li><p>接下来就是去命令行运行一下 <code>html</code> 任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 运行 html 任务</span><br><span class="line"><span class="meta">$</span> gulp html</span><br></pre></td></tr></table></figure></li></ul><h3 id="处理-LIB-和-STATIC-文件"><a href="#处理-LIB-和-STATIC-文件" class="headerlink" title="处理 LIB 和 STATIC 文件"></a>处理 LIB 和 STATIC 文件</h3><ul><li><p>接下来我们就是处理 <code>lib</code> 和 <code>static</code> 里面的文件了</p></li><li><p>因为这些都是第三方的文件和一些图片之类的信息</p></li><li><p>不需要压缩处理，只要给我转到 <code>dist</code> 文件夹下就可以了</p></li><li><p>所以不需要依赖，直接处理就行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 gulpfile.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 引入 gulp</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-1. 引入 gulp-cssmin</span></span><br><span class="line"><span class="keyword">const</span> cssmin = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-2. 引入 gulp-autoprefixer </span></span><br><span class="line"><span class="keyword">const</span> autoPrefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-3. 引入 gulp-sass</span></span><br><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-1. 引入 gulp-uglify</span></span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-urlify'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-2. 引入 gulp-babel</span></span><br><span class="line"><span class="comment">//      es6 转 es5 虽然需要下载三个依赖，但是只需要引入一个 gulp-babel 就可以了</span></span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 引入 gulp-htmlmin</span></span><br><span class="line"><span class="keyword">const</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-1. 创建一个 css 的任务</span></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/css/**'</span>)   </span><br><span class="line">    .pipe(autoPrefixer(&#123;</span><br><span class="line">        browsers: [<span class="string">'last 2 versions'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(cssmin())       </span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-2. 创建一个 sass 任务</span></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/sass/**'</span>)</span><br><span class="line">    .pipe(sass())</span><br><span class="line">    .pipe(autoPrefixer())</span><br><span class="line">    .pipe(cssmin())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建一个 js 任务</span></span><br><span class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/js/**'</span>)</span><br><span class="line">    .pipe(babel(&#123;</span><br><span class="line">        presets: [<span class="string">'es2015'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/js'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 创建一个 html 任务</span></span><br><span class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/pages/**'</span>)</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">        removeEmptyAttibutes: <span class="literal">true</span>, <span class="comment">// 移出所有空属性</span></span><br><span class="line">        collapseWhitespace: <span class="literal">true</span> <span class="comment">// 压缩 html</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/pages'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 创建一个 lib 任务</span></span><br><span class="line">gulp.task(<span class="string">'lib'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/lib/**'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/lib'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 创建一个 static 任务</span></span><br><span class="line">gulp.task(<span class="string">'static'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/static/**'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/static'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>接下来就是去命令行执行 <code>lib</code> 任务和 <code>static</code> 任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 执行 lib 任务</span><br><span class="line"><span class="meta">$</span> gulp lib</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 执行 static 任务</span><br><span class="line"><span class="meta">$</span>gulp static</span><br></pre></td></tr></table></figure></li></ul><h3 id="批量执行任务"><a href="#批量执行任务" class="headerlink" title="批量执行任务"></a>批量执行任务</h3><ul><li><p>我们的几个和文件相关的任务都配置完毕了</p></li><li><p>但是我们不能在开发过程中一个任务一个任务的去执行</p></li><li><p>不方便也不是很只能</p></li><li><p>所以我们要统一执行任务</p></li><li><p>这个时候就需要进行一个配置，让几个任务一起执行一下</p></li><li><p>这个不需要依赖，我们只需要配置一个叫做 <code>default</code> 的任务</p></li><li><p><code>gulp</code> 在运行的时候会默认执行 <code>default</code> 任务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 gulpfile.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 引入 gulp</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-1. 引入 gulp-cssmin</span></span><br><span class="line"><span class="keyword">const</span> cssmin = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-2. 引入 gulp-autoprefixer </span></span><br><span class="line"><span class="keyword">const</span> autoPrefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-3. 引入 gulp-sass</span></span><br><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-1. 引入 gulp-uglify</span></span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-urlify'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-2. 引入 gulp-babel</span></span><br><span class="line"><span class="comment">//      es6 转 es5 虽然需要下载三个依赖，但是只需要引入一个 gulp-babel 就可以了</span></span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 引入 gulp-htmlmin</span></span><br><span class="line"><span class="keyword">const</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-1. 创建一个 css 的任务</span></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/css/**'</span>)   </span><br><span class="line">    .pipe(autoPrefixer(&#123;</span><br><span class="line">        browsers: [<span class="string">'last 2 versions'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(cssmin())       </span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-2. 创建一个 sass 任务</span></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/sass/**'</span>)</span><br><span class="line">    .pipe(sass())</span><br><span class="line">    .pipe(autoPrefixer())</span><br><span class="line">    .pipe(cssmin())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建一个 js 任务</span></span><br><span class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/js/**'</span>)</span><br><span class="line">    .pipe(babel(&#123;</span><br><span class="line">        presets: [<span class="string">'es2015'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/js'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 创建一个 html 任务</span></span><br><span class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/pages/**'</span>)</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">        removeEmptyAttibutes: <span class="literal">true</span>, <span class="comment">// 移出所有空属性</span></span><br><span class="line">        collapseWhitespace: <span class="literal">true</span> <span class="comment">// 压缩 html</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/pages'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 创建一个 lib 任务</span></span><br><span class="line">gulp.task(<span class="string">'lib'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/lib/**'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/lib'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 创建一个 static 任务</span></span><br><span class="line">gulp.task(<span class="string">'static'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/static/**'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/static'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 配置一个默认任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'css'</span>, <span class="string">'sass'</span>, <span class="string">'js'</span>, <span class="string">'html'</span>, <span class="string">'lib'</span>, <span class="string">'static'</span>])</span><br></pre></td></tr></table></figure><ul><li>这样配置完毕以后，当你运行 <code>gulp</code> 的时候，会自动执行 <code>default</code> 任务</li><li>然后 <code>default</code> 任务就会把后面数组中写的几个任务并行执行了</li></ul></li><li><p>接下来就是去命令行里面运行 <code>gulp</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 运行 gulp，会默认执行 default 任务</span><br><span class="line"><span class="meta">$</span> gulp</span><br></pre></td></tr></table></figure></li></ul><h3 id="清除-DIST-文件夹"><a href="#清除-DIST-文件夹" class="headerlink" title="清除 DIST 文件夹"></a>清除 DIST 文件夹</h3><ul><li><p>当你在编译的时候，如果第一次编译有一个叫做 <code>a.css</code> 的文件，他会帮你编译</p></li><li><p>后来你把 <code>a.css</code> 文件改名字了，改叫 <code>b.css</code>，再次进行编译的时候</p></li><li><p>会给你新生成一个 <code>b.css</code> 文件在 <code>dist</code> 文件夹中</p></li><li><p>之前的 <code>a.css</code> 文件也不会消失</p></li><li><p>那么这样就不是很好了</p></li><li><p>我们比较好的做法是</p><ul><li>在执行所有的编译之前</li><li>先把 <code>dist</code> 文件夹删除掉</li><li>然后再执行所有的编译操作</li></ul></li><li><p>这样就不会用多余的文件留下了</p></li><li><p>这个时候我们就要使用一个依赖</p><ul><li><code>npm i -D gulp-clean</code></li></ul></li><li><p>然后去配置文件里面配置一个任务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 gulpfile.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 引入 gulp</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-1. 引入 gulp-cssmin</span></span><br><span class="line"><span class="keyword">const</span> cssmin = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-2. 引入 gulp-autoprefixer </span></span><br><span class="line"><span class="keyword">const</span> autoPrefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-3. 引入 gulp-sass</span></span><br><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-1. 引入 gulp-uglify</span></span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-urlify'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-2. 引入 gulp-babel</span></span><br><span class="line"><span class="comment">//      es6 转 es5 虽然需要下载三个依赖，但是只需要引入一个 gulp-babel 就可以了</span></span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 引入 gulp-htmlmin</span></span><br><span class="line"><span class="keyword">const</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 引入 gulp-clean</span></span><br><span class="line"><span class="keyword">const</span> clean = <span class="built_in">require</span>(<span class="string">'gulp-clean'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-1. 创建一个 css 的任务</span></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/css/**'</span>)   </span><br><span class="line">    .pipe(autoPrefixer(&#123;</span><br><span class="line">        browsers: [<span class="string">'last 2 versions'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(cssmin())       </span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-2. 创建一个 sass 任务</span></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/sass/**'</span>)</span><br><span class="line">    .pipe(sass())</span><br><span class="line">    .pipe(autoPrefixer())</span><br><span class="line">    .pipe(cssmin())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建一个 js 任务</span></span><br><span class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/js/**'</span>)</span><br><span class="line">    .pipe(babel(&#123;</span><br><span class="line">        presets: [<span class="string">'es2015'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/js'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 创建一个 html 任务</span></span><br><span class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/pages/**'</span>)</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">        removeEmptyAttibutes: <span class="literal">true</span>, <span class="comment">// 移出所有空属性</span></span><br><span class="line">        collapseWhitespace: <span class="literal">true</span> <span class="comment">// 压缩 html</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/pages'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 创建一个 lib 任务</span></span><br><span class="line">gulp.task(<span class="string">'lib'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/lib/**'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/lib'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 创建一个 static 任务</span></span><br><span class="line">gulp.task(<span class="string">'static'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/static/**'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/static'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. 创建一个 clean 任务</span></span><br><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./dist'</span>)</span><br><span class="line">    .pipe(clean())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 配置一个默认任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'css'</span>, <span class="string">'sass'</span>, <span class="string">'js'</span>, <span class="string">'html'</span>, <span class="string">'lib'</span>, <span class="string">'static'</span>])</span><br></pre></td></tr></table></figure></li><li><p>接下来我们执行任务的时候就应该先执行 <code>clean</code> 任务，再执行 <code>default</code> 任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 执行 clean 任务</span><br><span class="line"><span class="meta">$</span> gulp clean</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 执行 default 任务</span><br><span class="line"><span class="meta">$</span> gulp</span><br></pre></td></tr></table></figure></li></ul><h3 id="按顺序执行任务"><a href="#按顺序执行任务" class="headerlink" title="按顺序执行任务"></a>按顺序执行任务</h3><ul><li><p>因为每次打包都要执行一个 <code>clean</code> 任务</p></li><li><p>那么我们就可以把 <code>clean</code> 任务也加到 <code>default</code> 任务的队列里面执行</p><ul><li><code>gulp.task(&#39;default&#39;, [&#39;clean&#39;, css&#39;, &#39;sass&#39;, &#39;js&#39;, &#39;html&#39;, &#39;lib&#39;, &#39;static&#39;])</code></li></ul></li><li><p>这样我们运行的时候，每次就都会帮我们执行 <code>clean</code> 任务了</p></li><li><p>但是会出现一个问题</p><ul><li>因为后面队列里面的任务是并行的</li><li>那么有的时间长有的时间短</li><li>那么就会出现有一些文件已经压缩完毕放在 <code>dist/</code> 文件夹里面了</li><li>然后 <code>clean</code> 任务执行完毕的时候又给直接清除掉了</li><li>这样不是很好</li></ul></li><li><p>我们就需要让这些任务出现先后顺序</p><ul><li>先执行一下 <code>clean</code> 任务</li><li><code>clean</code> 执行完毕以后，剩下的几个压缩文件的任务可以并行执行</li></ul></li><li><p>这个时候我们就需要用到一个依赖</p><ul><li><code>npm i -D run-sequence</code></li></ul></li><li><p>这个依赖是逐步执行任务的一个包</p></li><li><p>这个时候我们修改一下 <code>default</code> 任务就好了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 gulpfile.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 引入 gulp</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-1. 引入 gulp-cssmin</span></span><br><span class="line"><span class="keyword">const</span> cssmin = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-2. 引入 gulp-autoprefixer </span></span><br><span class="line"><span class="keyword">const</span> autoPrefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-3. 引入 gulp-sass</span></span><br><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-1. 引入 gulp-uglify</span></span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-urlify'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-2. 引入 gulp-babel</span></span><br><span class="line"><span class="comment">//      es6 转 es5 虽然需要下载三个依赖，但是只需要引入一个 gulp-babel 就可以了</span></span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 引入 gulp-htmlmin</span></span><br><span class="line"><span class="keyword">const</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 引入 gulp-clean</span></span><br><span class="line"><span class="keyword">const</span> clean = <span class="built_in">require</span>(<span class="string">'gulp-clean'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 引入 run-sequence</span></span><br><span class="line"><span class="keyword">const</span> runSequence = <span class="built_in">require</span>(<span class="string">'run-sequence'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-1. 创建一个 css 的任务</span></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/css/**'</span>)   </span><br><span class="line">    .pipe(autoPrefixer(&#123;</span><br><span class="line">        browsers: [<span class="string">'last 2 versions'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(cssmin())       </span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-2. 创建一个 sass 任务</span></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/sass/**'</span>)</span><br><span class="line">    .pipe(sass())</span><br><span class="line">    .pipe(autoPrefixer())</span><br><span class="line">    .pipe(cssmin())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建一个 js 任务</span></span><br><span class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/js/**'</span>)</span><br><span class="line">    .pipe(babel(&#123;</span><br><span class="line">        presets: [<span class="string">'es2015'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/js'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 创建一个 html 任务</span></span><br><span class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/pages/**'</span>)</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">        removeEmptyAttibutes: <span class="literal">true</span>, <span class="comment">// 移出所有空属性</span></span><br><span class="line">        collapseWhitespace: <span class="literal">true</span> <span class="comment">// 压缩 html</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/pages'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 创建一个 lib 任务</span></span><br><span class="line">gulp.task(<span class="string">'lib'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/lib/**'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/lib'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 创建一个 static 任务</span></span><br><span class="line">gulp.task(<span class="string">'static'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/static/**'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/static'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. 创建一个 clean 任务</span></span><br><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./dist'</span>)</span><br><span class="line">    .pipe(clean())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 改写 default 任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 里面的每一个参数都可以是一个任务或者一个任务队列</span></span><br><span class="line">    <span class="comment">// 再执行任务的时候，会把前一个任务队列完成的情况下再执行下一个任务队列</span></span><br><span class="line">  runSequence(<span class="string">'clean'</span>, [<span class="string">'css'</span>, <span class="string">'sass'</span>, <span class="string">'js'</span>, <span class="string">'html'</span>, <span class="string">'lib'</span>, <span class="string">'static'</span>])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>这样依赖，每次都是先执行 <code>clean</code> 任务</li><li>执行完毕之后再并行执行那些压缩的任务就不会出现问题了</li></ul></li><li><p>然后我们就去命令行中运行 <code>gulp</code> 执行一下 <code>default</code> 任务就可以了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 运行 gulp</span><br><span class="line"><span class="meta">$</span> gulp</span><br></pre></td></tr></table></figure></li></ul><h3 id="自动打开浏览器"><a href="#自动打开浏览器" class="headerlink" title="自动打开浏览器"></a>自动打开浏览器</h3><ul><li><p>我们的打包工作已经完成了</p></li><li><p>接下来要是能再打包完毕自动帮我把浏览器打开就好了</p></li><li><p>省的我自己去开了</p></li><li><p>这个时候是可以做到的</p></li><li><p>需要一个依赖</p><ul><li><code>npm i -D gulp-webserver</code></li></ul></li><li><p>然后进行配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 gulpfile.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 引入 gulp</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-1. 引入 gulp-cssmin</span></span><br><span class="line"><span class="keyword">const</span> cssmin = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-2. 引入 gulp-autoprefixer </span></span><br><span class="line"><span class="keyword">const</span> autoPrefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-3. 引入 gulp-sass</span></span><br><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-1. 引入 gulp-uglify</span></span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-urlify'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-2. 引入 gulp-babel</span></span><br><span class="line"><span class="comment">//      es6 转 es5 虽然需要下载三个依赖，但是只需要引入一个 gulp-babel 就可以了</span></span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 引入 gulp-htmlmin</span></span><br><span class="line"><span class="keyword">const</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 引入 gulp-clean</span></span><br><span class="line"><span class="keyword">const</span> clean = <span class="built_in">require</span>(<span class="string">'gulp-clean'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 引入 run-sequence</span></span><br><span class="line"><span class="keyword">const</span> runSequence = <span class="built_in">require</span>(<span class="string">'run-sequence'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 引入 gulp-webserver</span></span><br><span class="line"><span class="keyword">const</span> webserver = <span class="built_in">require</span>(<span class="string">'gulp-webserver'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-1. 创建一个 css 的任务</span></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/css/**'</span>)   </span><br><span class="line">    .pipe(autoPrefixer(&#123;</span><br><span class="line">        browsers: [<span class="string">'last 2 versions'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(cssmin())       </span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-2. 创建一个 sass 任务</span></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/sass/**'</span>)</span><br><span class="line">    .pipe(sass())</span><br><span class="line">    .pipe(autoPrefixer())</span><br><span class="line">    .pipe(cssmin())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建一个 js 任务</span></span><br><span class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/js/**'</span>)</span><br><span class="line">    .pipe(babel(&#123;</span><br><span class="line">        presets: [<span class="string">'es2015'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/js'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 创建一个 html 任务</span></span><br><span class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/pages/**'</span>)</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">        removeEmptyAttibutes: <span class="literal">true</span>, <span class="comment">// 移出所有空属性</span></span><br><span class="line">        collapseWhitespace: <span class="literal">true</span> <span class="comment">// 压缩 html</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/pages'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 创建一个 lib 任务</span></span><br><span class="line">gulp.task(<span class="string">'lib'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/lib/**'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/lib'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 创建一个 static 任务</span></span><br><span class="line">gulp.task(<span class="string">'static'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/static/**'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/static'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. 创建一个 clean 任务</span></span><br><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./dist'</span>)</span><br><span class="line">    .pipe(clean())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 9. 创建一个 webserver 任务</span></span><br><span class="line">gulp.task(<span class="string">'webserver'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src(<span class="string">'./dist'</span>)</span><br><span class="line">        .pipe(webserver(&#123;</span><br><span class="line">            host: <span class="string">'localhost'</span>,          <span class="comment">// 配置打开浏览器的域名</span></span><br><span class="line">            port: <span class="number">3000</span>,                 <span class="comment">// 配置打开浏览器的端口号</span></span><br><span class="line">            livereload: <span class="literal">true</span>,           <span class="comment">// 自动刷新浏览器</span></span><br><span class="line">            open: <span class="string">'./pages/index.html'</span>  <span class="comment">// 默认打开 dist 文件夹下的哪个文件</span></span><br><span class="line">        &#125;))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 改写 default 任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 里面的每一个参数都可以是一个任务或者一个任务队列</span></span><br><span class="line">    <span class="comment">// 再执行任务的时候，会把前一个任务队列完成的情况下再执行下一个任务队列</span></span><br><span class="line">  runSequence(</span><br><span class="line">        <span class="string">'clean'</span>, </span><br><span class="line">        [<span class="string">'css'</span>, <span class="string">'sass'</span>, <span class="string">'js'</span>, <span class="string">'html'</span>, <span class="string">'lib'</span>, <span class="string">'static'</span>],</span><br><span class="line">    <span class="string">'webserver'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>因为我们打开浏览器应该再所有压缩任务都完成以后</li><li>再把浏览器打开</li><li>所以我们把他排在任务的第三个队列上</li></ul></li><li><p>这个 <code>webserver</code> 会自动帮我们启动一个服务器</p></li><li><p>是一个 <code>node</code> 的服务器</p></li><li><p>所以我们的页面也相当于是在服务器上打开的</p></li></ul><h3 id="修改内容自动刷新"><a href="#修改内容自动刷新" class="headerlink" title="修改内容自动刷新"></a>修改内容自动刷新</h3><ul><li><p>我们刚才再配置 <code>webserver</code> 的时候有一个自动刷新的功能被我们开启了</p></li><li><p>但是我们修改一些文件的时候发现并没有自动刷新</p></li><li><p>这个是因为，我们只是开启了自动刷新，但是你修改文件以后并没有自动帮我们重新编译</p></li><li><p>那么 <code>dist/</code> 文件夹下的内容就不会更改，那么刷新就没有意义</p></li><li><p>所以我们应该再制作一个任务，当文件夹下的内容修改的时候，自动帮我们从新编译</p></li><li><p>这个不需要任何依赖，我们只需要配置一个监控文件改变的任务就行了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 gulpfile.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 引入 gulp</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-1. 引入 gulp-cssmin</span></span><br><span class="line"><span class="keyword">const</span> cssmin = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-2. 引入 gulp-autoprefixer </span></span><br><span class="line"><span class="keyword">const</span> autoPrefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-3. 引入 gulp-sass</span></span><br><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-1. 引入 gulp-uglify</span></span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-urlify'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3-2. 引入 gulp-babel</span></span><br><span class="line"><span class="comment">//      es6 转 es5 虽然需要下载三个依赖，但是只需要引入一个 gulp-babel 就可以了</span></span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 引入 gulp-htmlmin</span></span><br><span class="line"><span class="keyword">const</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 引入 gulp-clean</span></span><br><span class="line"><span class="keyword">const</span> clean = <span class="built_in">require</span>(<span class="string">'gulp-clean'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 引入 run-sequence</span></span><br><span class="line"><span class="keyword">const</span> runSequence = <span class="built_in">require</span>(<span class="string">'run-sequence'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 引入 gulp-webserver</span></span><br><span class="line"><span class="keyword">const</span> webserver = <span class="built_in">require</span>(<span class="string">'gulp-webserver'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-1. 创建一个 css 的任务</span></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/css/**'</span>)   </span><br><span class="line">    .pipe(autoPrefixer(&#123;</span><br><span class="line">        browsers: [<span class="string">'last 2 versions'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(cssmin())       </span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2-2. 创建一个 sass 任务</span></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/sass/**'</span>)</span><br><span class="line">    .pipe(sass())</span><br><span class="line">    .pipe(autoPrefixer())</span><br><span class="line">    .pipe(cssmin())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建一个 js 任务</span></span><br><span class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/js/**'</span>)</span><br><span class="line">    .pipe(babel(&#123;</span><br><span class="line">        presets: [<span class="string">'es2015'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/js'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 创建一个 html 任务</span></span><br><span class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/pages/**'</span>)</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">        removeEmptyAttibutes: <span class="literal">true</span>, <span class="comment">// 移出所有空属性</span></span><br><span class="line">        collapseWhitespace: <span class="literal">true</span> <span class="comment">// 压缩 html</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/pages'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 创建一个 lib 任务</span></span><br><span class="line">gulp.task(<span class="string">'lib'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/lib/**'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/lib'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 创建一个 static 任务</span></span><br><span class="line">gulp.task(<span class="string">'static'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/static/**'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/static'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. 创建一个 clean 任务</span></span><br><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./dist'</span>)</span><br><span class="line">    .pipe(clean())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 9. 创建一个 webserver 任务</span></span><br><span class="line">gulp.task(<span class="string">'webserver'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src(<span class="string">'./dist'</span>)</span><br><span class="line">        .pipe(webserver(&#123;</span><br><span class="line">            host: <span class="string">'localhost'</span>,          <span class="comment">// 配置打开浏览器的域名</span></span><br><span class="line">            port: <span class="number">3000</span>,                 <span class="comment">// 配置打开浏览器的端口号</span></span><br><span class="line">            livereload: <span class="literal">true</span>,           <span class="comment">// 自动刷新浏览器</span></span><br><span class="line">            open: <span class="string">'./pages/index.html'</span>  <span class="comment">// 默认打开 dist 文件加下的哪个文件</span></span><br><span class="line">        &#125;))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10. 创建一个 watch 任务</span></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.watch(<span class="string">'./src/css/**'</span>, [<span class="string">'css'</span>])</span><br><span class="line">    gulp.watch(<span class="string">'./src/sass/**'</span>, [<span class="string">'sass'</span>])</span><br><span class="line">    gulp.watch(<span class="string">'./src/js/**'</span>, [<span class="string">'js'</span>])</span><br><span class="line">    gulp.watch(<span class="string">'./src/pages/**'</span>, [<span class="string">'html'</span>])</span><br><span class="line">    gulp.watch(<span class="string">'./src/lib/**'</span>, [<span class="string">'lib'</span>])</span><br><span class="line">    gulp.watch(<span class="string">'./src/static/**'</span>, [<span class="string">'static'</span>])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 改写 default 任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 里面的每一个参数都可以是一个任务或者一个任务队列</span></span><br><span class="line">    <span class="comment">// 再执行任务的时候，会把前一个任务队列完成的情况下再执行下一个任务队列</span></span><br><span class="line">  runSequence(</span><br><span class="line">        <span class="string">'clean'</span>, </span><br><span class="line">        [<span class="string">'css'</span>, <span class="string">'sass'</span>, <span class="string">'js'</span>, <span class="string">'html'</span>, <span class="string">'lib'</span>, <span class="string">'static'</span>],</span><br><span class="line">    [<span class="string">'webserver'</span>, <span class="string">'watch'</span>])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>因为再文件压缩完毕以后，我们就可以开始监控了</li><li>所以把这个 <code>watch</code> 任务和 <code>webserver</code> 任务并行就可以了</li></ul></li><li><p>接下来我们就可以再命令行运行 <code>gulp</code> 了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 运行 gulp</span><br><span class="line"><span class="meta">$</span> gulp</span><br></pre></td></tr></table></figure></li><li><p>这个时候，我们只要进行代码书写就可以了</p></li><li><p>随着我们写完，会自动帮我们打包编译，并且自动进行浏览器刷新的</p></li></ul><h2 id="使用-GULP-配置代理"><a href="#使用-GULP-配置代理" class="headerlink" title="使用 GULP 配置代理"></a>使用 GULP 配置代理</h2><ul><li><p>我们的 <code>gulp</code> 自动打包构建已经完成了</p></li><li><p>我们的正常开发已经可以进行下去了</p></li><li><p>我们就剩最后一个功能没有实现了</p></li><li><p>那就是跨域请求的问题</p></li><li><p>因为我们的项目中肯定有一些数据是向后台请求过来的</p></li><li><p>那么我们就要发送请求</p></li><li><p>我们又不能保重 <strong>服务端接口</strong> 和我们是同源的</p></li><li><p>所以我们就要配置一个代理</p></li><li><p><code>gulp</code> 给我们启动的这个服务器是 <code>node</code> 的服务器</p></li><li><p>所以也可以直接配置代理</p></li><li><p>不需要任何依赖，只要再 <code>webserver</code> 任务中多加一个配置就可以了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'webserver'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src(<span class="string">'./dist'</span>)</span><br><span class="line">        .pipe(webserver(&#123;</span><br><span class="line">            host: <span class="string">'localhost'</span>,</span><br><span class="line">            port: <span class="number">3000</span>,</span><br><span class="line">            livereload: <span class="literal">true</span>,</span><br><span class="line">            open: <span class="string">'./pages/index.html'</span>,</span><br><span class="line">            proxies: [ <span class="comment">// 配置所有代理</span></span><br><span class="line">                &#123; <span class="comment">// 其中一个代理配置</span></span><br><span class="line">                    source: <span class="string">'/login'</span>, <span class="comment">// 使用的关键字 </span></span><br><span class="line">                    target: <span class="string">'http://localhost:80/login.php'</span> <span class="comment">// 代理的路径</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>这个时候你就可以正常发送请求了</li><li>当你要请求代理地址的时候，只要再这里配置一下，使用代理关键字进行请求就可以了</li></ul></li></ul><h1 id="GULP完整配置文件（简单版）"><a href="#GULP完整配置文件（简单版）" class="headerlink" title="GULP完整配置文件（简单版）"></a>GULP完整配置文件（简单版）</h1><ul><li><p>所有需要用到的依赖</p><ol><li><a href="mailto:`gulp@3.9.1" target="_blank" rel="noopener">`gulp@3.9.1</a>`</li><li><code>gulp-cssmin</code></li><li><code>gulp-autoprefixer</code></li><li><code>gulp-sass</code></li><li><code>gulp-uglify</code></li><li><a href="mailto:`gulp-babel@7.0.1" target="_blank" rel="noopener">`gulp-babel@7.0.1</a>`</li><li><code>babel-core</code></li><li><code>babel-preset-es2015</code></li><li><code>gulp-htmlmin</code></li><li><code>gulp-clean</code></li><li><code>run-sequence</code></li><li><code>gulp-webserver</code></li></ol></li><li><p><code>gulpfile.js</code> 文件内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 gulpfile.js 文件</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"><span class="keyword">const</span> cssmin = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>)</span><br><span class="line"><span class="keyword">const</span> autoPrefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>)</span><br><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>)</span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-urlify'</span>)</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>)</span><br><span class="line"><span class="keyword">const</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>)</span><br><span class="line"><span class="keyword">const</span> clean = <span class="built_in">require</span>(<span class="string">'gulp-clean'</span>)</span><br><span class="line"><span class="keyword">const</span> runSequence = <span class="built_in">require</span>(<span class="string">'run-sequence'</span>)</span><br><span class="line"><span class="keyword">const</span> webserver = <span class="built_in">require</span>(<span class="string">'gulp-webserver'</span>)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/css/**'</span>)   </span><br><span class="line">    .pipe(autoPrefixer(&#123;</span><br><span class="line">        browsers: [<span class="string">'last 2 versions'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(cssmin())       </span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/sass/**'</span>)</span><br><span class="line">    .pipe(sass())</span><br><span class="line">    .pipe(autoPrefixer())</span><br><span class="line">    .pipe(cssmin())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/js/**'</span>)</span><br><span class="line">    .pipe(babel(&#123;</span><br><span class="line">        presets: [<span class="string">'es2015'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/js'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/pages/**'</span>)</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">        removeEmptyAttibutes: <span class="literal">true</span>,</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/pages'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'lib'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/lib/**'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/lib'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'static'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./src/static/**'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/static'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">    .src(<span class="string">'./dist'</span>)</span><br><span class="line">    .pipe(clean())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'webserver'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src(<span class="string">'./dist'</span>)</span><br><span class="line">        .pipe(webserver(&#123;</span><br><span class="line">            host: <span class="string">'localhost'</span>,          </span><br><span class="line">            port: <span class="number">3000</span>,                 </span><br><span class="line">            livereload: <span class="literal">true</span>,           </span><br><span class="line">            open: <span class="string">'./pages/index.html'</span>,</span><br><span class="line">        proxies: [</span><br><span class="line">                &#123;</span><br><span class="line">                    source: <span class="string">'/login'</span>,</span><br><span class="line">                    target: <span class="string">'http://localhost:80/login.php'</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.watch(<span class="string">'./src/css/**'</span>, [<span class="string">'css'</span>])</span><br><span class="line">    gulp.watch(<span class="string">'./src/sass/**'</span>, [<span class="string">'sass'</span>])</span><br><span class="line">    gulp.watch(<span class="string">'./src/js/**'</span>, [<span class="string">'js'</span>])</span><br><span class="line">    gulp.watch(<span class="string">'./src/pages/**'</span>, [<span class="string">'html'</span>])</span><br><span class="line">    gulp.watch(<span class="string">'./src/lib/**'</span>, [<span class="string">'lib'</span>])</span><br><span class="line">    gulp.watch(<span class="string">'./src/static/**'</span>, [<span class="string">'static'</span>])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  runSequence(</span><br><span class="line">        <span class="string">'clean'</span>, </span><br><span class="line">        [<span class="string">'css'</span>, <span class="string">'sass'</span>, <span class="string">'js'</span>, <span class="string">'html'</span>, <span class="string">'lib'</span>, <span class="string">'static'</span>],</span><br><span class="line">    [<span class="string">'webserver'</span>, <span class="string">'watch'</span>])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;GULP&quot;&gt;&lt;a href=&quot;#GULP&quot; class=&quot;headerlink&quot; title=&quot;GULP&quot;&gt;&lt;/a&gt;GULP&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gulp&lt;/code&gt; 是一个项目开发的 &lt;strong&gt;自动化打包构建工具&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;基于 &lt;code&gt;node&lt;/code&gt; 环境来运行的&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;什么是自动化打包构建工具&quot;&gt;&lt;a href=&quot;#什么是自动化打包构建工具&quot; class=&quot;headerlink&quot; title=&quot;什么是自动化打包构建工具&quot;&gt;&lt;/a&gt;什么是自动化打包构建工具&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;比如&lt;ul&gt;
&lt;li&gt;我们在开发的过程中，会写到 &lt;code&gt;js&lt;/code&gt; 文件，&lt;code&gt;css&lt;/code&gt; 文件，等等&lt;/li&gt;
&lt;li&gt;我们的项目如果想上线，那么一定要体积小一点，文件大小越小越好&lt;/li&gt;
&lt;li&gt;而我们在写 &lt;code&gt;js&lt;/code&gt; 文件的时候，会有很多 &lt;strong&gt;换行/空格&lt;/strong&gt; 之类的东西&lt;/li&gt;
&lt;li&gt;这些 &lt;strong&gt;换行/空格&lt;/strong&gt; 都是占文件体积的一部分&lt;/li&gt;
&lt;li&gt;那么我们在上线之前就要吧这些 &lt;strong&gt;换行/空格&lt;/strong&gt; 尽可能的删除掉&lt;/li&gt;
&lt;li&gt;我们又不能一个文件一个文件的去删除&lt;/li&gt;
&lt;li&gt;就要用到一个自动化工具来帮助我们把这些多余的东西干掉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这个就是自动化工具的意义&lt;/li&gt;
&lt;li&gt;常见的自动化打包构建工具&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gulp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webpack&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="千锋" scheme="http://yoursite.com/categories/千锋/"/>
    
    
  </entry>
  
  <entry>
    <title>DAY7-2_SASS</title>
    <link href="http://yoursite.com/2021/11/03/DAY7-2-SASS/"/>
    <id>http://yoursite.com/2021/11/03/DAY7-2-SASS/</id>
    <published>2021-11-03T02:57:14.000Z</published>
    <updated>2021-11-03T02:57:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SASS"><a href="#SASS" class="headerlink" title="SASS"></a>SASS</h1><ul><li><p><a href="https://www.sass.hk/" target="_blank" rel="noopener">SASS官网</a></p></li><li><h3 id="世界上最成熟、最稳定、最强大的专业级CSS扩展语言！"><a href="#世界上最成熟、最稳定、最强大的专业级CSS扩展语言！" class="headerlink" title="世界上最成熟、最稳定、最强大的专业级CSS扩展语言！"></a>世界上最成熟、最稳定、最强大的专业级CSS扩展语言！</h3></li><li><p><code>sass</code> 是一个 css 的预编译工具</p></li><li><p>也就是能够 <strong>更优雅</strong> 的书写 css</p></li><li><p><code>sass</code> 写出来的东西 <strong>浏览器不认识</strong></p></li><li><p>依旧是要转换成 css 在浏览器中运行</p></li><li><p>这个时候就需要一个工具来帮我们做</p></li></ul><h2 id="安装-sass-环境"><a href="#安装-sass-环境" class="headerlink" title="安装 sass 环境"></a>安装 sass 环境</h2><ul><li><p>以前的 <code>sass</code> 需要依赖一个 <code>ruby</code> 的环境</p></li><li><p>现在的 <code>sass</code> 需要依赖一个 <code>python</code> 的环境</p></li><li><p>但是我们的 node 强大了以后，我们只需要依赖 <code>node</code> 环境也可以</p></li><li><p>需要我们使用 npm 安装一个全局的 <code>sass</code> 环境就可以了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装全局 sass 环境</span><br><span class="line"><span class="meta">$</span> npm install sass -g</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h2 id="编译-sass"><a href="#编译-sass" class="headerlink" title="编译 sass"></a>编译 sass</h2><ul><li><p>有了全局的 <code>sass</code> 环境以后</p></li><li><p>我们就可以对 <code>sass</code> 的文件进行编译了</p></li><li><p><code>sass</code> 的文件后缀有两种，一种是 <code>.sass</code> 一种是 <code>.scss</code></p></li><li><p>他们两个的区别就是有没有 <code>{}</code> 和 <code>;</code></p></li><li><p><code>.scss</code> 文件</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>.sass</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h1 </span><br><span class="line">width: 100px</span><br><span class="line">height: 200px</span><br></pre></td></tr></table></figure></li><li><p>我们比较常用的还是 <code>.scss</code> 文件</p></li><li><p>因为 <code>.sass</code> 我们写不习惯，当然，如果你能写习惯也比较好用</p></li><li><p>我们先不管里面的的什么内容，至少这个 <code>.scss</code> 或者 <code>.sass</code> 文件浏览器就不认识</p></li><li><p>我们就要用指令把 这两种 文件变成 css 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 把 index.scss 编译，输出成 index.css</span><br><span class="line"><span class="meta">$</span> sass index.scss index.css</span><br></pre></td></tr></table></figure></li><li><p>这样我们就能得到一个 css 文件，在页面里面也是引入一个 css 文件就可以了</p></li></ul><h3 id="实时编译"><a href="#实时编译" class="headerlink" title="实时编译"></a>实时编译</h3><ul><li><p>我们刚才的编译方式只能编译一次</p></li><li><p>当你修改了文件以后要从新执行一遍指令才可以</p></li><li><p>实时编译就是随着你文件的修改，自动从新编译成 css 文件</p></li><li><p>也是使用指令来完成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 实时监控 index.scss 文件，只要发生修改就自动编译，并放在 index.css 文件里面</span><br><span class="line"><span class="meta">$</span> sass --watch index.scss:index.css</span><br></pre></td></tr></table></figure></li><li><p>然后你只要修改 <code>index.scss</code> 文件的内容，<code>index.css</code> 文件中的内容会自动更新</p></li></ul><h3 id="实时监控目录"><a href="#实时监控目录" class="headerlink" title="实时监控目录"></a>实时监控目录</h3><ul><li><p>之前的实时监控只能监控一个文件</p></li><li><p>但是我们有可能要写很多的文件</p></li><li><p>所以我们要准备一个文件夹，里面放的全部都是 sass 文件</p></li><li><p>实时的把里面的每一个文件都编译到 css 文件夹里面</p></li><li><p>依旧是使用指令的形式来完成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 实时监控 sass 这个目录，只要有变化，就会实时响应在 css 文件夹下</span><br><span class="line"><span class="meta">$</span> sass --watch sass:css</span><br></pre></td></tr></table></figure></li><li><p>这样，只要你修改 sass 文件夹下的内容，就会实时的相应在 css 文件夹中</p></li><li><p>你新添加一个文件也会实时响应</p></li><li><p>但是你删除一个文件，css 文件夹中不会自动删除，需要我们自己手动删除</p></li></ul><h2 id="sass-语法"><a href="#sass-语法" class="headerlink" title="sass 语法"></a>sass 语法</h2><ul><li>我们能编译 <code>sass</code> 文件了，接下来我们就该学习一下 <code>sass</code> 的语法了</li><li>为什么他这么强大，这么好用，都是靠强大的语法</li><li><code>.sass</code> 和 <code>.scss</code> 文件的语法是一样的，只不过区别就是 <code>{}</code> 和 <code>;</code></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><p>定义一个变量，在后面的代码中使用</p></li><li><p>使用 <code>$</code> 来定义变量</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个 $c 作为变量，值是 红色</span></span><br><span class="line"><span class="variable">$c</span>: red;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="comment">// 在使用 $c 这个变量</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$c</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>上面定义的变量全局都可以使用</p></li><li><p>我们也可以在规则块内定义私有变量</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="comment">// 这个 $w 变量只能在 h1 这个规则块中使用</span></span><br><span class="line">    <span class="variable">$w</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$w</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><ul><li><p><code>sass</code> 里面我们最长用到的就是嵌套了</p></li><li><p>而且相当的好用</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个就是嵌套，理论上可以无限嵌套下去</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">90px</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="selector-tag">p</span> &#123;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">70px</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="selector-tag">span</span>: &#123;</span><br><span class="line">                    color: red;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="嵌套中的-amp"><a href="#嵌套中的-amp" class="headerlink" title="嵌套中的 &amp;"></a>嵌套中的 &amp;</h4><ul><li><p>在嵌套中还有一个标识符是 <code>&amp;</code> 我们可以使用</p></li><li><p>先来看一个例子</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我想的是 div 被鼠标悬停的时候 width 变成 200</span></span><br><span class="line"><span class="comment">// 但是编译结果却是</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>和预想的结果不一样了</p></li><li><p>这个时候就要用到 <code>&amp;</code> 来连接了</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个时候就和我需要的一样了</p></li></ul><h4 id="群组嵌套"><a href="#群组嵌套" class="headerlink" title="群组嵌套"></a>群组嵌套</h4><ul><li><p>群组嵌套就是多个标签同时嵌套</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.box1</span>, <span class="selector-class">.box2</span>, <span class="selector-class">.box3</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.box1</span>, <span class="selector-tag">div</span> <span class="selector-class">.box2</span>, <span class="selector-tag">div</span> <span class="selector-class">.box3</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>还有一种就是多个标签同时嵌套一个标签</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span> <span class="selector-class">.box</span>, <span class="selector-tag">h2</span> <span class="selector-class">.box</span>, <span class="selector-tag">h3</span> <span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="嵌套属性"><a href="#嵌套属性" class="headerlink" title="嵌套属性"></a>嵌套属性</h4><ul><li><p>在 <code>scss</code> 里面还有一种特殊的嵌套</p></li><li><p>叫做 <strong>属性嵌套</strong></p></li><li><p>和选择器嵌套不一样，是写属性的时候使用的</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: &#123;</span><br><span class="line">        style: solid;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">color</span>: pink;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个属性嵌套还可以有一些特殊使用</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span> &#123;</span><br><span class="line">        bottom: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译结果</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h3><ul><li><p>也叫 <strong>混合器</strong></p></li><li><p>其实就是定义一个 “函数” 在 <code>scss</code> 文件中使用</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个混合器使用  @mixin 关键字</span></span><br><span class="line"><span class="keyword">@mixin</span> radius &#123;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -ms-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -o-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>上面是定义好的一个混合器</p></li><li><p>他是不会被编译的，只有当你使用了他以后，才会被编译</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用混合器使用 @include 关键字</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">@include</span> radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个就是吧刚才定义的混合器拿过来使用</p></li><li><p>编译结果</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -ms-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -o-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="混合器传参"><a href="#混合器传参" class="headerlink" title="混合器传参"></a>混合器传参</h4><ul><li><p>我们既然说了，混合器就像一个 “函数” 一样，那么就一定可以像 “函数” 一样传递参数</p></li><li><p>和 “函数” 的使用方式一样，在定时的时候是 “形参”，在调用的时候是 “实参”</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义混合器</span></span><br><span class="line"><span class="keyword">@mixin</span> my_transition(<span class="variable">$pro</span>, <span class="variable">$dur</span>, <span class="variable">$delay</span>, <span class="variable">$tim</span>) &#123;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: <span class="variable">$pro</span> <span class="variable">$dur</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">    -moz-<span class="attribute">transition</span>: <span class="variable">$pro</span> <span class="variable">$dur</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">    -ms-<span class="attribute">transition</span>: <span class="variable">$pro</span> <span class="variable">$dur</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">    -o-<span class="attribute">transition</span>: <span class="variable">$pro</span> <span class="variable">$dur</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="variable">$pro</span> <span class="variable">$dur</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用这个混合器的时候传递 “实参”</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">@include</span> my_transition(all, <span class="number">1s</span>, <span class="number">0s</span>, linear);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译结果</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: all <span class="number">1s</span> <span class="number">0s</span> linear;</span><br><span class="line">    -moz-<span class="attribute">transition</span>: all <span class="number">1s</span> <span class="number">0s</span> linear;</span><br><span class="line">    -ms-<span class="attribute">transition</span>: all <span class="number">1s</span> <span class="number">0s</span> linear;</span><br><span class="line">    -o-<span class="attribute">transition</span>: all <span class="number">1s</span> <span class="number">0s</span> linear;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span> <span class="number">0s</span> linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写了多少个 “形参”，那么调用的时候就要传递多少个 “实参”</p></li><li><p>不然会报错的</p></li></ul><h4 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h4><ul><li><p>我们在定义混合器的时候，也可以给一些参数写一些默认值</p></li><li><p>这样一来，就可以不传递 “实参” 了</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置一些带有默认值的参数</span></span><br><span class="line"><span class="keyword">@mixin</span> my_transition(<span class="variable">$dur</span>: <span class="number">1s</span>, <span class="variable">$pro</span>: all, <span class="variable">$delay</span>: <span class="number">0s</span>, <span class="variable">$tim</span>: linear) &#123;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: <span class="variable">$dur</span> <span class="variable">$pro</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">    -moz-<span class="attribute">transition</span>: <span class="variable">$dur</span> <span class="variable">$pro</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">    -ms-<span class="attribute">transition</span>: <span class="variable">$dur</span> <span class="variable">$pro</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">    -o-<span class="attribute">transition</span>: <span class="variable">$dur</span> <span class="variable">$pro</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="variable">$dur</span> <span class="variable">$pro</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用的时候，如果你不传递，那么就是使用默认值</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用的时候，只传递一个，剩下的使用默认值</span></span><br><span class="line">  <span class="keyword">@include</span> my_transition(<span class="number">2s</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译结果</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: <span class="number">2s</span> all <span class="number">0s</span> linear;</span><br><span class="line">    -moz-<span class="attribute">transition</span>: <span class="number">2s</span> all <span class="number">0s</span> linear;</span><br><span class="line">    -ms-<span class="attribute">transition</span>: <span class="number">2s</span> all <span class="number">0s</span> linear;</span><br><span class="line">    -o-<span class="attribute">transition</span>: <span class="number">2s</span> all <span class="number">0s</span> linear;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">2s</span> all <span class="number">0s</span> linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li><p>在 <code>sass</code> 里面使用继承可以大大的提高开发效率</p></li><li><p>其实继承很简单，就是把之前写过的选择器里面的内容直接拿过来一份</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个是之前写过的一个规则样式表</p></li><li><p>接下来我要写另外一个样式了，发现我要写的一些内容和之前这个 div 一样，并且还有一些我自己的内容</p></li><li><p>那么我就可以把这个样式表先继承下来，再写我自己的内容就好了</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">      <span class="keyword">@extend</span> div;</span><br><span class="line"></span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">      <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译结果</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>, <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li><p>在 <code>scss</code> 文件中的注释分为几种</p><ol><li><p>编译的时候不会被编译的注释</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是一个普通注释，在编译的时候，我就被过滤了</span></span><br></pre></td></tr></table></figure></li><li><p>编译的时候会被编译的注释</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 我在编译的时候，会被一起编译过去 */</span></span><br></pre></td></tr></table></figure></li><li><p>强力注释</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*! 我是一个强力注释，不光编译的时候会被编译过去，将来压缩文件的时候也会存在 */</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="导入文件"><a href="#导入文件" class="headerlink" title="导入文件"></a>导入文件</h3><ul><li><p>我们刚才学过了定义变量，定义混合器</p></li><li><p>而这两个内容在定义过以后，如果没有使用，是不会被编译出内容的</p></li><li><p>所以我们可以把变量单独写一个文件，混合器单独写一个文件，然后直接导入后使用</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 variable.scss</span></span><br><span class="line"><span class="variable">$w</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="variable">$h</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="variable">$c</span>: pink;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我是 mixin.scss</span></span><br><span class="line"><span class="keyword">@mixin</span> my_transition(<span class="variable">$dur</span>: <span class="number">1s</span>, <span class="variable">$pro</span>: all, <span class="variable">$delay</span>: <span class="number">0s</span>, <span class="variable">$tim</span>: linear) &#123;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: <span class="variable">$dur</span> <span class="variable">$pro</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">    -moz-<span class="attribute">transition</span>: <span class="variable">$dur</span> <span class="variable">$pro</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">    -ms-<span class="attribute">transition</span>: <span class="variable">$dur</span> <span class="variable">$pro</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">    -o-<span class="attribute">transition</span>: <span class="variable">$dur</span> <span class="variable">$pro</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="variable">$dur</span> <span class="variable">$pro</span> <span class="variable">$delay</span> <span class="variable">$tim</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@mixin</span> radius &#123;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -ms-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -o-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后在我们的主要文件中把这个两个文件导入进来就行了</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 index.scss</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">'./variable.scss'</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">'./mixin.scss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$w</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">$h</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">@include</span> radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> my_transition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译结果</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -ms-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -o-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: <span class="number">1s</span> all <span class="number">0s</span> linear;</span><br><span class="line">    -moz-<span class="attribute">transition</span>: <span class="number">1s</span> all <span class="number">0s</span> linear;</span><br><span class="line">    -ms-<span class="attribute">transition</span>: <span class="number">1s</span> all <span class="number">0s</span> linear;</span><br><span class="line">    -o-<span class="attribute">transition</span>: <span class="number">1s</span> all <span class="number">0s</span> linear;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span> all <span class="number">0s</span> linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SASS&quot;&gt;&lt;a href=&quot;#SASS&quot; class=&quot;headerlink&quot; title=&quot;SASS&quot;&gt;&lt;/a&gt;SASS&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.sass.hk/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SASS官网&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;世界上最成熟、最稳定、最强大的专业级CSS扩展语言！&quot;&gt;&lt;a href=&quot;#世界上最成熟、最稳定、最强大的专业级CSS扩展语言！&quot; class=&quot;headerlink&quot; title=&quot;世界上最成熟、最稳定、最强大的专业级CSS扩展语言！&quot;&gt;&lt;/a&gt;世界上最成熟、最稳定、最强大的专业级CSS扩展语言！&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sass&lt;/code&gt; 是一个 css 的预编译工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;也就是能够 &lt;strong&gt;更优雅&lt;/strong&gt; 的书写 css&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sass&lt;/code&gt; 写出来的东西 &lt;strong&gt;浏览器不认识&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;依旧是要转换成 css 在浏览器中运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这个时候就需要一个工具来帮我们做&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;安装-sass-环境&quot;&gt;&lt;a href=&quot;#安装-sass-环境&quot; class=&quot;headerlink&quot; title=&quot;安装 sass 环境&quot;&gt;&lt;/a&gt;安装 sass 环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;以前的 &lt;code&gt;sass&lt;/code&gt; 需要依赖一个 &lt;code&gt;ruby&lt;/code&gt; 的环境&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;现在的 &lt;code&gt;sass&lt;/code&gt; 需要依赖一个 &lt;code&gt;python&lt;/code&gt; 的环境&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;但是我们的 node 强大了以后，我们只需要依赖 &lt;code&gt;node&lt;/code&gt; 环境也可以&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需要我们使用 npm 安装一个全局的 &lt;code&gt;sass&lt;/code&gt; 环境就可以了&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; 安装全局 sass 环境&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; npm install sass -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="千锋" scheme="http://yoursite.com/categories/千锋/"/>
    
    
  </entry>
  
  <entry>
    <title>DAY7-1_NODE</title>
    <link href="http://yoursite.com/2021/11/03/DAY7-1-NODE/"/>
    <id>http://yoursite.com/2021/11/03/DAY7-1-NODE/</id>
    <published>2021-11-03T02:56:09.000Z</published>
    <updated>2021-11-03T02:56:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NODE"><a href="#NODE" class="headerlink" title="NODE"></a>NODE</h1><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node官网</a></li><li><a href="http://nodejs.cn/" target="_blank" rel="noopener">node中文网</a></li><li><p>什么是 node</p><ul><li>Node.js® is a JavaScript runtime built on <a href="https://v8.dev/" target="_blank" rel="noopener">Chrome’s V8 JavaScript engine</a>.</li><li>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 </li></ul></li><li><p>这个是 node 官网的解释</p><ul><li>其实 node 就是用 javascript 语言写 <strong>后端</strong></li><li>也就是说，我们的 javascript 有了 node 以后，不光是一个前端语言，也是一个后端语言</li></ul></li><li>前端 javascript<ul><li>三大核心<ul><li>ECMAScript</li><li>DOM</li><li>BOM</li></ul></li><li>操作内容<ul><li>浏览器</li><li>解决兼容问题</li></ul></li></ul></li><li>后端 javascript （node）<ul><li>核心<ul><li>ECMAScript</li></ul></li><li>操作内容<ul><li>后端代码</li><li>数据库</li></ul></li></ul></li><li>也就是说，node 我们不需要解决兼容问题，不需要 DOM 和 BOM，只关注业务逻辑就可以了</li></ul><a id="more"></a><h2 id="下载-node-安装包"><a href="#下载-node-安装包" class="headerlink" title="下载 node 安装包"></a>下载 node 安装包</h2><ul><li><p>我们的电脑是没有自带 node 环境的</p></li><li><p>需要我们手动下载一个 node 安装包，安装 node 环境</p></li><li><p>有了 node 环境以后，我们就可以运行 node 了</p></li><li><p>下载方式</p><ul><li><p>直接到 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">node官网</a> 或者 <a href="http://nodejs.cn/" target="_blank" rel="noopener">node中文网</a></p></li><li><p>点击下载就可以</p><p><img src="J:/课程资料/week7/assets/node下载.png" alt></p></li></ul><p><img src="J:/课程资料/week7/assets/node中文网下载.png" alt></p></li><li><p>注意： <strong>在 node 中文网下载的时候，选择安装包，不要选择 二进制文件</strong></p><ul><li>因为 二进制文件 是一个简单版，我们需要自己配置 <strong>环境变量</strong> 才可以使用</li></ul></li></ul><h2 id="安装-node-环境"><a href="#安装-node-环境" class="headerlink" title="安装 node 环境"></a>安装 node 环境</h2><ul><li><p>下载好以后，我们直接把下载好的文件双击运行就行</p></li><li><p>找到 <code>node-v10.16.2-x64.msi</code>  对应的文件</p><p><img src="J:/课程资料/week7/assets/node安装01.png" alt></p><p><img src="J:/课程资料/week7/assets/node安装02.png" alt></p><p><img src="J:/课程资料/week7/assets/node安装03.png" alt></p><p><img src="J:/课程资料/week7/assets/node安装04.png" alt></p><p><img src="J:/课程资料/week7/assets/node安装05.png" alt></p><p><img src="J:/课程资料/week7/assets/node安装06.png" alt></p></li><li><p>这个时候 node 就安装完毕了</p></li></ul><h2 id="检测安装环境"><a href="#检测安装环境" class="headerlink" title="检测安装环境"></a>检测安装环境</h2><ul><li><p>检测安装是否成功</p></li><li><p>我们打开运行窗口 （win + r）</p><ul><li><p>就是我们键盘下面那个 windows 的窗口键 + r 键</p><p><img src="J:/课程资料/week7/assets/运行窗口.png" alt></p></li></ul></li><li><p>写入 cmd 然后按下回车，来到我们的命令行</p><p><img src="J:/课程资料/week7/assets/命令行.png" alt></p></li><li><p>然后再命令行写入一个指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> node -v</span><br></pre></td></tr></table></figure></li><li><p>然后按下回车，会得到一个 node 的版本号</p></li><li><p>能看到版本号表示 node 环境安装成功</p><p><img src="J:/课程资料/week7/assets/node版本检测.png" alt></p></li><li><p>至此，我们的 node 环境就有了</p></li><li><p>我们就可以再电脑里面运行我们的 node 了</p></li></ul><h2 id="node-初体验"><a href="#node-初体验" class="headerlink" title="node 初体验"></a>node 初体验</h2><ul><li>到现在，我们的 node 环境已经安装完毕了</li><li>接下来我们就体验一下 node</li><li>我们的 node 到底是一个什么东西<ul><li>就是直接在 终端（命令行） 中运行 <code>js</code> 代码</li><li>也可以用 <code>.js</code> 文件写一堆 <code>js</code> 代码</li><li>然后不需要浏览器，直接让我们写的 <code>js</code> 代码运行在我们自己电脑的终端上</li></ul></li></ul><h3 id="直接在终端中书写-js-代码"><a href="#直接在终端中书写-js-代码" class="headerlink" title="直接在终端中书写 js 代码"></a>直接在终端中书写 js 代码</h3><ul><li><p>打开命令行</p></li><li><p>书写指令 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> node</span><br></pre></td></tr></table></figure></li><li><p>直接按下回车，会看到 光标在闪烁，我们就进入了 node 代码编写环境</p></li><li><p>直接书写代码就可以了</p><p><img src="J:/课程资料/week7/assets/命令行直接编写js代码.png" alt></p></li></ul><h3 id="在命令行运行一个-js-文件"><a href="#在命令行运行一个-js-文件" class="headerlink" title="在命令行运行一个 js 文件"></a>在命令行运行一个 js 文件</h3><ul><li><p>先新建一个文件夹</p></li><li><p>在里面写一个 js 文件</p><ul><li>我这里默认在 <code>桌面/demo文件夹/idnex.js</code></li></ul></li><li><p>在文件里面写一些 js 代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello node'</span>)</span><br></pre></td></tr></table></figure></li><li><p>打开命令行，<strong>要让命令行的路径和你存放这个要执行的 js 文件的目录一致</strong></p><p><img src="J:/课程资料/week7/assets/命令行运行js文件.png" alt></p></li><li><p>切换好以后，我们直接使用指令来运行我们准备好的 js 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> node index.js</span><br></pre></td></tr></table></figure></li><li><p>然后就会在命令行把我们刚才写的 js 文件运行了</p></li><li><p>就会在控制台输出 <code>hello node</code></p><p><img src="J:/课程资料/week7/assets/命令行运行js文件02.png" alt></p></li><li><p>现在我们就已经运行了一段 js 代码在命令行了</p></li><li><p>这也就解释了一下最开始官网说的那句话</p><ul><li>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 <ul><li>我们的 node 安装完毕以后，就在命令行提供了一个基于 Chrome V8 引擎的运行环境</li><li>在这个环境中运行 javascript 代码</li><li>这个就是 node.js</li></ul></li></ul></li></ul><h1 id="常用的-LINUX-操作"><a href="#常用的-LINUX-操作" class="headerlink" title="常用的 LINUX 操作"></a>常用的 LINUX 操作</h1><ul><li>什么是 LINUX 操作</li><li>其实就是在命令行使用指令来操作我们的电脑</li><li>因为我们的 node 就是在命令行运行 js</li><li>所以我们要了解一些常用的命令行指令</li></ul><h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><ul><li><p>目录操作就是操作我们的命令行路径</p><ol><li><p>查看当前目录下所有文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> dir</span><br></pre></td></tr></table></figure></li><li><p>以树状结构展示当前目录下的所有文件及子目录下的所有文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> tree</span><br></pre></td></tr></table></figure></li><li><p>进入当前目录下的某一个目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd 文件夹名称</span><br></pre></td></tr></table></figure></li><li><p>返回上一级目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd ..</span><br></pre></td></tr></table></figure></li><li><p>切换盘符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> 盘符:</span><br><span class="line"><span class="meta">$</span> d:</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><ul><li><p>文件操作就是通过指令创建文件或者文件夹</p><ol><li><p>创建文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示在当前目录下创建一个叫做 test 的文件夹</span><br><span class="line"><span class="meta">$</span> md test</span><br></pre></td></tr></table></figure></li><li><p>移除文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示移除当前文件夹下的 test 文件夹</span><br><span class="line"><span class="meta">$</span> rd test</span><br></pre></td></tr></table></figure></li><li><p>复制文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示复制一份 test 文件夹起名为 test2</span><br><span class="line"><span class="meta">$</span> xcopy test test2</span><br></pre></td></tr></table></figure></li><li><p>创建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示在当前目录下创建一个叫做 index.js 的文件</span><br><span class="line"><span class="meta">$</span> type nul&gt; index.js</span><br></pre></td></tr></table></figure></li><li><p>拷贝一份文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示复制一份 index.js 文件起名为 ceshi.js</span><br><span class="line"><span class="meta">$</span> copy index.js ceshi.js</span><br></pre></td></tr></table></figure></li><li><p>向文本中写入内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示向 index.js 中写入一段文本 console.log('hello world')</span><br><span class="line"><span class="meta">$</span> echo console.log("hello world") &gt; index.js</span><br></pre></td></tr></table></figure></li><li><p>查看文件内的文本内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示查看 index.js 文件中的文本内容是什么</span><br><span class="line"><span class="meta">$</span> type index.js</span><br></pre></td></tr></table></figure></li><li><p>给文件或者目录重命名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示把 index.js 更名为 abc.js</span><br><span class="line"><span class="meta">$</span> ren index.js abc.js</span><br></pre></td></tr></table></figure></li><li><p>删除文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示把当前目录下的 index.js 删除</span><br><span class="line"><span class="meta">$</span> del index.js</span><br></pre></td></tr></table></figure></li><li><p>移动文件或文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示把当前目录下的 index.js 文件移动到当前目录下的 a 文件夹下</span><br><span class="line"><span class="meta">$</span> move index.js a</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h2><ul><li><p>做一些其他事情的时候使用的</p><ol><li><p>清屏</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示把当前屏幕的所有内容都清除</span><br><span class="line"><span class="meta">$</span> cls</span><br></pre></td></tr></table></figure></li><li><p>查看当前电脑 IP 信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示查看当前电脑的 IP 信息</span><br><span class="line"><span class="meta">$</span> ipconfig</span><br></pre></td></tr></table></figure></li><li><p>测试某一个链接地址的网速</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示查看访问 百度 网站的速度</span><br><span class="line"><span class="meta">$</span> ping www.baidu.com</span><br></pre></td></tr></table></figure></li><li><p>查看电脑信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示查看当前电脑的信息</span><br><span class="line"><span class="meta">$</span> systeminfo</span><br></pre></td></tr></table></figure></li></ol></li></ul><h1 id="NODE-的导入导出"><a href="#NODE-的导入导出" class="headerlink" title="NODE 的导入导出"></a>NODE 的导入导出</h1><ul><li><code>node</code> 的开发是模块化开发</li><li>每一个 js 文件都是一个独立的模块</li><li>都有自己独立的作用域</li><li>我们可以通过 导入导出 的方式把多个 js 文件合并在一起</li></ul><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><ul><li><p>在 node 里面，我们使用 <code>require</code> 来导入一个文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 index.js 文件</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./a.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我是 index.js 文件'</span>)</span><br></pre></td></tr></table></figure></li><li><p>当我在命令行运行 <code>index.js</code> 文件的时候</p><ul><li>首先会把 <code>a.js</code> 文件运行一遍</li><li>然后再继续执行我自己文件内部的代码</li></ul></li><li><p>也可以再导入的时候接受另一个文件导出的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a 接受到的内容就是 a.js 这个文件导出的内容</span></span><br><span class="line"><span class="comment">// 如果 a.js 文件中什么都没有导出，那么接受到的就是一个 空对象</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">'./a.js'</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><ul><li><p>我们在写一个 js 文件的时候，可以向外导出一些内容</p></li><li><p>将来在这个文件被导入的时候，就可以接受到一些内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 a.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 每一个 js 文件都会有一个对象叫做 module</span></span><br><span class="line"><span class="comment">// 在 module 里面有一个成员，叫做 exports</span></span><br><span class="line"><span class="comment">// 每一个 js 文件会默认把 module.exports 导出</span></span><br><span class="line"><span class="comment">// 也就是说，我们向 module.exports 中添加什么内容</span></span><br><span class="line"><span class="comment">// 那么就会导出什么内容</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.name = <span class="string">'Jack'</span></span><br><span class="line"><span class="built_in">module</span>.exports.age = <span class="number">18</span></span><br></pre></td></tr></table></figure></li><li><p>将来这个文件被导入的时候，接受到的内容就是一个对象，里面有两个成员</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">'./a.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// &#123; name: 'Jack', age: 18 &#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><ul><li>在 node 的开发过程中</li><li>我们是把每一个功能独立做成一个模块</li><li>然后在使用 导入导出 的方式把他们关联在一起<ul><li>利于维护</li><li>准确定位</li></ul></li><li>我们一般把模块分为三种<ol><li>内置模块 （node 天生就带有的模块）</li><li>自定义模块 （我们自己写的文件）</li><li>第三方模块 （从网上下载的别人写好的模块）</li></ol></li></ul><h1 id="NODE-常用的内置模块"><a href="#NODE-常用的内置模块" class="headerlink" title="NODE 常用的内置模块"></a>NODE 常用的内置模块</h1><ul><li>刚才是我们自己写的模块</li><li>现在我们来聊聊常见的内置模块</li></ul><h2 id="FS-模块"><a href="#FS-模块" class="headerlink" title="FS 模块"></a>FS 模块</h2><ul><li><p><code>fs</code> 是 node 的一个内置模块</p></li><li><p>专门用来操作文件的</p></li><li><p>使用的时候直接导入就可以使用了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接下来就可以使用 fs 这个变量去操作文件了</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="异步读取文件内容"><a href="#异步读取文件内容" class="headerlink" title="异步读取文件内容"></a>异步读取文件内容</h3><ul><li><p>异步的读取某一个文件内的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为是异步读取，所以要在回调函数里面获取结果</span></span><br><span class="line">fs.readFile(<span class="string">'./text.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// err 表示读取的时候出现的错误</span></span><br><span class="line">    <span class="comment">// data 表示读取到的内容，如果出现错误，那么是 data 是没有内容的</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="同步读取文件内容"><a href="#同步读取文件内容" class="headerlink" title="同步读取文件内容"></a>同步读取文件内容</h3><ul><li><p>同步读取某一个文件的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为是同步读取，所以直接以返回值的形式接收读取的内容就可以</span></span><br><span class="line"><span class="keyword">const</span> res = fs.readFileSync(<span class="string">'./text.txt'</span>, <span class="string">'utf8'</span>)</span><br><span class="line"><span class="comment">// 同步读取的时候，如果出错会直接在控制台报错，并中断程序继续执行</span></span><br><span class="line"><span class="comment">// 如果没有错误，res 就会得到文件中的内容</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="异步写入文件"><a href="#异步写入文件" class="headerlink" title="异步写入文件"></a>异步写入文件</h3><ul><li><p>异步的向某一个文件中写入内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入内容的时候，一般不会出现错误</span></span><br><span class="line"><span class="comment">// 因为如果没有这个文件的话，会创建一个这个文件在向里面写入内容</span></span><br><span class="line"><span class="comment">// 所以回调函数一般没什么用处，只不过是在写入文件结束后做些事情而已</span></span><br><span class="line"><span class="comment">// 虽然没有用处，但是必须要写</span></span><br><span class="line">fs.writeFile(<span class="string">'./text.txt'</span>, <span class="string">'我是要写入的内容'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'写入完成'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="同步写入文件"><a href="#同步写入文件" class="headerlink" title="同步写入文件"></a>同步写入文件</h3><ul><li><p>同步的向某一个文件内写入内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为是写入文件</span></span><br><span class="line"><span class="comment">// 没有返回值，因为一般都会写入成功</span></span><br><span class="line">fs.writeFileSync(<span class="string">'./text.txt'</span>, <span class="string">'我是要写入的内容'</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="HTTP-模块"><a href="#HTTP-模块" class="headerlink" title="HTTP 模块"></a>HTTP 模块</h2><ul><li><p>因为 node 是一个服务端语言</p></li><li><p>所以 node 一定也可以开启一个服务器，开启一个服务</p></li><li><p><code>http</code> 这个模块就是专门用来开启服务，并且接受请求，返回响应的</p></li><li><p><code>http</code> 也是一个内置模块，直接导入使用就行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接下来就可以使用 http 这个模块去开启服务了</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="创建一个服务"><a href="#创建一个服务" class="headerlink" title="创建一个服务"></a>创建一个服务</h3><ul><li><p>要开启先要创建一个服务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个服务</span></span><br><span class="line"><span class="comment">// 这个服务默认监听 http 协议</span></span><br><span class="line"><span class="comment">// 这个服务默认监听 localhost 域名</span></span><br><span class="line"><span class="comment">// 返回值就是这个服务</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 前端发来的每一个请求都会触发这个函数</span></span><br><span class="line">    <span class="comment">// request 包含着所有的请求信息</span></span><br><span class="line">    <span class="comment">// response 是所有的响应信息</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="监听一个端口"><a href="#监听一个端口" class="headerlink" title="监听一个端口"></a>监听一个端口</h3><ul><li><p>确定这个服务监听哪一个端口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个服务</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 前端发来的每一个请求都会触发这个函数</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8080</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这个函数会在服务开启成功以后执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'lintening on port 8080'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="给出一个响应"><a href="#给出一个响应" class="headerlink" title="给出一个响应"></a>给出一个响应</h3><ul><li><p>简单给出一个响应</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个服务</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 前端发来的每一个请求都会触发这个函数</span></span><br><span class="line">    <span class="comment">// 接受到请求以后给出一个响应</span></span><br><span class="line">    response.end(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8080</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这个函数会在服务开启成功以后执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'lintening on port 8080'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>此时，打开浏览器</p></li><li><p>地址栏输入 <code>localhost:8080</code></p></li><li><p>浏览器就会响应文字 <code>hello world</code></p></li></ul><h1 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h1><ul><li><p>在我们安装 <code>node</code> 的环境的时候，会自动帮我们一起安装一个 <code>npm</code> 环境</p></li><li><p>就好像我们安装一些软件的时候，会自动在帮我们安装一些什么 <code>xxx软件管家</code>/<code>xxx游戏</code> 之类的东西</p></li><li><p>但是 <code>npm</code> 不是垃圾软件，而是一个我们超级实用的工具</p></li></ul><h2 id="检测是否安装"><a href="#检测是否安装" class="headerlink" title="检测是否安装"></a>检测是否安装</h2><ul><li><p>和检测 node 一样</p></li><li><p>在命令行输入指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm -v</span><br></pre></td></tr></table></figure></li><li><p>能够得到一个版本号就可以了</p></li></ul><h2 id="了解-npm"><a href="#了解-npm" class="headerlink" title="了解 npm"></a>了解 npm</h2><ul><li>什么是 npm 呢</li><li>我们可以把他想象成一个大超市，一个装着所有我们需要用到的 <code>插件</code>/<code>库</code>/<code>框架</code> 的超市</li><li>我们要下载一个 <code>jQuery-validation</code> 插件<ul><li>我们可以选择去官网进行下载</li><li>可以选择去 GitHub 上查找并下载</li><li>也可以选择直接在命令行用 npm 下载</li></ul></li><li>我们要下载一个 <code>bootstrap</code><ul><li>我们可以选择去官网进行下载</li><li>可以选择去 GitHub 上查找并下载</li><li>也可以选择直接在命令行用 npm 下载</li></ul></li><li>也就是说，npm 包含着我们所有的第三方的东西</li><li>我们需要的时候，只要打开终端，就可以使用指令来帮我们下载<ul><li>再也不需要去官网找了</li></ul></li><li>而且，npm 不光可以在后端使用，也可以在前端使用</li><li><strong>npm 只不过是一个依赖于 node 环境的大型的包管理器</strong></li></ul><h2 id="使用-npm"><a href="#使用-npm" class="headerlink" title="使用 npm"></a>使用 npm</h2><ul><li>我们想使用 npm 只要打开命令行就可以了</li><li>作为一个 <strong>包管理器</strong></li><li>可以帮我们下载一些 插件 库 框架 之类的东西供我们使用</li></ul><h3 id="下载包"><a href="#下载包" class="headerlink" title="下载包"></a>下载包</h3><ul><li><p>打开命令行</p></li><li><p>输入下载的指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示使用 npm 这个工具下载一个 jquery</span><br><span class="line"><span class="meta">$</span> npm install jquery</span><br></pre></td></tr></table></figure></li><li><p>下载完毕以后，就会在当前目录下多出一个文件夹</p><ul><li>叫做 <code>node_modules</code></li><li>在这个目录下就会有一个文件夹叫做 <code>jquery</code></li><li>就是我们需要的东西了</li></ul></li><li><p>npm 的下载默认是下载最新版本的包</p></li><li><p>我们也可以在下载的时候指定一下我要下载哪一个版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示使用 npm 这个工具下载一个 3.3.7 版本的 jquery</span><br><span class="line"><span class="meta">$</span> npm install bootstrap@3.3.7</span><br></pre></td></tr></table></figure></li></ul><h3 id="删除包"><a href="#删除包" class="headerlink" title="删除包"></a>删除包</h3><ul><li><p>在删除包的时候，我们可以直接去 <code>node_modules</code> 文件夹中找到对应的包的文件夹删除掉</p></li><li><p>但是这样做并不好，我们还是应该使用命令行的指令来删除包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示我要删除 jquery 这个包</span><br><span class="line"><span class="meta">$</span> npm uninstall jquery</span><br></pre></td></tr></table></figure></li><li><p>这样，这个包就会被卸载了</p></li></ul><h3 id="管理项目"><a href="#管理项目" class="headerlink" title="管理项目"></a>管理项目</h3><ul><li><p>我们的每一个项目都有可能需要依赖很多的包（有插件/库/框架）</p></li><li><p>npm 会帮助我们记录，我们当前这个项目所使用的包</p></li><li><p>但是前提是，你要告诉 npm 说： “你来帮我管理整个文件夹”</p></li><li><p>我们依旧是使用指令在命令行来告诉 npm </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示告诉 npm 你来帮我们管理整个文件夹（也就是我的整个项目）</span><br><span class="line"><span class="meta">$</span> npm init</span><br></pre></td></tr></table></figure></li></ul><h3 id="npm-清除缓存"><a href="#npm-清除缓存" class="headerlink" title="npm 清除缓存"></a>npm 清除缓存</h3><ul><li><p>有的时候，有些包下载到一半，因为各种原因失败了（比如突然没有网了）</p></li><li><p>那么这个下载了一半的包 <strong>有可能</strong> 会被缓存下来</p></li><li><p>那么以后你再次下载的时候，就都是失败的状态</p></li><li><p>那么我们就要清除掉缓存以后，在重新下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示清除 npm 的缓存</span><br><span class="line"><span class="meta">$</span> npm cache clear -f</span><br></pre></td></tr></table></figure></li></ul><h1 id="NRM"><a href="#NRM" class="headerlink" title="NRM"></a>NRM</h1><ul><li>我们的 <code>npm</code> 虽然好用</li><li>但是有一个缺点<ul><li>就是，他虽然在帮我们下载东西</li><li>但是他的下载地址是在国外</li><li>也就是说，每次使用 npm 下载的时候，都是去国外的服务器上进行下载</li><li>那么就会有很多不稳定的因素</li><li>而且相对时间比较长</li></ul></li><li><code>nrm</code> 就是一个用来切换 <code>npm</code> 下载地址的工具（切换镜像源工具）</li></ul><h2 id="安装-NRM"><a href="#安装-NRM" class="headerlink" title="安装 NRM"></a>安装 NRM</h2><ul><li><p><code>nrm</code> 如果想使用，那么需要我们自己安装一下</p></li><li><p>因为是我们的工具，所以使用 <code>npm</code> 就可以安装</p></li><li><p>依旧是使用指令的方式来进行安装</p></li><li><p>只不过这里要把这个 <code>nrm</code> 安装成一个全局的依赖，而不再是项目内部的依赖了</p><ul><li>全局依赖，一个电脑安装一次，就一直可以使用</li></ul></li><li><p>我们使用指令安装一个全局 <code>nrm</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示安装一个全局 nrm</span><br><span class="line"><span class="meta">$</span> npm install --global nrm</span><br></pre></td></tr></table></figure></li></ul><h3 id="检测安装"><a href="#检测安装" class="headerlink" title="检测安装"></a>检测安装</h3><ul><li><p>安装完毕之后，我们检测一下是否安装成功</p></li><li><p>和检测 node npm 的时候一样</p></li><li><p>在命令行使用指令查看一下版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> nrm --version</span><br></pre></td></tr></table></figure></li><li><p>能出现版本号，表示安装成功</p></li></ul><h2 id="使用-nrm"><a href="#使用-nrm" class="headerlink" title="使用 nrm"></a>使用 nrm</h2><ul><li>nrm 里面存着好几个镜像源地址</li><li>我们要挑一个比较快的使用</li></ul><h3 id="检测镜像源地址"><a href="#检测镜像源地址" class="headerlink" title="检测镜像源地址"></a>检测镜像源地址</h3><ul><li><p>我们直接在命令行使用指令来查看所有镜像源地址的网速</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示查看 nrm 镜像源地址网速</span><br><span class="line"><span class="meta">$</span> nrm test</span><br></pre></td></tr></table></figure></li></ul><h3 id="切换镜像源"><a href="#切换镜像源" class="headerlink" title="切换镜像源"></a>切换镜像源</h3><ul><li><p>我们检测完毕以后，就直到哪个比较快了</p></li><li><p>我们就使用指令切换一下镜像源地址就好了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 表示切换到 taobao 镜像源地址</span><br><span class="line"><span class="meta">$</span> nrm use taobao</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;NODE&quot;&gt;&lt;a href=&quot;#NODE&quot; class=&quot;headerlink&quot; title=&quot;NODE&quot;&gt;&lt;/a&gt;NODE&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;node官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nodejs.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;node中文网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;什么是 node&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node.js® is a JavaScript runtime built on &lt;a href=&quot;https://v8.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Chrome’s V8 JavaScript engine&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这个是 node 官网的解释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其实 node 就是用 javascript 语言写 &lt;strong&gt;后端&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;也就是说，我们的 javascript 有了 node 以后，不光是一个前端语言，也是一个后端语言&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;前端 javascript&lt;ul&gt;
&lt;li&gt;三大核心&lt;ul&gt;
&lt;li&gt;ECMAScript&lt;/li&gt;
&lt;li&gt;DOM&lt;/li&gt;
&lt;li&gt;BOM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;操作内容&lt;ul&gt;
&lt;li&gt;浏览器&lt;/li&gt;
&lt;li&gt;解决兼容问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;后端 javascript （node）&lt;ul&gt;
&lt;li&gt;核心&lt;ul&gt;
&lt;li&gt;ECMAScript&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;操作内容&lt;ul&gt;
&lt;li&gt;后端代码&lt;/li&gt;
&lt;li&gt;数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;也就是说，node 我们不需要解决兼容问题，不需要 DOM 和 BOM，只关注业务逻辑就可以了&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="千锋" scheme="http://yoursite.com/categories/千锋/"/>
    
    
  </entry>
  
  <entry>
    <title>DAY6-3_jQuery1</title>
    <link href="http://yoursite.com/2021/11/03/DAY6-3-jQuery1/"/>
    <id>http://yoursite.com/2021/11/03/DAY6-3-jQuery1/</id>
    <published>2021-11-03T02:51:29.000Z</published>
    <updated>2021-11-03T02:51:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Map-和-Set"><a href="#Map-和-Set" class="headerlink" title="Map 和 Set"></a>Map 和 Set</h1><ul><li>Map 和 Set 是 ES6 新增的两个数据类型</li><li>都是属于内置构造函数</li><li>使用 new 的方式来实例化使用</li></ul><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ul><li><p>使用方式就是和 new 连用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line"><span class="built_in">console</span>.log(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Set(0) &#123;&#125;</span></span><br><span class="line"><span class="comment">        size: (...)</span></span><br><span class="line"><span class="comment">        __proto__: Set</span></span><br><span class="line"><span class="comment">        [[Entries]]: Array(0)</span></span><br><span class="line"><span class="comment">        length: 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>就是一个数据集合</p></li><li><p>我们可以在 new 的时候直接向内部添加数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化的时候直接添加数据要以数组的形式添加</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, <span class="literal">true</span>, <span class="string">'hwllo'</span>])</span><br><span class="line"><span class="built_in">console</span>.log(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Set(7) &#123;1, 2, 3, &#123;…&#125;, ƒ, …&#125;</span></span><br><span class="line"><span class="comment">        size: (...)</span></span><br><span class="line"><span class="comment">        __proto__: Set</span></span><br><span class="line"><span class="comment">        [[Entries]]: Array(7)</span></span><br><span class="line"><span class="comment">        0: 1</span></span><br><span class="line"><span class="comment">        1: 2</span></span><br><span class="line"><span class="comment">        2: 3</span></span><br><span class="line"><span class="comment">        3: Object</span></span><br><span class="line"><span class="comment">        4: function () &#123;&#125;</span></span><br><span class="line"><span class="comment">        5: true</span></span><br><span class="line"><span class="comment">        6: "hwllo"</span></span><br><span class="line"><span class="comment">        length: 7</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>看上去是一个类似数组的数据结构，但是不是，就是 <strong>Set 数据结构</strong></p></li></ul><a id="more"></a><h3 id="常用方法和属性"><a href="#常用方法和属性" class="headerlink" title="常用方法和属性"></a>常用方法和属性</h3><ul><li><p><code>size</code>  ： 用来获取该数据结构中有多少数据的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, <span class="literal">true</span>, <span class="string">'hwllo'</span>])</span><br><span class="line"><span class="built_in">console</span>.log(s.size) <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><ul><li>看上去是一个和数组数据类型差不多的数据结构，而且我们也看到了 length 属性</li><li>但是不能使用，想要获取该数据类型中的成员数量，<strong>需要使用 size 属性</strong></li></ul></li><li><p><code>add</code> : 用来向该数据类型中追加数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">s.add(<span class="number">0</span>)</span><br><span class="line">s.add(&#123;&#125;)</span><br><span class="line">s.add(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(s.size) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li>这个方法就是向该数据类型中追加数据使用的</li></ul></li><li><p><code>delete</code> : 是删除该数据结构中的某一个数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">s.add(<span class="number">0</span>)</span><br><span class="line">s.add(&#123;&#125;)</span><br><span class="line">s.add(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">s.delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s.size) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li><li><p><code>clear</code> ： 清空数据结构中的所有数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">s.add(<span class="number">0</span>)</span><br><span class="line">s.add(&#123;&#125;)</span><br><span class="line">s.add(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">s.clear()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s.size) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li><li><p><code>has</code> ： 查询数据解构中有没有某一个数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">s.add(<span class="number">0</span>)</span><br><span class="line">s.add(&#123;&#125;)</span><br><span class="line">s.add(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s.has(<span class="number">0</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>forEach</code> : 用来遍历 Set 数据结构的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">s.add(<span class="number">0</span>)</span><br><span class="line">s.add(&#123;&#125;)</span><br><span class="line">s.add(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">s.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item) <span class="comment">// 0   &#123;&#125;   function () &#123;&#125;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>方法介绍的差不多了，有一个问题出现了，那就是</p></li><li><p>我们的方法要么是添加，要么是删除，要么是查询，没有获取</p></li><li><p>因为要获取 Set 结构里面的数据需要借助一个 <code>...</code> 展开运算符</p></li><li><p>把他里面的东西都放到一个数组里面去，然后再获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="keyword">const</span> a = [...s]</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// (6) [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">0</span>]) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log([...s][<span class="number">0</span>]) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p>又一个问题出现了，new 的时候需要以数组的形式传递</p></li><li><p>然后获取的时候又要转成数组的形式获取</p></li><li><p>那么我为什么不一开始就定义数组，要这个 Set 数据类型干什么</p></li><li><p>这就不得不提到一个 Set 的特点</p></li><li><p><strong>Set 不允许存储重复的数据</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">s.add(<span class="number">4</span>)  <span class="comment">// 此时 size 是 4</span></span><br><span class="line">s.add(<span class="number">1</span>)  <span class="comment">// 此时 size 是 4</span></span><br><span class="line">s.add(<span class="number">2</span>)  <span class="comment">// 此时 size 是 4</span></span><br><span class="line">s.add(<span class="number">3</span>)  <span class="comment">// 此时 size 是 4</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><ul><li><p>也是要和 new 连用</p></li><li><p>是一个数据集合，是一个很类似于 对象 的数据集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="built_in">console</span>.log(m)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Map(0) &#123;&#125;</span></span><br><span class="line"><span class="comment">        size: (...)</span></span><br><span class="line"><span class="comment">        __proto__: Map</span></span><br><span class="line"><span class="comment">        [[Entries]]: Array(0)</span></span><br><span class="line"><span class="comment">        length: 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>我们的对象中不管存储什么，key 一定是一个字符串类型</p></li><li><p>但是再 Map 里面，我们的 key 可以为任意数据类型</p></li><li><p>我们也管 Map 叫做 （值 = 值 的数据类型）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[&#123;&#125;, &#123;&#125;], [<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;], [<span class="literal">true</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="built_in">console</span>.log(m)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Map(3) &#123;&#123;…&#125; =&gt; &#123;…&#125;, ƒ =&gt; ƒ, true =&gt; 1&#125;</span></span><br><span class="line"><span class="comment">        size: (...)</span></span><br><span class="line"><span class="comment">        __proto__: Map</span></span><br><span class="line"><span class="comment">        [[Entries]]: Array(3)</span></span><br><span class="line"><span class="comment">        0: &#123;Object =&gt; Object&#125;</span></span><br><span class="line"><span class="comment">            key: &#123;&#125;</span></span><br><span class="line"><span class="comment">            value: &#123;&#125;</span></span><br><span class="line"><span class="comment">        1: &#123;function () &#123;&#125; =&gt; function () &#123;&#125;&#125;</span></span><br><span class="line"><span class="comment">            key: ƒ ()</span></span><br><span class="line"><span class="comment">            value: ƒ ()</span></span><br><span class="line"><span class="comment">        2: &#123;true =&gt; 1&#125;</span></span><br><span class="line"><span class="comment">            key: true</span></span><br><span class="line"><span class="comment">            value: 1</span></span><br><span class="line"><span class="comment">        length: 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="常用方法和属性-1"><a href="#常用方法和属性-1" class="headerlink" title="常用方法和属性"></a>常用方法和属性</h3><ul><li><p><code>size</code> ： 用来获取该数据类型中数据的个数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[&#123;&#125;, &#123;&#125;], [<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;], [<span class="literal">true</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="built_in">console</span>.log(m.size) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li><li><p><code>delete</code> : 用来删除该数据集合中的某一个数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[&#123;&#125;, &#123;&#125;], [<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;], [<span class="literal">true</span>, <span class="number">1</span>]])</span><br><span class="line">m.delete(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(m.size) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li><li><p><code>set</code> : 用来向该数据集合中添加数据使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">m.set(&#123; <span class="attr">name</span>: <span class="string">'Jack'</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(m.size) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p><code>get</code> : 用来获取该数据集合中的某一个数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"></span><br><span class="line">m.set(&#123; <span class="attr">name</span>: <span class="string">'Jack'</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br><span class="line">m.set(<span class="literal">true</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(m.get(<span class="literal">true</span>)) <span class="comment">// function () &#123;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>clear</code> : 清除数据集合中的所有数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"></span><br><span class="line">m.set(&#123; <span class="attr">name</span>: <span class="string">'Jack'</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br><span class="line">m.set(<span class="literal">true</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">m.clear()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(m.size) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li><li><p><code>has</code> ： 用来判断数据集合中是否存在某一个数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"></span><br><span class="line">m.set(&#123; <span class="attr">name</span>: <span class="string">'Jack'</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br><span class="line">m.set(<span class="literal">true</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(m.has(<span class="literal">true</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><ul><li><code>jQuery</code> 是一个前端库，也是一个方法库</li><li>他里面封装着一些列的方法供我们使用</li><li>我们常用的一些方法它里面都有，我们可以直接拿来使用就行了</li><li><code>jQuery</code> 之所以好用，很多人愿意使用，是因为他的几个优点太强大了<ol><li>优质的选择器和筛选器</li><li>好用的隐式迭代</li><li>强大的链式编程</li></ol></li><li>因为这些东西的出现，很多时候我们要做的事情被 “一行代码解决”</li><li>接下来我们就来认识一下 <code>jQuery</code></li></ul><h2 id="jQuery-的使用"><a href="#jQuery-的使用" class="headerlink" title="jQuery 的使用"></a>jQuery 的使用</h2><ul><li><p><a href="https://jquery.com/" target="_blank" rel="noopener">jQuery官网</a></p><ul><li>官网是全英文的</li><li>也没啥可看的，不过没事的时候可以看看了解一下</li></ul></li><li><p><a href="http://jquery.cuishifeng.cn/" target="_blank" rel="noopener">jQuery方法大全中文网</a></p><ul><li>这个网站可以多看看</li><li>里面是 <code>jQuery</code> 的方法大全，而且是中文的</li></ul></li><li><p>我们要使用 <code>jQuery</code> 首先要下载一个</p><ul><li>可以去官网下载，也可以直接百度搜索下载，都可以</li></ul></li><li><p>然后就是再页面里面引入 <code>jQuery.js</code> 就行了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>然后就可以开始使用了</p></li><li><p><code>jQuery</code> 向全局暴露的接口就是 <code>jQuery</code> 或者 <code>$</code> 都行</p></li></ul><h2 id="选择器和筛选器"><a href="#选择器和筛选器" class="headerlink" title="选择器和筛选器"></a>选择器和筛选器</h2><ul><li>选择器和筛选器就是用来帮我们获取 DOM 元素的</li></ul><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul><li><p><code>jQuery</code> 有着相当强大的选择器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照 id 获取页面中的元素</span></span><br><span class="line"><span class="keyword">const</span> ele = jQuery(<span class="string">'#box'</span>) </span><br><span class="line"><span class="keyword">const</span> ele = $(<span class="string">'#box'</span>)</span><br></pre></td></tr></table></figure><ul><li>上面两个都可以按照 id 来获取元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照类名来选择</span></span><br><span class="line"><span class="keyword">const</span> eles = jQuery(<span class="string">'.a'</span>)</span><br><span class="line"><span class="keyword">const</span> eles = $(<span class="string">'.a'</span>)</span><br></pre></td></tr></table></figure><ul><li>上面就是按照类名来选择元素，可以获取到一组元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lis = jQuery(<span class="string">'li'</span>)</span><br><span class="line"><span class="keyword">const</span> lis = $(<span class="string">'li'</span>)</span><br></pre></td></tr></table></figure><ul><li>上面就是按照标签名来获取元素，可以获取到一组元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> eles = jQuery(<span class="string">'ul &gt; li'</span>)</span><br><span class="line"><span class="keyword">const</span> eles = $(<span class="string">'ul &gt; li'</span>)</span><br></pre></td></tr></table></figure><ul><li>上面就是按照选择器来获取元素，可以获取到一组元素</li></ul></li></ul><h4 id="特殊选择器"><a href="#特殊选择器" class="headerlink" title="特殊选择器"></a>特殊选择器</h4><ul><li><p>直接找到第一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'li:first'</span>) <span class="comment">// 找到所有 li 中的第一个</span></span><br></pre></td></tr></table></figure></li><li><p>直接找到最后一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'li:last'</span>) <span class="comment">// 找到所有 li 中的最后一个</span></span><br></pre></td></tr></table></figure></li><li><p>直接找到第几个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'li:eq(3)'</span>) <span class="comment">// 找到所有 li 中索引为 3 的那个</span></span><br></pre></td></tr></table></figure></li><li><p>找到所有奇数个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'li:odd'</span>) <span class="comment">// 找到所有 li 中索引为 奇数 的</span></span><br></pre></td></tr></table></figure></li><li><p>找到所有偶数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'li:even'</span>) <span class="comment">// 找到所有 li 中索引为 偶数 的</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="筛选器"><a href="#筛选器" class="headerlink" title="筛选器"></a>筛选器</h3><ul><li><p>jQuery 的筛选器就是在选择器选择到一组元素以后</p></li><li><p>对元素进行筛选，也可以对准确的某一个元素进行判断和获取</p><ol><li><p>找到所有元素中的第一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'li'</span>).first()</span><br></pre></td></tr></table></figure></li><li><p>找到所有元素中的最后一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'li'</span>).last()</span><br></pre></td></tr></table></figure></li><li><p>找到某一个元素的下一个兄弟元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'li:eq(3)'</span>).next()</span><br></pre></td></tr></table></figure></li><li><p>找到某一个元素的上一个兄弟元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'li:eq(3)'</span>).prev()</span><br></pre></td></tr></table></figure></li><li><p>找到某一个元素的后面的所有兄弟元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'li:eq(3)'</span>).nextAll()</span><br></pre></td></tr></table></figure></li><li><p>找到某一个元素的前面的所有兄弟元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'li:eq(3)'</span>).prevAll()</span><br></pre></td></tr></table></figure></li><li><p>找到某一个元素的父元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'li:eq(3)'</span>).parent()</span><br></pre></td></tr></table></figure></li><li><p>找到某一个元素的所有结构父级，一直到 html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'li:eq(3)'</span>).parents()</span><br></pre></td></tr></table></figure></li><li><p>找到一组元素中的某一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 li 的所有父级里面找到所有 body 标签</span></span><br><span class="line">$(<span class="string">'li'</span>).parents().find(<span class="string">'body'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到 div 标签下所有后代元素中所有类名为 box 的元素</span></span><br><span class="line">$(<span class="string">'div'</span>).find(<span class="string">'.box'</span>)</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h2><ul><li><p>给一个元素添加某个属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给 div 元素添加一个 id 属性，值是 box</span></span><br><span class="line">$(<span class="string">'div'</span>).prop(<span class="string">'id'</span>, <span class="string">'box'</span>)</span><br><span class="line"><span class="comment">// 获取 div 的 id 属性</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'div'</span>).prop(<span class="string">'id'</span>))</span><br></pre></td></tr></table></figure><ul><li>prop 这个方法只能添加元素自己本身就有的属性</li><li>如果是添加的自定义属性，不会显示在标签上，但是可以使用</li></ul></li><li><p>给一个元素添加某个自定义属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给 div 添加一个 index 属性，值是 1</span></span><br><span class="line">$(<span class="string">'div'</span>).attr(<span class="string">'index'</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 获取 div 的 index 属性</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'div'</span>).attr(<span class="string">'index'</span>))</span><br></pre></td></tr></table></figure></li><li><p>移除元素的某一个属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移除元素自己本身的属性</span></span><br><span class="line">$(<span class="string">'div'</span>).removeProp(<span class="string">'id'</span>)</span><br><span class="line"><span class="comment">// 移除元素的自定义属性</span></span><br><span class="line">$(<span class="string">'div'</span>).removeAttr(<span class="string">'index'</span>)</span><br></pre></td></tr></table></figure></li><li><p>操作元素的类名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断某一个元素有没有某一个 class</span></span><br><span class="line">$(<span class="string">'div'</span>).hasClass(<span class="string">'box'</span>) <span class="comment">// true 表示该元素有 box 类名，false 表示该元素没有 box 类名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给元素添加一个类名</span></span><br><span class="line">$(<span class="string">'div'</span>).addClass(<span class="string">'box2'</span>) <span class="comment">// 给 div 元素添加一个 box2 类名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除元素的类名</span></span><br><span class="line">$(<span class="string">'div'</span>).removeClass(<span class="string">'box'</span>) <span class="comment">// 移除 div 的 box 类名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 切换元素类名</span></span><br><span class="line">$(<span class="string">'div'</span>).toggleClass(<span class="string">'box3'</span>) <span class="comment">// 如果元素本身有这个类名就移除，本身没有就添加</span></span><br></pre></td></tr></table></figure></li><li><p>操作元素的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给元素的 innerHTML 赋值</span></span><br><span class="line">$(<span class="string">'div'</span>).html(<span class="string">'&lt;span&gt;hello world&lt;/span&gt;'</span>)</span><br><span class="line"><span class="comment">// 获取元素的 innerHTML</span></span><br><span class="line">$(<span class="string">'div'</span>).html()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给元素的 innerText 赋值</span></span><br><span class="line">$(<span class="string">'div'</span>).text(<span class="string">'hello world'</span>)</span><br><span class="line"><span class="comment">// 获取元素的 innerText</span></span><br><span class="line">$(<span class="string">'div'</span>).text()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给元素的 value 赋值</span></span><br><span class="line">$(<span class="string">'input'</span>).val(<span class="string">'admin'</span>)</span><br><span class="line"><span class="comment">// 获取元素的 value 值</span></span><br><span class="line">$(<span class="string">'input'</span>).val()</span><br></pre></td></tr></table></figure></li></ul><h2 id="操作样式"><a href="#操作样式" class="headerlink" title="操作样式"></a>操作样式</h2><ul><li><p>jQuery 操作元素的样式就是一个方法 <code>css</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给元素设置一个 css 样式</span></span><br><span class="line">$(<span class="string">'div'</span>).css(<span class="string">'width'</span>, <span class="string">'100px'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取元素的某一个样式</span></span><br><span class="line">$(<span class="string">'div'</span>).css(<span class="string">'width'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给元素设置一组样式</span></span><br><span class="line">$(<span class="string">'div'</span>).css(&#123;</span><br><span class="line">    width: <span class="string">'100px'</span>,</span><br><span class="line">    height: <span class="string">'200px'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Map-和-Set&quot;&gt;&lt;a href=&quot;#Map-和-Set&quot; class=&quot;headerlink&quot; title=&quot;Map 和 Set&quot;&gt;&lt;/a&gt;Map 和 Set&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Map 和 Set 是 ES6 新增的两个数据类型&lt;/li&gt;
&lt;li&gt;都是属于内置构造函数&lt;/li&gt;
&lt;li&gt;使用 new 的方式来实例化使用&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;Set&quot;&gt;&lt;a href=&quot;#Set&quot; class=&quot;headerlink&quot; title=&quot;Set&quot;&gt;&lt;/a&gt;Set&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用方式就是和 new 连用&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; s = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Set&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	Set(0) &amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        size: (...)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        __proto__: Set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        [[Entries]]: Array(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        length: 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;就是一个数据集合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我们可以在 new 的时候直接向内部添加数据&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 实例化的时候直接添加数据要以数组的形式添加&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; s = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Set&lt;/span&gt;([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &amp;#123;&amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;hwllo&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	Set(7) &amp;#123;1, 2, 3, &amp;#123;…&amp;#125;, ƒ, …&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        size: (...)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        __proto__: Set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        [[Entries]]: Array(7)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        0: 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        1: 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        2: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        3: Object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        4: function () &amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        5: true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        6: &quot;hwllo&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        length: 7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;看上去是一个类似数组的数据结构，但是不是，就是 &lt;strong&gt;Set 数据结构&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="千锋" scheme="http://yoursite.com/categories/千锋/"/>
    
    
  </entry>
  
  <entry>
    <title>DAY6-2_设计模式</title>
    <link href="http://yoursite.com/2021/11/03/DAY6-2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2021/11/03/DAY6-2-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-11-03T02:50:29.000Z</published>
    <updated>2021-11-03T02:50:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><ul><li>设计模式是我们在 <strong>解决问题的时候针对特定问题给出的简洁而优化的处理方案</strong></li><li>我们有很多的设计模式<ul><li>单例模式</li><li>组合模式</li><li>观察者模式</li><li>…</li></ul></li><li>今天我们就聊一下这三个设计模式<ul><li>单例模式 / 组合模式 / 观察者模式</li></ul></li></ul><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ul><li>什么是单例模式呢？</li><li>我们都知道，构造函数可以创造一个对象</li><li>我们 new 很多次构造函数就能得到很多的对象</li><li>单例模式： 就是使用构造函数实例化的时候，不管实例化多少回，都是同一个对象<ul><li>也就是一个构造函数一生只能 new 出一个对象</li></ul></li><li>也就是说，当我们使用构造函数，每一次 new 出来的对象 属性/功能/方法 <strong>完全一样</strong> 的时候，我们把他设计成单例模式</li></ul><a id="more"></a><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><ul><li><p>单例模式的核心代码很简单</p></li><li><p>其实就是判断一下，他曾经有没有 new 出来过对象</p></li><li><p>如果有，就还继续使用之前的那个对象，如果没有，那么就给你 new 一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 准备一个构造函数</span></span><br><span class="line"><span class="comment">// 将来要 new 的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备一个单例模式函数</span></span><br><span class="line"><span class="comment">// 这个单例模式函数要把 Person 做成一个单例模式</span></span><br><span class="line"><span class="comment">// 将来再想要 new Person 的时候只要执行这个 singleton 函数就可以了</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">singleton</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> instance</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!instance) &#123; <span class="comment">// 如果 instance 没有内容</span></span><br><span class="line">    <span class="comment">// 来到这里，证明 instance 没有内容</span></span><br><span class="line">    <span class="comment">// 给他赋值为 new Person</span></span><br><span class="line">      instance = <span class="keyword">new</span> Person()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 返回的永远都是第一次 new Person 的实例</span></span><br><span class="line">  <span class="comment">// 也就是永远都是一个实例</span></span><br><span class="line">  <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = singleton()</span><br><span class="line"><span class="keyword">const</span> p2 = singleton()</span><br><span class="line"><span class="built_in">console</span>.log(p1 === p2) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li><p>我们就用这个核心代码简单书写一个 demo</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个构造函数的功能就是创建一个 div，添加到页面中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateDiv</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.div)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CreateDiv.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.div.innerHTML = text</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备把这个 CreateDiv 做成单例模式</span></span><br><span class="line"><span class="comment">// 让 singleton 成为一个闭包函数</span></span><br><span class="line"><span class="keyword">const</span> singleton = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">text</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> CreateDiv()</span><br><span class="line">        &#125;</span><br><span class="line">        instance.init(text)</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">singleton(<span class="string">'hello'</span>) <span class="comment">// 第一次的时候，页面中会出现一个新的 div ，内容是 hello</span></span><br><span class="line">singleton(<span class="string">'world'</span>) <span class="comment">// 第二次的时候，不会出现新的 div，而是原先的 div 内容变成了 world</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><ul><li><p>组合模式，就是把几个构造函数的器动方式组合再一起</p></li><li><p>然后用一个 ”遥控器“ 进行统一调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetHome</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    init () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'到家了'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OpenComputer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    init () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'打开电脑'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlayGame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    init () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'玩游戏'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面几个构造函数的创造的实例化对象的 <strong>启动方式</strong> 都一致</li><li>那么我们就可以把这几个函数以组合模式的情况书写</li><li>然后统一启动</li></ul></li><li><p>准备一个 <strong>组合模式</strong> 的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compose</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> () &#123;</span><br><span class="line">        <span class="keyword">this</span>.compose = []</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加任务的方法</span></span><br><span class="line">    add (task) &#123;</span><br><span class="line">        <span class="keyword">this</span>.compose.push(task)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 一个执行任务的方法</span></span><br><span class="line">    execute () &#123;</span><br><span class="line">        <span class="keyword">this</span>.compose.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.init()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们就用我们的组合模式构造函数来吧前面的几个功能组合起来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> Compose()</span><br><span class="line"><span class="comment">// 把所有要完成的任务都放在队列里面</span></span><br><span class="line">c.add(<span class="keyword">new</span> GetHome())</span><br><span class="line">c.add(<span class="keyword">new</span> OpenComputer)</span><br><span class="line">c.add(<span class="keyword">new</span> PlayGame)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接器动任务队列</span></span><br><span class="line">c.execute()</span><br><span class="line"><span class="comment">// 就会按照顺序执行三个对象中的 init 函数</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><ul><li>观察者模式，通常也被叫做 <strong>发布-订阅模式</strong>  或者 <strong>消息模式</strong></li><li>英文名称叫做 <strong><code>Observer</code></strong></li><li>官方解释： 当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新，解决了主体对象与观察者之间功能的耦合，即一个对象状态改变给其他对象通知的问题</li><li>听起来很迷糊，但是其实没有很难</li></ul><h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><ul><li>当你想去书店买书，但是恰巧今天你要买的书没有了</li><li>我们又不能总在书店等着，就把我们的手机留给店员</li><li>当你需要的书到了的时候，他会打电话通知你，你去买了就好了</li><li>你买到数了以后，就告诉他，我买到了，那么以后再来了书就不会通知你了</li></ul><h3 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener"></a>addEventListener</h3><ul><li><p>上面的例子可能还不是很明确</p></li><li><p>但是 <code>addEventListener</code> 是一个我们都用过的东西</p></li><li><p>这个东西其实就是一个标准的 <strong>观察者模式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'btn 被点击了'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>上面这个就是有一个 <strong>无形的观察者</strong> 再观察着 <code>btn</code> 的一举一动</li><li>当这个 <code>btn</code> 被点击的时候，就会执行 对应的函数</li><li>我们也可以多绑定几个函数</li></ul></li><li><p>说白了： 观察者模式就是我们自己实现一个 <code>addEventListener</code> 的功能</p><ul><li>只不过 <code>addEventListaner</code> 只有固定的一些事件，而且只能给 dom 元素绑定</li><li>而我们自己写的可以随便绑定一个事件名称，自己选择触发时机而已</li></ul></li></ul><h3 id="书写代码"><a href="#书写代码" class="headerlink" title="书写代码"></a>书写代码</h3><ul><li><p>首先我们分析功能</p><ul><li><p>我们要有一个观察者（这里抽象为一个对象 <code>{}</code>）</p></li><li><p>需要有一个属性，存放消息的盒子（把你绑定的所有事件放在里面）</p></li><li><p>需要一个 on 方法，用于添加事件</p></li><li><p>需要一个 emit 方法，用于发布事件（触发）</p></li><li><p>需要一个 off 方法，把已经添加的方法取消</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = &#123;</span><br><span class="line">    message: &#123;&#125;,</span><br><span class="line">    on: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    emit: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    off: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们把它写成一个构造函数的形式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> () &#123;</span><br><span class="line">        <span class="keyword">this</span>.message = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    on () &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    emit () &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    off () &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>现在，一个观察者的雏形就出来了</p></li><li><p>接下来完善方法就可以了</p></li></ul></li></ul><h4 id="ON"><a href="#ON" class="headerlink" title="ON"></a>ON</h4><ul><li><p>先来写 ON 方法</p></li><li><p>添加一个事件</p></li><li><p>我们的 on 方法需要接受 两个参数</p><ul><li>事件类型</li><li>事件处理函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> () &#123;</span><br><span class="line">        <span class="keyword">this</span>.message = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    on (type, fn) &#123;</span><br><span class="line">        <span class="comment">// 判断消息盒子里面有没有设置事件类型</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.message[type]) &#123;</span><br><span class="line">            <span class="comment">// 证明消息盒子里面没有这个事件类型</span></span><br><span class="line">            <span class="comment">// 那么我们直接添加进去</span></span><br><span class="line">            <span class="comment">// 并且让他的值是一个数组，再数组里面放上事件处理函数</span></span><br><span class="line">            <span class="keyword">this</span>.message[type] = [fn]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 证明消息盒子里面有这个事件类型</span></span><br><span class="line">            <span class="comment">// 那么我们直接向数组里面追加事件处理函数就行了</span></span><br><span class="line">            <span class="keyword">this</span>.message[type].push(fn)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    emit () &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    off () &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="EMIT"><a href="#EMIT" class="headerlink" title="EMIT"></a>EMIT</h4><ul><li><p>接下来就是发布事件</p></li><li><p>也就是让我们已经订阅好的事件执行一下</p></li><li><p>同样需要接受两个参数</p><ul><li>要触发的事件类型</li><li>给事件处理函数传递的参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> () &#123;</span><br><span class="line">        <span class="keyword">this</span>.message = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    on (type, fn) &#123;</span><br><span class="line">        <span class="comment">// 判断消息盒子里面有没有设置事件类型</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.message[type]) &#123;</span><br><span class="line">            <span class="comment">// 证明消息盒子里面没有这个事件类型</span></span><br><span class="line">            <span class="comment">// 那么我们直接添加进去</span></span><br><span class="line">            <span class="comment">// 并且让他的值是一个数组，再数组里面放上事件处理函数</span></span><br><span class="line">            <span class="keyword">this</span>.message[type] = [fn]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 证明消息盒子里面有这个事件类型</span></span><br><span class="line">            <span class="comment">// 那么我们直接向数组里面追加事件处理函数就行了</span></span><br><span class="line">            <span class="keyword">this</span>.message[type].push(fn)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    emit (type, ...arg) &#123;</span><br><span class="line">        <span class="comment">// 判断你之前有没有订阅过这个事件</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.message[type]) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果有，那么我们就处理一下参数</span></span><br><span class="line">        <span class="keyword">const</span> event = &#123;</span><br><span class="line">            type: type,</span><br><span class="line">            arg: arg || &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环执行为当前事件类型订阅的所有事件处理函数</span></span><br><span class="line">        <span class="keyword">this</span>.message[type].forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.call(<span class="keyword">this</span>, event)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    off () &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="OFF"><a href="#OFF" class="headerlink" title="OFF"></a>OFF</h4><ul><li><p>最后就是移除事件</p></li><li><p>就是把已经订阅的事件处理函数移除掉</p></li><li><p>同样需要接受两个参数</p><ul><li>要移除的事件类型</li><li>要移除的事件处理函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> () &#123;</span><br><span class="line">        <span class="keyword">this</span>.message = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    on (type, fn) &#123;</span><br><span class="line">        <span class="comment">// 判断消息盒子里面有没有设置事件类型</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.message[type]) &#123;</span><br><span class="line">            <span class="comment">// 证明消息盒子里面没有这个事件类型</span></span><br><span class="line">            <span class="comment">// 那么我们直接添加进去</span></span><br><span class="line">            <span class="comment">// 并且让他的值是一个数组，再数组里面放上事件处理函数</span></span><br><span class="line">            <span class="keyword">this</span>.message[type] = [fn]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 证明消息盒子里面有这个事件类型</span></span><br><span class="line">            <span class="comment">// 那么我们直接向数组里面追加事件处理函数就行了</span></span><br><span class="line">            <span class="keyword">this</span>.message[type].push(fn)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    emit (type, ...arg) &#123;</span><br><span class="line">        <span class="comment">// 判断你之前有没有订阅过这个事件</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.message[type]) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果有，那么我们就处理一下参数</span></span><br><span class="line">        <span class="keyword">const</span> event = &#123;</span><br><span class="line">            type: type,</span><br><span class="line">            arg: arg || &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环执行为当前事件类型订阅的所有事件处理函数</span></span><br><span class="line">        <span class="keyword">this</span>.message[type].forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.call(<span class="keyword">this</span>, event)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    off (type, fn) &#123;</span><br><span class="line">        <span class="comment">// 判断你之前有没有订阅过这个事件</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.message[type]) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果有我们再进行移除</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.message[type].length; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> item =  <span class="keyword">this</span>.message[type][i]</span><br><span class="line">            <span class="keyword">if</span> (item === fn) &#123;</span><br><span class="line">                <span class="keyword">this</span>.message[type].splice(i, <span class="number">1</span>)</span><br><span class="line">                i--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>以上就是最基本的 <strong>观察者模式</strong></p></li><li><p>接下来我们就使用一下试试看</p></li></ul><h4 id="使用一下"><a href="#使用一下" class="headerlink" title="使用一下"></a>使用一下</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = <span class="keyword">new</span> Observer()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备两个事件处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'world'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅事件</span></span><br><span class="line">o.on(<span class="string">'abc'</span>, a)</span><br><span class="line">o.on(<span class="string">'abc'</span>, b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布事件（触发）</span></span><br><span class="line">o.emit(<span class="string">'abc'</span>, <span class="string">'100'</span>, <span class="string">'200'</span>, <span class="string">'300'</span>) <span class="comment">// 两个函数都回执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除事件</span></span><br><span class="line">o.off(<span class="string">'abc'</span>, <span class="string">'b'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再次发布事件（触发）</span></span><br><span class="line">o.emit(<span class="string">'abc'</span>, <span class="string">'100'</span>, <span class="string">'200'</span>, <span class="string">'300'</span>) <span class="comment">// 只执行一个 a 函数了</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;设计模式是我们在 &lt;strong&gt;解决问题的时候针对特定问题给出的简洁而优化的处理方案&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;我们有很多的设计模式&lt;ul&gt;
&lt;li&gt;单例模式&lt;/li&gt;
&lt;li&gt;组合模式&lt;/li&gt;
&lt;li&gt;观察者模式&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;今天我们就聊一下这三个设计模式&lt;ul&gt;
&lt;li&gt;单例模式 / 组合模式 / 观察者模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;什么是单例模式呢？&lt;/li&gt;
&lt;li&gt;我们都知道，构造函数可以创造一个对象&lt;/li&gt;
&lt;li&gt;我们 new 很多次构造函数就能得到很多的对象&lt;/li&gt;
&lt;li&gt;单例模式： 就是使用构造函数实例化的时候，不管实例化多少回，都是同一个对象&lt;ul&gt;
&lt;li&gt;也就是一个构造函数一生只能 new 出一个对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;也就是说，当我们使用构造函数，每一次 new 出来的对象 属性/功能/方法 &lt;strong&gt;完全一样&lt;/strong&gt; 的时候，我们把他设计成单例模式&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="千锋" scheme="http://yoursite.com/categories/千锋/"/>
    
    
  </entry>
  
  <entry>
    <title>DAY6-1_闭包和继承</title>
    <link href="http://yoursite.com/2021/11/03/DAY6-1-%E9%97%AD%E5%8C%85%E5%92%8C%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2021/11/03/DAY6-1-%E9%97%AD%E5%8C%85%E5%92%8C%E7%BB%A7%E6%89%BF/</id>
    <published>2021-11-03T02:49:03.000Z</published>
    <updated>2021-11-03T02:49:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><ul><li>闭包是我们函数的一种高级使用方式</li><li>在聊闭包之前我们要先回顾一下 <strong>函数</strong></li></ul><h2 id="函数的两个阶段"><a href="#函数的两个阶段" class="headerlink" title="函数的两个阶段"></a>函数的两个阶段</h2><ul><li>我们一直说函数有两个阶段<ol><li>定义阶段</li><li>调用阶段</li></ol></li></ul><h3 id="函数定义阶段"><a href="#函数定义阶段" class="headerlink" title="函数定义阶段"></a>函数定义阶段</h3><ol><li>开辟一个 <strong>存储空间</strong></li><li>把函数体内的代码一模一样的放在这个空间内（不解析变量）</li><li>把 <strong>存储空间</strong> 的地址给函数名</li></ol><h3 id="函数调用阶段"><a href="#函数调用阶段" class="headerlink" title="函数调用阶段"></a>函数调用阶段</h3><ol><li>按照函数名的地址找到函数的 <strong>存储空间</strong></li><li>形参赋值</li><li>预解析</li><li>将函数 <strong>存储空间</strong> 中的代码拿出来执行（才解析变量）</li></ol><a id="more"></a><h3 id="重新定义函数调用阶段"><a href="#重新定义函数调用阶段" class="headerlink" title="重新定义函数调用阶段"></a>重新定义函数调用阶段</h3><ol><li><p>按照函数名的地址找到函数的 <strong>存储空间</strong></p></li><li><p>形参赋值</p></li><li><p>预解析</p></li><li><p>在内存中开辟一个 <strong>执行空间</strong></p></li><li><p>将函数 <strong>存储空间</strong> 中的代码拿出来在刚刚开辟的 <strong>执行空间</strong> 中执行</p></li><li><p>执行完毕后，内存中开辟的 <strong>执行空间</strong> 销毁</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我是 fn 函数'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure><ul><li>函数执行的时候会开辟一个 <strong>执行空间</strong> （我们暂且叫他 <code>xxff00</code>）</li><li><code>console.log(&#39;我是 fn 函数&#39;)</code> 这个代码就是在 <code>xxff00</code> 这个空间中执行</li><li>代码执行完毕以后，这个 <code>xxff00</code> 空间就销毁了</li></ul></li></ol><h2 id="函数执行空间"><a href="#函数执行空间" class="headerlink" title="函数执行空间"></a>函数执行空间</h2><ul><li>每一个函数会有一个 <strong>存储空间</strong></li><li>但是每一次调用都会生成一个完全不一样的 <strong>执行空间</strong></li><li>并且 <strong>执行空间</strong> 会在函数执行完毕后就销毁了，但是 <strong>存储空间</strong> 不会</li><li>那么这个函数空间执行完毕就销毁了，还有什么意义呢？<ul><li>我们可以有一些办法让这个空间 <strong>不销毁</strong></li><li><strong>闭包</strong>，就是要利用这个 <strong>不销毁的执行空间</strong></li></ul></li></ul><h3 id="函数执行空间不销毁"><a href="#函数执行空间不销毁" class="headerlink" title="函数执行空间不销毁"></a>函数执行空间不销毁</h3><ul><li><p>函数的 <strong>执行空间</strong> 会在函数执行完毕之后销毁</p></li><li><p>但是，一旦函数内部返回了一个 <strong>引用数据类型</strong>，并且 <strong>在函数外部有变量接受</strong> 的情况下</p></li><li><p>那么这个函数 <strong>执行空间</strong> 就不会销毁了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;</span><br><span class="line">      name: <span class="string">'Jack'</span>,</span><br><span class="line">      age: <span class="number">18</span>,</span><br><span class="line">      gender: <span class="string">'男'</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = fn()</span><br></pre></td></tr></table></figure><ul><li>函数执行的时候，会生成一个函数 <strong>执行空间</strong> （我们暂且叫他 <code>xxff00</code>）</li><li>代码在 <code>xxff00</code> 空间中执行</li><li>在 <code>xxff00</code> 这个空间中声名了一个 对象空间（<code>xxff11</code>）</li><li>在 <code>xxff00</code> 这个执行空间把 <code>xxff11</code> 这个对象地址返回了</li><li>函数外部 <code>0</code> 接受的是一个对象的地址没错<ul><li>但是是一个在 <code>xxff00</code> 函数执行空间中的 <code>xxff11</code> 对象地址</li><li>因为 <code>o</code> 变量一直在和这个对象地址关联着，所以 <code>xxff00</code> 这个空间一直不会销毁</li></ul></li><li>等到什么时候，执行一句代码 <code>o = null</code><ul><li>此时， <code>o</code> 变量比在关联在 <code>xxff00</code> 函数执行空间中的 <code>xxff11</code> 对象地址</li><li>那么，这个时候函数执行空间 <code>xxff00</code> 就销毁了</li></ul></li></ul></li></ul><h2 id="闭包-1"><a href="#闭包-1" class="headerlink" title="闭包"></a>闭包</h2><ul><li>闭包就是利用了这个函数执行空间不销毁的逻辑</li><li>有几个条件组成闭包</li></ul><h3 id="不销毁的空间"><a href="#不销毁的空间" class="headerlink" title="不销毁的空间"></a>不销毁的空间</h3><ul><li><p>闭包的第一个条件就是利用了不销毁空间的逻辑</p></li><li><p>只不过不是返回一个 <strong>对象数据类型</strong></p></li><li><p>而是返回一个 <strong>函数数据类型</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = fn()</span><br></pre></td></tr></table></figure><ul><li><code>f</code> 变量接受的就是一个 <strong>fn的执行空间</strong> 中的 函数</li></ul></li></ul><h3 id="内部函数引用外部函数中的变量"><a href="#内部函数引用外部函数中的变量" class="headerlink" title="内部函数引用外部函数中的变量"></a>内部函数引用外部函数中的变量</h3><ul><li><p>涉及到两个函数</p></li><li><p>内部函数要查看或者使用着外部函数的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> num = <span class="number">100</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 这个函数给一个名字，方便写笔记</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = fn()</span><br></pre></td></tr></table></figure><ul><li><code>fn()</code> 的时候会生成一个 <code>xxff00</code> 的执行空间</li><li>再 <code>xxff00</code> 这个执行空间内部，定义了一个 <code>a</code> 函数的 <strong>存储空间</strong> <code>xxff11</code></li><li>全局 f 变量接受的就是 <code>xxff00</code> 里面的 <code>xxff11</code> </li><li>所以 <code>xxff00</code> 就是不会销毁的空间</li><li>因为 <code>xxff00</code> 不会销毁，所以，定义再里面的变量 num 也不会销毁</li><li>将来 <code>f()</code> 的时候，就能访问到 num 变量</li></ul></li></ul><h3 id="闭包的特点"><a href="#闭包的特点" class="headerlink" title="闭包的特点"></a>闭包的特点</h3><ul><li>为什么要叫做特点，就是因为他的每一个点都是优点同时也是缺点<ol><li>作用域空间不销毁<ul><li>优点： 因为不销毁，变量页不会销毁，增加了变量的生命周期</li><li>缺点： 因为不销毁，会一直占用内存，多了以后就会导致内存溢出</li></ul></li><li>可以利用闭包访问再一个函数外部访问函数内部的变量<ul><li>优点： 可以再函数外部访问内部数据</li><li>缺点： 必须要时刻保持引用，导致函数执行栈不被销毁</li></ul></li><li>保护私有变量<ul><li>优点： 可以把一些变量放在函数里面，不会污染全局</li><li>缺点： 要利用闭包函数才能访问，不是很方便</li></ul></li></ol></li></ul><h3 id="闭包概念（熟读并背诵全文）"><a href="#闭包概念（熟读并背诵全文）" class="headerlink" title="闭包概念（熟读并背诵全文）"></a>闭包概念（熟读并背诵全文）</h3><ul><li>有一个 A 函数，再 A 函数内部返回一个 B 函数</li><li>再 A 函数外部有变量引用这个 B 函数</li><li>B 函数内部访问着 A 函数内部的私有变量</li><li>以上三个条件缺一不可</li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><ul><li>继承是和构造函数相关的一个应用</li><li>是指，<strong>让一个构造函数去继承另一个构造函数的属性和方法</strong></li><li>所以继承一定出现在 <strong>两个构造函数之间</strong></li></ul><h3 id="一个小例子"><a href="#一个小例子" class="headerlink" title="一个小例子"></a>一个小例子</h3><ul><li>我们之前说，构造函数（类）是对一类行为的描述</li><li>那么我们类这个概念其实也很抽象</li><li>比如：<ul><li>我们说 <code>国光</code> / <code>富士</code> 都是 苹果的品种，那么我们就可以写一个 <code>苹果类</code> 来实例化很多品种出来</li><li>而 <code>苹果</code> / <code>梨</code> 这些东西都是水果的一种，那么我们就可以写一个 <code>水果类</code></li><li>说过的统一特点就是 <code>甜</code> / <code>水分大</code> ，而不同的水果有不同的特征</li><li>那么我们就可以让 <code>苹果类</code> 来继承 <code>水果类</code> 的内容，然后再用 <code>水果类</code> 去实例化对象</li><li>那么实例化出来的就不光有 <code>苹果类</code> 的属性和方法，还有 <code>水果类</code> 的属性和方法</li></ul></li></ul><h3 id="继承的作用"><a href="#继承的作用" class="headerlink" title="继承的作用"></a>继承的作用</h3><ul><li><p>其实说到底，到底什么是继承</p></li><li><p>我们之前说，在我们书写构造函数的时候，为了解决一个函数重复出现的问题</p></li><li><p>我们把构造函数的 <strong>方法</strong> 写在了 <code>prototype</code> 上</p><p><img src="J:/课程资料/week6/assets/构造函数.png" alt></p></li><li><p>这样，每一个实例使用的方法就都是来自构造函数的 <code>prototype</code> 上</p></li><li><p>就避免了函数重复出现占用内存得到情况</p></li><li><p>那么，如果两个构造函数的 prototype 中有一样的方法呢，是不是也是一种浪费</p></li><li><p>所以我们把构造函数䣌 prototype 中的公共的方法再次尽心提取</p><p><img src="J:/课程资料/week6/assets/继承.png" alt></p></li><li><p>我们准备一个更公共的构造函数，让构造函数的 <code>__proto__</code> 指向这个公共的构造函数的 <code>prototype</code> </p></li></ul><h3 id="常见的继承方式"><a href="#常见的继承方式" class="headerlink" title="常见的继承方式"></a>常见的继承方式</h3><ul><li><p>我们有一些常见的继承方式来实现和达到继承的效果</p></li><li><p>我们先准备一个父类（也就是要让别的构造函数使用我这个构造函数的属性和方法）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'Jack'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    cosnole.log(<span class="string">'hello'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个 <code>Person</code> 构造函数为父类</p></li><li><p>让其他的构造函数来继承他</p></li><li><p>当别的构造函数能够使用他的属性和方法的时候，就达到了继承的效果</p></li></ul><h4 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h4><ul><li><p>原型继承，就是在本身的原型链上加一层结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure></li></ul><h4 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h4><ul><li><p>把父类构造函数体借用过来使用一下而已</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><ul><li><p>就是把 <code>原型继承</code> 和 <code>借用构造函数继承</code> 两个方式组合在一起</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person</span><br></pre></td></tr></table></figure></li></ul><h3 id="ES6-的继承"><a href="#ES6-的继承" class="headerlink" title="ES6 的继承"></a>ES6 的继承</h3><ul><li><p>es6 的继承很容易，而且是固定语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面表示创造一个 Student 类，继承自 Person 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> () &#123;</span><br><span class="line">        <span class="comment">// 必须在 constructor 里面执行一下 super() 完成继承 </span></span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这样就继承成功了</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;闭包是我们函数的一种高级使用方式&lt;/li&gt;
&lt;li&gt;在聊闭包之前我们要先回顾一下 &lt;strong&gt;函数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;函数的两个阶段&quot;&gt;&lt;a href=&quot;#函数的两个阶段&quot; class=&quot;headerlink&quot; title=&quot;函数的两个阶段&quot;&gt;&lt;/a&gt;函数的两个阶段&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我们一直说函数有两个阶段&lt;ol&gt;
&lt;li&gt;定义阶段&lt;/li&gt;
&lt;li&gt;调用阶段&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;函数定义阶段&quot;&gt;&lt;a href=&quot;#函数定义阶段&quot; class=&quot;headerlink&quot; title=&quot;函数定义阶段&quot;&gt;&lt;/a&gt;函数定义阶段&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;开辟一个 &lt;strong&gt;存储空间&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;把函数体内的代码一模一样的放在这个空间内（不解析变量）&lt;/li&gt;
&lt;li&gt;把 &lt;strong&gt;存储空间&lt;/strong&gt; 的地址给函数名&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;函数调用阶段&quot;&gt;&lt;a href=&quot;#函数调用阶段&quot; class=&quot;headerlink&quot; title=&quot;函数调用阶段&quot;&gt;&lt;/a&gt;函数调用阶段&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;按照函数名的地址找到函数的 &lt;strong&gt;存储空间&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;形参赋值&lt;/li&gt;
&lt;li&gt;预解析&lt;/li&gt;
&lt;li&gt;将函数 &lt;strong&gt;存储空间&lt;/strong&gt; 中的代码拿出来执行（才解析变量）&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="千锋" scheme="http://yoursite.com/categories/千锋/"/>
    
    
  </entry>
  
  <entry>
    <title>DAY5-4_Promise</title>
    <link href="http://yoursite.com/2021/11/03/DAY5-4-Promise/"/>
    <id>http://yoursite.com/2021/11/03/DAY5-4-Promise/</id>
    <published>2021-11-03T02:47:07.000Z</published>
    <updated>2021-11-03T02:47:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="封装-AJAX"><a href="#封装-AJAX" class="headerlink" title="封装 AJAX"></a>封装 AJAX</h1><ul><li>ajax 使用起来太麻烦，因为每次都要写很多的代码</li><li>那么我们就封装一个 ajax 方法来让我们使用起来简单一些</li></ul><h2 id="确定一下使用的方式"><a href="#确定一下使用的方式" class="headerlink" title="确定一下使用的方式"></a>确定一下使用的方式</h2><ul><li><p>因为有一些内容可以不传递，我们可以使用默认值，所以选择对象传递参数的方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用的时候直接调用，传递一个对象就可以</span></span><br><span class="line">ajax(&#123;</span><br><span class="line">  url: <span class="string">''</span>, <span class="comment">// 请求的地址</span></span><br><span class="line">  type: <span class="string">''</span>, <span class="comment">// 请求方式</span></span><br><span class="line">  <span class="keyword">async</span>: <span class="string">''</span>, <span class="comment">// 是否异步</span></span><br><span class="line">  data: <span class="string">''</span>, <span class="comment">// 携带的参数</span></span><br><span class="line">  dataType: <span class="string">''</span>, <span class="comment">// 要不要执行 json.parse</span></span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 成功以后执行的函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>确定好使用方式以后，就开始书写封装函数</li></ul></li></ul><a id="more"></a><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 先准备一个默认值</span></span><br><span class="line">  <span class="keyword">var</span> defInfo = &#123;</span><br><span class="line">    url: <span class="string">''</span>, <span class="comment">// 地址不需要默认值</span></span><br><span class="line">    type: <span class="string">'GET'</span>, <span class="comment">// 请求方式的默认值是 GET</span></span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">false</span>, <span class="comment">// 默认值是异步</span></span><br><span class="line">    data: <span class="string">''</span>, <span class="comment">// 参数没有默认值</span></span><br><span class="line">    dataType: <span class="string">'string'</span>, <span class="comment">// 默认不需要执行 json.parse</span></span><br><span class="line">    success () &#123;&#125;, <span class="comment">// 默认是一个函数</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 先来判断一下有没有传递 url，如果没有，直接抛出异常</span></span><br><span class="line">  <span class="keyword">if</span> (!options.url) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'url 必须传递'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 有了 url 以后就，我们就把用户传递的参数和我们的默认数据合并</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> options) &#123;</span><br><span class="line">    defInfo[key] = options[key]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 接下来的一切我们都是使用我们的 defInfo 就可以了</span></span><br><span class="line">  <span class="comment">// 第一步就是判断参数 data</span></span><br><span class="line">  <span class="comment">// data 可以不传递，可以为空</span></span><br><span class="line">  <span class="comment">// data 也可以是一个 key=value&amp;key=value 格式的字符串</span></span><br><span class="line">  <span class="comment">// data 也可以是一个对象</span></span><br><span class="line">  <span class="comment">// 否则就抛出异常</span></span><br><span class="line">  <span class="keyword">if</span> (!(<span class="keyword">typeof</span> defInfo.data === <span class="string">'string'</span> &amp;&amp; <span class="regexp">/^(\w+=\w+&amp;?)*$/</span>.test(defInfo.data) || <span class="built_in">Object</span>.prototype.toString.call(defInfo.data) === <span class="string">'[object Object]'</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请按照要求传递参数'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 参数处理完毕以后，在判断 async 的数据类型</span></span><br><span class="line">  <span class="comment">// 只能传递 布尔数据类型</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> defInfo.async !== <span class="string">'boolean'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'async 参数只接受布尔数据类型'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在接下来就判断 type</span></span><br><span class="line">  <span class="comment">// 请求方式我们只接受 GET 或着 POST</span></span><br><span class="line">  <span class="keyword">if</span> (!(defInfo.type.toUpperCase() === <span class="string">'GET'</span> || defInfo.type.toUpperCase() === <span class="string">'POST'</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'目前本插件只接受 GET 和 POST 方式，请期待更新'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 接下来就是判断 success 的判断，必须是一个函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(defInfo.success) !== <span class="string">'[object Function]'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'success 只接受函数数据类型'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 参数都没有问题了</span></span><br><span class="line">  <span class="comment">// 我们就要把 data 处理一下了</span></span><br><span class="line">  <span class="comment">// 因为 data 有可能是对象，当 data 是一个对象的时候，我们要把它转换成一个字符串</span></span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">''</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(defInfo.data) === <span class="string">'[object Object]'</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">in</span> defInfo.data) &#123;</span><br><span class="line">      str += <span class="string">`<span class="subst">$&#123;attr&#125;</span>=<span class="subst">$&#123;defInfo.data[attr]&#125;</span>&amp;`</span></span><br><span class="line">    &#125;</span><br><span class="line">    str = str.slice(<span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">    defInfo.data = str</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 参数全部验证过了以后，我们就可以开始进行正常的 ajax 请求了</span></span><br><span class="line">  <span class="comment">// 1. 准备一个 ajax 对象</span></span><br><span class="line">  <span class="comment">//    因为要处理兼容问题，所以我们准备一个函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (XMLHttpRequest) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 创建一个 ajax 对象</span></span><br><span class="line">  <span class="keyword">var</span> xhr = createXHR()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 进行 open</span></span><br><span class="line">  xhr.open(defInfo.type, defInfo.url + (defInfo.type.toUpperCase() === <span class="string">'GET'</span> ? <span class="string">`?<span class="subst">$&#123;defInfo.data&#125;</span>&amp;_=<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&#125;</span>`</span> : <span class="string">''</span>), defInfo.async)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (defInfo.type.toUpperCase() === <span class="string">'POST'</span>) &#123;</span><br><span class="line">    xhr.setRequestHeader(<span class="string">'content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 进行 send</span></span><br><span class="line">  xhr.send((defInfo.type.toUpperCase() === <span class="string">'POST'</span> ? <span class="string">`<span class="subst">$&#123;defInfo.data&#125;</span>`</span> : <span class="string">''</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5. 接受响应</span></span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; <span class="regexp">/2\d&#123;2&#125;/</span>.test(xhr.status)) &#123;</span><br><span class="line">      <span class="comment">// 表示成功，我们就要执行 success</span></span><br><span class="line">      <span class="comment">// 但是要进行 dataType 的判断</span></span><br><span class="line">      <span class="keyword">if</span> (defInfo.dataType === <span class="string">'json'</span>) &#123;</span><br><span class="line">        defInfo.success(<span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        defInfo.success()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><ul><li><code>promise</code> 是一个 ES6 的语法</li><li>承诺的意思，是一个专门用来解决异步 <strong>回调地狱</strong> 的问题</li></ul><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><ul><li><p>什么是回调函数？</p></li><li><p>就是把函数 A 当作参数传递到 函数 B 中</p></li><li><p>在函数 B 中以行参的方式进行调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我是函数 b'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a(b)</span><br></pre></td></tr></table></figure></li><li><p>为什么需要回调函数</p><ul><li>当我们执行一个异步的行为的时候，我们需要在一个异步行为执行完毕之后做一些事情</li><li>那么，我们是没有办法提前预知这个异步行为是什么时候完成的</li><li>我们就只能以回调函数的形式来进行</li><li>就比如我们刚刚封装过的那个 <code>ajax</code> 函数里面的 <code>success</code> </li><li>我们并不知道 ajax 请求什么时候完成，所以就要以回调函数的形式来进行</li></ul></li></ul><h2 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h2><ul><li><p>当一个回调函数嵌套一个回调函数的时候</p></li><li><p>就会出现一个嵌套结构</p></li><li><p>当嵌套的多了就会出现回调地狱的情况</p></li><li><p>比如我们发送三个 ajax 请求</p><ul><li>第一个正常发送</li><li>第二个请求需要第一个请求的结果中的某一个值作为参数</li><li>第三个请求需要第二个请求的结果中的某一个值作为参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ajax(&#123;</span><br><span class="line">  url: <span class="string">'我是第一个请求'</span>,</span><br><span class="line">  success (res) &#123;</span><br><span class="line">    <span class="comment">// 现在发送第二个请求</span></span><br><span class="line">    ajax(&#123;</span><br><span class="line">      url: <span class="string">'我是第二个请求'</span>，</span><br><span class="line">      data: &#123; <span class="attr">a</span>: res.a, <span class="attr">b</span>: res.b &#125;,</span><br><span class="line">      success (res2) &#123;</span><br><span class="line">        <span class="comment">// 进行第三个请求</span></span><br><span class="line">        ajax(&#123;</span><br><span class="line">          url: <span class="string">'我是第三个请求'</span>,</span><br><span class="line">          data: &#123; <span class="attr">a</span>: res2.a, <span class="attr">b</span>: res2.b &#125;,</span><br><span class="line">  success (res3) &#123; </span><br><span class="line">            <span class="built_in">console</span>.log(res3) </span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>回调地狱，其实就是回调函数嵌套过多导致的</strong></p></li></ul><p><img src="J:/课程资料/week5/assets/回调地狱.jpeg" alt></p><ul><li>当代码成为这个结构以后，已经没有维护的可能了</li><li>所以我们要把代码写的更加的艺术一些</li></ul><h2 id="PROMISE"><a href="#PROMISE" class="headerlink" title="PROMISE"></a>PROMISE</h2><ul><li><p>为了解决回调地狱</p></li><li><p>我们就要使用 promise 语法</p></li><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// resolve 表示成功的回调</span></span><br><span class="line">  <span class="comment">// reject 表示失败的回调</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 成功的函数</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 失败的函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>promise 就是一个语法</p><ul><li>我们的每一个异步事件，在执行的时候</li><li>都会有三个状态，执行中 / 成功 / 失败</li></ul></li><li><p>因为它包含了成功的回调函数</p></li><li><p>所以我们就可以使用 promise 来解决多个 ajax 发送的问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  ajax(&#123;</span><br><span class="line">    url: <span class="string">'第一个请求'</span>,</span><br><span class="line">    success (res) &#123;</span><br><span class="line">      resolve(res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 准备发送第二个请求</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    ajax(&#123;</span><br><span class="line">      url: <span class="string">'第二个请求'</span>,</span><br><span class="line">      data: &#123; <span class="attr">a</span>: res.a, <span class="attr">b</span>: res.b &#125;,</span><br><span class="line">      success (res) &#123;</span><br><span class="line">        resolve(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">  ajax(&#123;</span><br><span class="line">    url: <span class="string">'第三个请求'</span>,</span><br><span class="line">    data: &#123; <span class="attr">a</span>: res.a, <span class="attr">b</span>: res.b &#125;,</span><br><span class="line">    success (res) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>这个时候，我们的代码已经改观了很多了</p></li><li><p>基本已经可以维护了</p></li><li><p>但是对于一个程序员来说，这个样子是不够的</p></li><li><p>我们还需要更加的简化代码</p></li><li><p>所以我们就需要用到一个 es7 的语法了</p></li><li><p>叫做 async/await </p></li></ul><h1 id="ASYNC-AWAIT"><a href="#ASYNC-AWAIT" class="headerlink" title="ASYNC/AWAIT"></a>ASYNC/AWAIT</h1><ul><li><p><code>async/await</code> 是一个 es7 的语法</p></li><li><p>这个语法是 <strong>回调地狱的终极解决方案</strong></p></li><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> promise对象</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个是一个特殊的函数方式</p></li><li><p>可以 await 一个 promise 对象</p></li><li><p><strong>可以把异步代码写的看起来像同步代码</strong></p></li><li><p>只要是一个 promiser 对象，那么我们就可以使用 <code>async/await</code> 来书写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    ajax(&#123;</span><br><span class="line">      url: <span class="string">'第一个地址'</span>,</span><br><span class="line">      success (res) &#123;</span><br><span class="line">        resolve(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// res 就可以得到请求的结果</span></span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    ajax(&#123;</span><br><span class="line">      url: <span class="string">'第二个地址'</span>,</span><br><span class="line">      data: &#123; <span class="attr">a</span>: res.a, <span class="attr">b</span>: res.b &#125;,</span><br><span class="line">      success (res) &#123;</span><br><span class="line">        resolve(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> res3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    ajax(&#123;</span><br><span class="line">      url: <span class="string">'第三个地址'</span>,</span><br><span class="line">      data: &#123; <span class="attr">a</span>: res2.a, <span class="attr">b</span>: res2.b &#125;,</span><br><span class="line">      success (res) &#123;</span><br><span class="line">        resolve(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// res3 就是我们要的结果</span></span><br><span class="line">  <span class="built_in">console</span>.log(res3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这样的异步代码写的就看起来像一个同步代码了</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;封装-AJAX&quot;&gt;&lt;a href=&quot;#封装-AJAX&quot; class=&quot;headerlink&quot; title=&quot;封装 AJAX&quot;&gt;&lt;/a&gt;封装 AJAX&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;ajax 使用起来太麻烦，因为每次都要写很多的代码&lt;/li&gt;
&lt;li&gt;那么我们就封装一个 ajax 方法来让我们使用起来简单一些&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;确定一下使用的方式&quot;&gt;&lt;a href=&quot;#确定一下使用的方式&quot; class=&quot;headerlink&quot; title=&quot;确定一下使用的方式&quot;&gt;&lt;/a&gt;确定一下使用的方式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;因为有一些内容可以不传递，我们可以使用默认值，所以选择对象传递参数的方式&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用的时候直接调用，传递一个对象就可以&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ajax(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  url: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 请求的地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  type: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 请求方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 是否异步&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  data: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 携带的参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  dataType: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 要不要执行 json.parse&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  success: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125; &lt;span class=&quot;comment&quot;&gt;// 成功以后执行的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;确定好使用方式以后，就开始书写封装函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="千锋" scheme="http://yoursite.com/categories/千锋/"/>
    
    
  </entry>
  
  <entry>
    <title>DAY5-3_AJAX</title>
    <link href="http://yoursite.com/2021/11/03/DAY5-3-AJAX/"/>
    <id>http://yoursite.com/2021/11/03/DAY5-3-AJAX/</id>
    <published>2021-11-03T02:46:02.000Z</published>
    <updated>2021-11-10T02:46:42.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><ul><li><code>ajax</code> 全名 <code>async javascript and XML</code></li><li>是前后台交互的能力</li><li>也就是我们客户端给服务端发送消息的工具，以及接受响应的工具</li><li>是一个 <strong>默认异步</strong> 执行机制的功能</li></ul><h2 id="AJAX-的优势"><a href="#AJAX-的优势" class="headerlink" title="AJAX 的优势"></a>AJAX 的优势</h2><ol><li>不需要插件的支持，原生 js 就可以使用</li><li>用户体验好（不需要刷新页面就可以更新数据）</li><li>减轻服务端和带宽的负担</li><li>缺点： 搜索引擎的支持度不够，因为数据都不在页面上，搜索引擎搜索不到</li></ol><a id="more"></a><h2 id="AJAX-的使用"><a href="#AJAX-的使用" class="headerlink" title="AJAX 的使用"></a>AJAX 的使用</h2><ul><li>在 js 中有内置的构造函数来创建 ajax 对象</li><li>创建 ajax 对象以后，我们就使用 ajax 对象的方法去发送请求和接受响应</li></ul><h3 id="创建一个-ajax-对象"><a href="#创建一个-ajax-对象" class="headerlink" title="创建一个 ajax 对象"></a>创建一个 ajax 对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IE9及以上</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line"><span class="comment">// IE9以下</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">'Mricosoft.XMLHTTP'</span>)</span><br></pre></td></tr></table></figure><ul><li>上面就是有了一个 ajax 对象</li><li>我们就可以使用这个 <code>xhr</code> 对象来发送 ajax 请求了</li></ul><h3 id="配置链接信息"><a href="#配置链接信息" class="headerlink" title="配置链接信息"></a>配置链接信息</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line"><span class="comment">// xhr 对象中的 open 方法是来配置请求信息的</span></span><br><span class="line"><span class="comment">// 第一个参数是本次请求的请求方式 get / post / put / ...</span></span><br><span class="line"><span class="comment">// 第二个参数是本次请求的 url </span></span><br><span class="line"><span class="comment">// 第三个参数是本次请求是否异步，默认 true 表示异步，false 表示同步</span></span><br><span class="line"><span class="comment">// xhr.open('请求方式', '请求地址', 是否异步)</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'./data.php'</span>)</span><br></pre></td></tr></table></figure><ul><li>上面的代码执行完毕以后，本次请求的基本配置信息就写完了</li></ul><h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'./data.php'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 xhr 对象中的 send 方法来发送请求</span></span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure><ul><li>上面代码是把配置好信息的 ajax 对象发送到服务端</li></ul><h3 id="一个基本的-ajax-请求"><a href="#一个基本的-ajax-请求" class="headerlink" title="一个基本的 ajax 请求"></a>一个基本的 ajax 请求</h3><ul><li>一个最基本的 ajax 请求就是上面三步</li><li>但是光有上面的三个步骤，我们确实能把请求发送的到服务端</li><li>如果服务端正常的话，响应也能回到客户端</li><li>但是我们拿不到响应</li><li>如果想拿到响应，我们有两个前提条件<ol><li>本次 HTTP 请求是成功的，也就是我们之前说的 http 状态码为 200 ~ 299</li><li>ajax 对象也有自己的状态码，用来表示本次 ajax 请求中各个阶段</li></ol></li></ul><h3 id="ajax-状态码"><a href="#ajax-状态码" class="headerlink" title="ajax 状态码"></a>ajax 状态码</h3><ul><li>ajax 状态码 - <code>xhr.readyState</code></li><li>是用来表示一个 ajax 请求的全部过程中的某一个状态<ul><li><code>readyState === 0</code>：  表示未初始化完成，也就是 <code>open</code> 方法还没有执行</li><li><code>readyState === 1</code>：  表示配置信息已经完成，也就是执行完 <code>open</code> 之后</li><li><code>readyState === 2</code>：  表示 <code>send</code> 方法已经执行完成</li><li><code>readyState === 3</code>：  表示正在解析响应内容</li><li><code>readyState === 4</code>：  表示响应内容已经解析完毕，可以在客户端使用了</li></ul></li><li>这个时候我们就会发现，当一个 ajax 请求的全部过程中，只有当 <code>readyState === 4</code> 的时候，我们才可以正常使用服务端给我们的数据</li><li>所以，配合 http 状态码为 200 ~ 299 <ul><li>一个 ajax 对象中有一个成员叫做 <code>xhr.status</code> </li><li>这个成员就是记录本次请求的 http 状态码的</li></ul></li><li>两个条件都满足的时候，才是本次请求正常完成</li></ul><h3 id="readyStateChange"><a href="#readyStateChange" class="headerlink" title="readyStateChange"></a>readyStateChange</h3><ul><li><p>在 ajax 对象中有一个事件，叫做 <code>readyStateChange</code> 事件</p></li><li><p>这个事件是专门用来监听 ajax 对象的 <code>readyState</code> 值改变的的行为</p></li><li><p>也就是说只要 <code>readyState</code> 的值发生变化了，那么就会触发该事件</p></li><li><p>所以我们就在这个事件中来监听 ajax 的 <code>readyState</code> 是不是到 4 了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'./data.php'</span>)</span><br><span class="line"></span><br><span class="line">xhr.send()</span><br><span class="line"></span><br><span class="line">xhr.onreadyStateChange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 每次 readyState 改变的时候都会触发该事件</span></span><br><span class="line">  <span class="comment">// 我们就在这里判断 readyState 的值是不是到 4</span></span><br><span class="line">  <span class="comment">// 并且 http 的状态码是不是 200 ~ 299</span></span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; <span class="regexp">/^2\d&#123;2|$/</span>.test(xhr.status)) &#123;</span><br><span class="line">    <span class="comment">// 这里表示验证通过</span></span><br><span class="line">    <span class="comment">// 我们就可以获取服务端给我们响应的内容了</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="responseText"><a href="#responseText" class="headerlink" title="responseText"></a>responseText</h3><ul><li><p>ajax 对象中的 <code>responseText</code> 成员</p></li><li><p>就是用来记录服务端给我们的响应体内容的</p></li><li><p>所以我们就用这个成员来获取响应体内容就可以</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'./data.php'</span>)</span><br><span class="line"></span><br><span class="line">xhr.send()</span><br><span class="line"></span><br><span class="line">xhr.onreadyStateChange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; <span class="regexp">/^2\d&#123;2|$/</span>.test(xhr.status)) &#123;</span><br><span class="line">    <span class="comment">// 我们在这里直接打印 xhr.responseText 来查看服务端给我们返回的内容</span></span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用-ajax-发送请求时携带参数"><a href="#使用-ajax-发送请求时携带参数" class="headerlink" title="使用 ajax 发送请求时携带参数"></a>使用 ajax 发送请求时携带参数</h2><ul><li>我们使用 ajax 发送请求也是可以携带参数的</li><li>参数就是和后台交互的时候给他的一些信息</li><li>但是携带参数 get 和 post 两个方式还是有区别的</li></ul><h3 id="发送一个带有参数的-get-请求"><a href="#发送一个带有参数的-get-请求" class="headerlink" title="发送一个带有参数的 get 请求"></a>发送一个带有参数的 get 请求</h3><ul><li><p>get 请求的参数就直接在 url 后面进行拼接就可以</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// 直接在地址后面加一个 ?，然后以 key=value 的形式传递</span></span><br><span class="line"><span class="comment">// 两个数据之间以 &amp; 分割</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'./data.php?a=100&amp;b=200'</span>)</span><br><span class="line"></span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure><ul><li>这样服务端就能接受到两个参数</li><li>一个是 a，值是 100</li><li>一个是 b，值是 200</li></ul></li></ul><h3 id="发送一个带有参数的-post-请求"><a href="#发送一个带有参数的-post-请求" class="headerlink" title="发送一个带有参数的 post 请求"></a>发送一个带有参数的 post 请求</h3><ul><li><p>post 请求的参数是携带在请求体中的，所以不需要再 url 后面拼接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'./data.php'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是用 ajax 对象发送 post 请求，必须要先设置一下请求头中的 content-type</span></span><br><span class="line"><span class="comment">// 告诉一下服务端我给你的是一个什么样子的数据格式</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">'content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求体直接再 send 的时候写在 () 里面就行</span></span><br><span class="line"><span class="comment">// 不需要问号，直接就是 'key=value&amp;key=value' 的形式</span></span><br><span class="line">xhr.send(<span class="string">'a=100&amp;b=200'</span>)</span><br></pre></td></tr></table></figure><ul><li><code>application/x-www-form-urlencoded</code> 表示的数据格式就是 <code>key=value&amp;key=value</code></li></ul></li></ul><h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><ul><li><strong>同源策略是由浏览器给的</strong></li><li>浏览器不允许我们向别人发送请求，只能向自己的服务器发送请求</li><li>当我们想向别人的服务器发送请求的时候，就会被浏览器阻止了</li><li>什么是 “别人的服务器” 呢？<ul><li><strong>当 请求协议/域名/端口号 有任意一个不同的时候，那么就算是别人的服务器</strong></li><li>这个时候就会触发同源策略</li></ul></li><li>我们管触发了 <strong>同源策略</strong> 的请求叫做跨域请求</li></ul><h1 id="实现一个跨域请求"><a href="#实现一个跨域请求" class="headerlink" title="实现一个跨域请求"></a>实现一个跨域请求</h1><ul><li>有的时候我们是需要实现跨域请求的</li><li>我们需要多个服务器给一个页面提供数据</li><li>那么这个时候我们就要想办法解决跨域问题</li></ul><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><ul><li><code>jsonp</code> 是我们实现跨域请求的手段，是把我们之前的东西组合在一起使用的技术手段而已</li><li>利用的是 script 标签来实现</li></ul><h3 id="script-标签的本质"><a href="#script-标签的本质" class="headerlink" title="script 标签的本质"></a>script 标签的本质</h3><ul><li>浏览器给我们提供了一个 <code>script</code> 标签</li><li>它的本质就是请求一个外部资源，是不受到同源策略的影响的</li><li>同时 <code>script</code> 标签的 <code>src</code> 属性，也是一种请求，也能被服务器接收到</li><li>并且：<ul><li><strong>script标签的src属性请求回来的东西是一个字符串，浏览器会把这个字符串当作 js 代码来执行</strong></li></ul></li><li>所以我们就可以利用这个 <code>script</code> 标签的 <code>src</code> 属性来进行跨域请求了</li></ul><h2 id="配置代理（了解）"><a href="#配置代理（了解）" class="headerlink" title="配置代理（了解）"></a>配置代理（了解）</h2><ul><li>代理，分成两种，正向代理和反向代理</li></ul><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><ul><li>有一个客户端需要向一个非同源的服务器B发送请求</li><li>我们搭建一个和客户端同源的服务器A</li><li>当客户端发送请求的时候，由服务器A来接受</li><li>再由服务器A向服务器B发送请求，因为 <strong>同源策略是由浏览器给的</strong>，服务器之间没有</li><li>服务器B接受到请求以后，会处理请求，并把响应返回给服务器A</li><li>再由服务器A把响应给到客户端就可以了</li><li>我们就可以用这个方式来进行跨域请求了</li></ul><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><ul><li>反向代理一般是用来做负载均衡的</li><li>当我请求一个服务器的时候，其实请求的是服务器端设置的代理服务器</li><li>由代理服务器把若干大量的请求分发给不同的服务器进行处理</li><li>再由服务器把响应给到代理服务器</li><li>代理服务器返回给客户端</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;AJAX&quot;&gt;&lt;a href=&quot;#AJAX&quot; class=&quot;headerlink&quot; title=&quot;AJAX&quot;&gt;&lt;/a&gt;AJAX&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ajax&lt;/code&gt; 全名 &lt;code&gt;async javascript and XML&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;是前后台交互的能力&lt;/li&gt;
&lt;li&gt;也就是我们客户端给服务端发送消息的工具，以及接受响应的工具&lt;/li&gt;
&lt;li&gt;是一个 &lt;strong&gt;默认异步&lt;/strong&gt; 执行机制的功能&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;AJAX-的优势&quot;&gt;&lt;a href=&quot;#AJAX-的优势&quot; class=&quot;headerlink&quot; title=&quot;AJAX 的优势&quot;&gt;&lt;/a&gt;AJAX 的优势&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;不需要插件的支持，原生 js 就可以使用&lt;/li&gt;
&lt;li&gt;用户体验好（不需要刷新页面就可以更新数据）&lt;/li&gt;
&lt;li&gt;减轻服务端和带宽的负担&lt;/li&gt;
&lt;li&gt;缺点： 搜索引擎的支持度不够，因为数据都不在页面上，搜索引擎搜索不到&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="千锋" scheme="http://yoursite.com/categories/千锋/"/>
    
    
  </entry>
  
  <entry>
    <title>DAY5-2_HTTP和COOKIE</title>
    <link href="http://yoursite.com/2021/11/03/DAY5-2-HTTP%E5%92%8CCOOKIE/"/>
    <id>http://yoursite.com/2021/11/03/DAY5-2-HTTP%E5%92%8CCOOKIE/</id>
    <published>2021-11-03T02:44:33.000Z</published>
    <updated>2021-11-03T02:44:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><ul><li><code>http</code> 是我们前后台交互的时候的传输协议（即超文本传输协议）</li></ul><h2 id="HTTP-的工作流程"><a href="#HTTP-的工作流程" class="headerlink" title="HTTP 的工作流程"></a>HTTP 的工作流程</h2><ol><li>和服务器建立链接</li><li>建立链接后，发送一个请求给服务器（请求）</li><li>服务器接受到请求以后进行相应的处理并给出一个回应（响应）</li><li>断开于服务器的链接</li></ol><h3 id="和服务器建立链接"><a href="#和服务器建立链接" class="headerlink" title="和服务器建立链接"></a>和服务器建立链接</h3><ul><li><p>怎么和服务器建立链接呢？</p></li><li><p>需要保证客户端的接受和发送正常，服务器端的接受和发送正常</p></li><li><p>这里就涉及到一个东西叫做 <code>TCP/IP</code> 协议</p></li><li><p>建立链接的主要步骤叫做 <code>三次握手</code></p><ol><li><p>客户端发送一个消息给到服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">此时：</span><br><span class="line">服务端知道了 客户端可以正常发送消息</span><br><span class="line">服务端知道了 服务端可以正常接受消息</span><br></pre></td></tr></table></figure></li><li><p>服务端回给客户端一个消息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">此时：</span><br><span class="line">服务端知道了 客户端可以正常发送消息</span><br><span class="line">服务端知道了 服务端可以正常接受消息</span><br><span class="line">客户端知道了 客户端可以正常发送消息</span><br><span class="line">客户端知道了 客户端可以正常接受消息</span><br><span class="line">客户端知道了 服务端可以正常接受消息</span><br><span class="line">客户端知道了 服务端可以正常发送消息</span><br></pre></td></tr></table></figure></li><li><p>客户端再回给服务端一个消息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">此时：</span><br><span class="line">服务端知道了 客户端可以正常发送消息</span><br><span class="line">服务端知道了 服务端可以正常接受消息</span><br><span class="line">客户端知道了 客户端可以正常发送消息</span><br><span class="line">客户端知道了 客户端可以正常接受消息</span><br><span class="line">客户端知道了 服务端可以正常接受消息</span><br><span class="line">客户端知道了 服务端可以正常发送消息</span><br><span class="line">服务端知道了 服务端可以正常发送消息</span><br><span class="line">服务端知道了 客户端可以正常接受消息</span><br></pre></td></tr></table></figure></li></ol></li><li><p>至此，依照 <code>TCP/IP</code> 协议的建立链接就建立好了</p></li><li><p>双方都知道双方可以正常收发消息</p></li><li><p>就可以进入到第二步，通讯了</p></li></ul><a id="more"></a><h3 id="发送一个请求"><a href="#发送一个请求" class="headerlink" title="发送一个请求"></a>发送一个请求</h3><ul><li><p>建立完链接以后就是发送请求的过程</p></li><li><p>我们的每一个请求都要把我们的所有信息都包含请求</p></li><li><p>每一个请求都会有一个 <code>请求报文</code></p></li><li><p>在 <code>请求报文</code> 中会包含我们所有的请求信息（也就是我们要和服务端说的话都在里面）</p></li><li><p>我们的请求报文中会包含几个东西</p><ol><li><p>请求行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /user HTTP/1.1</span><br><span class="line"><span class="meta">#</span> POST 请求方式</span><br><span class="line"><span class="meta">#</span> /user 请求URL（不包含域名）</span><br><span class="line"><span class="meta">#</span> HTTP/1.1 请求协议版本</span><br></pre></td></tr></table></figure></li><li><p>请求头（请求头都是键值对的形式出现的）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user-agent: Mozilla/5.0 # 产生请求的浏览器信息</span><br><span class="line">accept: application/json # 表示客户端希望接受的数据类型</span><br><span class="line">Content-Type: application/x-www-form-urlencoded # 客户端发送的实体数据格式</span><br><span class="line">Host: 127.0.0.1 # 请求的主机名（IP）</span><br></pre></td></tr></table></figure></li><li><p>请求空行（请求头和请求主体之间要留一个空白行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 就是一个空行</span><br></pre></td></tr></table></figure></li><li><p>请求体（本次请求携带的数据）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> GET 请求是没有请求体数据的</span><br><span class="line"><span class="meta">#</span> POST 请求才有请求体数据</span><br></pre></td></tr></table></figure></li></ol></li><li><p>接下来看一个完整的请求报文</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /user HTTP/1.1      # 请求行</span><br><span class="line">Host: www.user.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">accept: application/json</span><br><span class="line">User-agent: Mozilla/5.0.     # 以上是首部</span><br><span class="line"><span class="meta">#</span>（此处必须有一空行）  # 空行分割header和请求内容 </span><br><span class="line">name=world   # 请求体</span><br></pre></td></tr></table></figure></li></ul><h3 id="接受一个响应"><a href="#接受一个响应" class="headerlink" title="接受一个响应"></a>接受一个响应</h3><ul><li><p>客户端的请求发送到服务端以后</p></li><li><p>服务端进行对应的处理</p></li><li><p>会给我们返回一个响应</p></li><li><p>每一个响应都会有一个 <code>响应报文</code></p></li><li><p>在 <code>响应报文</code> 中会包含我们所有的响应信息（也就是服务端在接受到客户端请求以后，给我们的回信）</p></li><li><p>我们的 <code>响应报文</code> 中会包含几个信息</p><ol><li><p>状态行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line"><span class="meta">#</span> HTTP/1.1 服务器使用的 HTTP 协议版本</span><br><span class="line"><span class="meta">#</span> 200 响应状态码</span><br><span class="line"><span class="meta">#</span> OK 对响应状态码的简单解释</span><br></pre></td></tr></table></figure></li><li><p>响应头</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Date: Jan, 14 Aug 2019 12:42:30 GMT # 服务器时间</span><br><span class="line">Server: Apache/2.4.23 (Win32) OpenSSL/1.0.2j PHP/5.4.45 # 服务器类型</span><br><span class="line">Content-Type: text/html # 服务端给客户端的数据类型</span><br><span class="line">Content-Length: 11 # 服务端给客户端的数据长度</span><br></pre></td></tr></table></figure></li><li><p>响应体</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line"><span class="meta">#</span> 服务端给客户端的响应数据</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="断开于服务端的链接"><a href="#断开于服务端的链接" class="headerlink" title="断开于服务端的链接"></a>断开于服务端的链接</h3><ul><li>之前我们的建立链接是基于 <code>TCP/IP</code> 协议的 <code>三次握手</code></li><li>我们的断开链接是基于 <code>TCP/IP</code> 协议的 <code>四次挥手</code><ol><li>客户端发送一个我要断开的消息给服务端</li><li>服务端接受到以后发送一个消息告诉客户端我已经进入关闭等待状态</li><li>服务端再次发送一个消息告诉客户端，这个是我的最后一次消息给你，当我再接受到消息的时候就会关闭</li><li>客户端接受到服务端的消息以后，告诉服务器，我已经关闭，这个是给你的最后一个消息</li></ol></li></ul><h3 id="完成一个-HTTP-请求"><a href="#完成一个-HTTP-请求" class="headerlink" title="完成一个 HTTP 请求"></a>完成一个 HTTP 请求</h3><ul><li>至此，一个 HTTP 请求就完整的完成了</li><li>一个 HTTP 请求必须要包含的四个步骤就是<ol><li>建立链接</li><li>发送请求</li><li>接受响应</li><li>断开链接</li></ol></li><li>在一个 HTTP 请求中，请求的部分有请求报文，接受响应的部分有响应报文</li><li>请求报文包含<ol><li>请求行</li><li>请求头</li><li>请求空行</li><li>请求体</li></ol></li><li>响应报文<ol><li>状态行</li><li>响应头</li><li>响应体</li></ol></li></ul><h2 id="常见的-HTTP-响应状态码"><a href="#常见的-HTTP-响应状态码" class="headerlink" title="常见的 HTTP 响应状态码"></a>常见的 HTTP 响应状态码</h2><ul><li>在一个 HTTP 请求的响应报文中的状态行会有一个响应状态码</li><li>这个状态码是用来描述本次响应的状态的</li><li>通常会出现五种状态码<ol><li>100 ~ 199</li><li>200 ~ 299</li><li>300 ~ 399</li><li>400 ~ 499</li><li>500 ~ 599</li></ol></li></ul><h3 id="100-199"><a href="#100-199" class="headerlink" title="100 ~ 199"></a>100 ~ 199</h3><ul><li><p>一般我们看不到，因为表示请求继续</p></li><li><p>100：  继续请求，前面的一部分内容服务端已经接受到了，正在等待后续内容</p></li><li>101： 请求者已经准备切换协议，服务器页表示同意</li></ul><h3 id="200-299"><a href="#200-299" class="headerlink" title="200 ~ 299"></a>200 ~ 299</h3><ul><li>2 开头的都是表示成功，本次请求成功了，只不过不一样的状态码有不一样的含义（语义化）</li><li>200： 标准请求成功（一般表示服务端提供的是网页）</li><li>201： 创建成功（一般是注册的时候，表示新用户信息已经添加到数据库）</li><li>203： 表示服务器已经成功处理了请求，但是返回的信息可能来自另一源</li><li>204： 服务端已经成功处理了请求，但是没有任何数据返回</li></ul><h3 id="300-399"><a href="#300-399" class="headerlink" title="300 ~ 399"></a>300 ~ 399</h3><ul><li>3 开头也是成功的一种，但是一般表示重定向</li><li>301： 永久重定向</li><li>302： 临时重定向</li><li>304： 使用的是缓存的数据</li><li>305： 使用代理</li></ul><h3 id="400-499"><a href="#400-499" class="headerlink" title="400 ~ 499"></a>400 ~ 499</h3><ul><li>4 开头表示客户端出现错误了</li><li>400： 请求的语法服务端不认识</li><li>401： 未授权（你要登录的网站需要授权登录）</li><li>403： 服务器拒绝了你的请求</li><li>404： 服务器找不到你请求的 URL</li><li>407： 你的代理没有授权</li><li>408： 请求超时</li><li>410： 你请求的数据已经被服务端永久删除</li></ul><h3 id="500-599"><a href="#500-599" class="headerlink" title="500 ~ 599"></a>500 ~ 599</h3><ul><li>5 开头的表示服务端出现了错误</li><li>500： 服务器内部错误</li><li>503： 服务器当前不可用（过载或者维护）</li><li>505： 请求的协议服务器不支持 </li></ul><h2 id="常见的-HTTP-请求方式"><a href="#常见的-HTTP-请求方式" class="headerlink" title="常见的 HTTP 请求方式"></a>常见的 HTTP 请求方式</h2><ul><li>每一个 HTTP 请求在请求行里面会有一个东西叫做请求方式</li><li>不同的请求方式代表的含义不同<ol><li>GET： 一般用于获取一些信息使用（获取列表）</li><li>POST： 一般用于发送一些数据给服务端（登录）</li><li>PUT： 一般用于发送一些数据给服务当让其添加新数据（注册）</li><li>DELETE： 一般用域删除某些数据</li><li>HEAD： 类似于 GET 的请求，只不过一般没有响应的具体内容，用于获取报文头</li><li>CONNECT： HTTP/1.1 中预留的方式，一般用于管道链接改变为代理的时候使用</li><li>PATCH： 是和 PUT 方式类似的一个方式，一般用于更新局部数据</li><li>OPTIONS： 允许客户端查看服务端性能</li></ol></li><li>我们比较常用的就是 GET 和 POST</li></ul><h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h3><ul><li>参数以 <code>querystring</code> 的形式发送，也就是直接拼接在 请求路径的后面</li><li>GET 请求会被浏览器主动缓存</li><li>GET 请求根据不同的浏览器对长度是有限制的<ul><li>IE： 2083 个字符</li><li>FireFox： 65536 个字符</li><li>Safari： 80000 个字符</li><li>Opera： 190000 个字符</li><li>Chrome： 8182 个字符</li><li>APACHE(server)： 理论上接受的最大长度是 8192 个字符（有待商榷）</li></ul></li><li>对参数的类型有限制，只接受 ASCII 码的格式</li><li>GET 请求是明文发送，相对不安全</li></ul><h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h3><ul><li>参数以 <code>request body</code>的形式发送，也就是放在请求体中</li><li>POST 请求不会被浏览器主动缓存，除非手动设置</li><li>POST 请求理论上是没有限制的，除非服务端做了限制</li><li>对参数类型没有限制，理论上可以传递任意数据类型，只不过要和请求头对应</li><li>POST 请求是密文发送，相对安全</li></ul><h1 id="COOKIE"><a href="#COOKIE" class="headerlink" title="COOKIE"></a>COOKIE</h1><ul><li><code>cookie</code> 是一个以字符串的形式存储数据的位置</li><li>每一个 HTTP 请求都会在请求头中携带 cookie 到服务端</li><li>每一个 HTTP 响应都会在响应头中携带 cookie 到客户端</li><li>也就是说，cookie 是不需要我们手动设置，就会自动在 客户端 和 服务端之间游走的数据</li><li>我们只是需要设置一下 cookie 的内容就可以</li></ul><h2 id="COOKIE-的存储形式"><a href="#COOKIE-的存储形式" class="headerlink" title="COOKIE 的存储形式"></a>COOKIE 的存储形式</h2><ul><li><p>cookie 是以字符串的形式存储，在字符串中以 <code>key=value</code> 的形式出现</p></li><li><p>每一个 <code>key=value</code> 是一条数据</p></li><li><p>多个数据之间以 <code>;</code> 分割</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cookie 的形态</span></span><br><span class="line"><span class="string">'a=100; b=200; c=300;'</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="COOKIE-的特点"><a href="#COOKIE-的特点" class="headerlink" title="COOKIE 的特点"></a>COOKIE 的特点</h2><ol><li>存储大小有限制，一般是 4 KB 左右</li><li>数量有限制，一般是 50 条左右</li><li>有时效性，也就是有过期时间，一般是 <strong>会话级别</strong>（也就是浏览器关闭就过期了）</li><li>有域名限制，也就是说谁设置的谁才能读取</li></ol><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ul><li><p>读取 cookie 的内容使用 <code>document.cookie</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cookie = <span class="built_in">document</span>.cookie</span><br><span class="line"><span class="built_in">console</span>.log(cookie) <span class="comment">// 就能得到当前 cookie 的值</span></span><br></pre></td></tr></table></figure></li><li><p>设置 cookie 的内容使用 <code>document.cookie</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置一个时效性为会话级别的 cookie</span></span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">'a=100'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个有过期时间的 cookie</span></span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">'b=200;expires=Thu, 18 Dec 2043 12:00:00 GMT";'</span></span><br><span class="line"><span class="comment">// 上面这个 cookie 数据会在 2043 年 12 月 18 日 12 点以后过期，过期后会自动消失</span></span><br></pre></td></tr></table></figure></li><li><p>删除 cookie 的内容使用 <code>document.cookie</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为 cookie 不能直接删除</span></span><br><span class="line"><span class="comment">// 所以我们只能把某一条 cookie 的过期时间设置成当前时间之前</span></span><br><span class="line"><span class="comment">// 那么浏览器就会自动删除 cookie</span></span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">'b=200;expires=Thu, 18 Dec 2018 12:00:00 GMT";'</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="COOKIE-操作封装"><a href="#COOKIE-操作封装" class="headerlink" title="COOKIE 操作封装"></a>COOKIE 操作封装</h2><ul><li>因为 js 中没有专门操作 COOKIE 增删改查的方法</li><li>所以需要我们自己封装一个方法</li></ul><h3 id="设置-cookie"><a href="#设置-cookie" class="headerlink" title="设置 cookie"></a>设置 cookie</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * setCookie 用于设置 cookie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;STRING&#125;</span> </span>key  要设置的 cookie 名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;STRING&#125;</span> </span>value  要设置的 cookie 内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;NUMBER&#125;</span> </span>expires  过期时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span> (<span class="params">key, value, expires</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  time.setTime(time.getTime() - <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">8</span> + expires) <span class="comment">// 用于设置过期时间</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.cookie = <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;value&#125;</span>;expires=<span class="subst">$&#123;time&#125;</span>;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取-cookie"><a href="#读取-cookie" class="headerlink" title="读取 cookie"></a>读取 cookie</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * getCookie 获取 cookie 中的某一个属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;STRING&#125;</span> </span>key 你要查询的 cookie 属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;STRING&#125;</span> </span>你要查询的那个 cookie 属性的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cookieArr = <span class="built_in">document</span>.cookie.split(<span class="string">';'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> value = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">  cookieArr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.split(<span class="string">'='</span>)[<span class="number">0</span>] === key) &#123;</span><br><span class="line">      value = item.split(<span class="string">'='</span>)[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除-cookie"><a href="#删除-cookie" class="headerlink" title="删除 cookie"></a>删除 cookie</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * delCookie 删除 cookie 中的某一个属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;STRING&#125;</span> </span>name 你要删除的某一个 cookie 属性的名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delCookie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  setCookie(name, <span class="number">1</span>, <span class="number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;HTTP&quot;&gt;&lt;a href=&quot;#HTTP&quot; class=&quot;headerlink&quot; title=&quot;HTTP&quot;&gt;&lt;/a&gt;HTTP&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http&lt;/code&gt; 是我们前后台交互的时候的传输协议（即超文本传输协议）&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;HTTP-的工作流程&quot;&gt;&lt;a href=&quot;#HTTP-的工作流程&quot; class=&quot;headerlink&quot; title=&quot;HTTP 的工作流程&quot;&gt;&lt;/a&gt;HTTP 的工作流程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;和服务器建立链接&lt;/li&gt;
&lt;li&gt;建立链接后，发送一个请求给服务器（请求）&lt;/li&gt;
&lt;li&gt;服务器接受到请求以后进行相应的处理并给出一个回应（响应）&lt;/li&gt;
&lt;li&gt;断开于服务器的链接&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;和服务器建立链接&quot;&gt;&lt;a href=&quot;#和服务器建立链接&quot; class=&quot;headerlink&quot; title=&quot;和服务器建立链接&quot;&gt;&lt;/a&gt;和服务器建立链接&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;怎么和服务器建立链接呢？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需要保证客户端的接受和发送正常，服务器端的接受和发送正常&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这里就涉及到一个东西叫做 &lt;code&gt;TCP/IP&lt;/code&gt; 协议&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;建立链接的主要步骤叫做 &lt;code&gt;三次握手&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;客户端发送一个消息给到服务端&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;此时：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	服务端知道了 客户端可以正常发送消息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	服务端知道了 服务端可以正常接受消息&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务端回给客户端一个消息&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;此时：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	服务端知道了 客户端可以正常发送消息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	服务端知道了 服务端可以正常接受消息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	客户端知道了 客户端可以正常发送消息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	客户端知道了 客户端可以正常接受消息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	客户端知道了 服务端可以正常接受消息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	客户端知道了 服务端可以正常发送消息&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;客户端再回给服务端一个消息&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;此时：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	服务端知道了 客户端可以正常发送消息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	服务端知道了 服务端可以正常接受消息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	客户端知道了 客户端可以正常发送消息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	客户端知道了 客户端可以正常接受消息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	客户端知道了 服务端可以正常接受消息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	客户端知道了 服务端可以正常发送消息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	服务端知道了 服务端可以正常发送消息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	服务端知道了 客户端可以正常接受消息&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;至此，依照 &lt;code&gt;TCP/IP&lt;/code&gt; 协议的建立链接就建立好了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;双方都知道双方可以正常收发消息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;就可以进入到第二步，通讯了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="千锋" scheme="http://yoursite.com/categories/千锋/"/>
    
    
  </entry>
  
  <entry>
    <title>DAY5-1_PHP</title>
    <link href="http://yoursite.com/2021/11/03/DAY5-1-PHP/"/>
    <id>http://yoursite.com/2021/11/03/DAY5-1-PHP/</id>
    <published>2021-11-03T02:41:50.000Z</published>
    <updated>2021-11-03T02:41:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><ul><li>PHP 一门后端语言</li><li>为什么要学习一个后端语言呢？<ul><li>目前市场上的需求，要求前端人员掌握一个后端语言</li><li>方便和后端开发人员进行交互</li></ul></li></ul><h2 id="基本组织架构"><a href="#基本组织架构" class="headerlink" title="基本组织架构"></a>基本组织架构</h2><ul><li>在讲后端语言之前，我们简单的了解一下我们基本的组织架构</li><li>我们是一个 <strong>前端开发工程师</strong></li><li>还有一个工作叫做 <strong>后端开发工程师</strong></li><li>我们一个网站的组织架构基本上由下面的步骤完成<ul><li><strong>用户</strong> =&gt; <strong>前端</strong> =&gt; <strong>后端</strong> =&gt; <strong>数据库</strong></li></ul></li></ul><a id="more"></a><ul><li>整个过程中<ul><li>用户向前端人员要一个网页</li><li>前端人员准备一个网页给用户，但是网页中的数据是找后端人员要的</li><li>后端人员接受到前端人员要数据以后，去数据库里面找到对应的数据，给到前端人员</li><li>前端人员拿到数据以后渲染在页面上</li><li>最后把这个页面给到用户看</li></ul></li></ul><ul><li>比如： 我们浏览一个新闻网站<ul><li>用户输入网址</li><li>前端人员就要把对应的页面给到用户，在页面打开的过程中，想后端人员索要新闻信息</li><li>后端人员接收到前端人员索要新闻信息以后，就去数据库中找到对应的新闻信息数据给前端人员</li><li>前端人员接收到后端人员给的新闻信息以后，使用我们的办法吧新闻信息数据渲染在页面上</li><li>页面就打开了，用户就可以看到一个新闻网站了</li></ul></li></ul><ul><li>比如： 用户登陆一个网站<ul><li>当用户书写完表单内容以后，点击提交按钮的时候</li><li>前端人员拿到用户填写的内容，把数据整合好传送给后端人员</li><li>后端人员接收到数据以后，去数据库中进行比对，看看有没有对应的数据</li><li>然后告诉前端人员，你给我的用户名和密码是否正确</li><li>前端吧信息反馈给客户看到<ul><li>如果正确就是跳转页面</li><li>如果不正确提示用户名或者密码有问题</li></ul></li></ul></li></ul><h2 id="服务器的简单理解"><a href="#服务器的简单理解" class="headerlink" title="服务器的简单理解"></a>服务器的简单理解</h2><ul><li>我们不可能把数据库丢在用户的电脑上</li><li>一个是太大，一个是不安全</li><li>所以我们要把数据库放在网络的另一端（远程）</li><li>所以当前端人员向后端人员索要数据的时候需要网络</li><li>我们也不可能把页面也放在用户的电脑上</li><li>所以用户也是需要网络来向前端人员所有页面</li></ul><h2 id="服务器的认识"><a href="#服务器的认识" class="headerlink" title="服务器的认识"></a>服务器的认识</h2><ul><li>我们现在的市场上有一些常见的服务器可以承载内容</li><li>我们目前比较常用的就是 <code>Apache</code> 和 <code>Tomcat</code></li><li>我们今天要学习的就是 <code>Apache</code> 服务器</li><li>是一个和 <code>php</code> 语言合作比较紧密的一个服务器</li></ul><h3 id="到底什么是服务器"><a href="#到底什么是服务器" class="headerlink" title="到底什么是服务器"></a>到底什么是服务器</h3><ul><li>其实说白了，服务器就是一个电脑，当他跑起来一些程序的时候，就变成了一个服务器</li><li>只不过会跑一些特殊的程序，需要一些特殊的环境，电脑不他一样而已</li><li>换句话说，我们自己的电脑，跑一些特殊的程序的时候，也可以当作一个小型的服务器来用<ul><li>只不过计算能力/存储能力/转存能力没有专业的服务器电脑厉害而已</li></ul></li></ul><h3 id="服务器是怎么访问的呢"><a href="#服务器是怎么访问的呢" class="headerlink" title="服务器是怎么访问的呢"></a>服务器是怎么访问的呢</h3><ul><li>涉及到我们的 <code>url</code> 地址中的一些内容了</li><li>比如我们的经常访问的 <code>www.baidu.com</code></li><li>这个里面就包含很多的内容，我们看到的这个只是一个省略后的内容</li><li>是浏览器帮我们省略掉了一些内容</li><li>全部的地址应该是 <code>https://www.baidu.com:443</code></li><li>发现多了两个东西 <code>https://</code> 和 <code>:443</code></li><li>其实一个简单的 <code>url</code> 地址是由三部分组成的<ul><li>传输协议</li><li>域名</li><li>端口号</li></ul></li></ul><h4 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h4><ul><li>我们常见的传输协议是 <code>http</code> 和 <code>https</code> </li><li>他们是限制用户和服务器之间交流传输数据的方式和规则</li><li>也是我们前端和后端人员交互的规则</li><li>规则<ul><li>建立连接通道</li><li>相互通信</li><li>关闭连接通道</li></ul></li><li>只不过 <code>http</code> 是一种常见协议，不是很安全</li><li><code>https</code> 是一种加密传输协议</li></ul><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><ul><li>之前我们说过，服务器就是一个在 <strong>网络那一头</strong> 的一个电脑</li><li>以前，没有域名的概念，大家都是使用 <code>IP</code> 地址来访问</li><li>也就是 <strong>网络那一头</strong> 的那个电脑的 <code>IP</code></li><li>都是一堆数字，不方便记忆</li><li>后来就有了一个 <strong>万维网</strong>，他把每一个 IP 地址配套了一个英文的名字</li><li>方便用户记忆</li><li>所以说，域名就代表着 <strong>网络那一头</strong> 那个电脑的 IP 地址</li><li>其实也就是我们要访问哪一个服务器</li></ul><h4 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h4><ul><li>人家的服务器电脑也是有很多的文件夹的</li><li>不同的文件夹里面存储着不同的内容</li><li>可能有个 a 文件夹，里面存储的是首页</li><li>可能有个 b 文件夹，里面存储的是一些数据</li><li>所以说，你光找到服务器电脑还不行，还得找对文件夹才可以</li><li>大家都把文件夹编上号存储了 <code>0 ~ 255</code> 一共 256 个</li><li>每个文件夹里面还有对应的小文件夹 <code>0 ~ 255</code> 一个 256 个</li><li>那么一共就有 <code>256 * 256</code> 个文件夹，也就是从 <code>0 ~ 65535</code></li><li>所以我们的端口号就有 <code>65536</code> 个，分别对应着 <code>0 ~ 65535</code> </li><li>大家都把 <code>80</code> 端口号作为一个网站的默认端口号</li><li>http 协议默认是 80 端口号</li><li>https 协议默认是 443 端口号</li></ul><h4 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h4><ul><li>到现在，我们在看百度的完整 url 地址</li><li><code>https://www.baidu.com:443</code><ul><li>以一种加密传输协议来通讯</li><li>访问的是网络上 <code>IP</code> 的值为 <code>119.75.217.109</code> 的那个电脑</li><li>访问的是第 <code>443</code> 号文件夹</li></ul></li><li>这个文件夹里面存储着一个百度的页面</li><li>我们就能看到这个页面了</li></ul><h2 id="PHP-基础语法"><a href="#PHP-基础语法" class="headerlink" title="PHP 基础语法"></a>PHP 基础语法</h2><ul><li>我们一定要知道，php 是另一个语言了，不再是我们的 <code>html</code> / <code>javascript</code> 了</li><li>一个别的语言就有人家语言的规则</li></ul><h2 id="php文件"><a href="#php文件" class="headerlink" title="php文件"></a>php文件</h2><ul><li>我们在写 <code>javascript</code> 的时候，是一个 <code>.js</code> 文件</li><li>我们在写 <code>html</code> 的时候，是一个 <code>.html</code> 文件</li><li><strong>php 的代码写在一个 <code>.php</code> 后缀的文件中</strong></li></ul><h3 id="php文件的书写"><a href="#php文件的书写" class="headerlink" title="php文件的书写"></a>php文件的书写</h3><ul><li><p>所有的 php 代码都要写在一个 php 的范围内</p></li><li><p>要求以 <code>&lt;?php</code> 开头</p></li><li><p>要求以 <code>?&gt;</code> 结尾</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># php 的代码写在这里</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="简单了解-php-的语法"><a href="#简单了解-php-的语法" class="headerlink" title="简单了解 php 的语法"></a>简单了解 php 的语法</h3><ul><li>每个语言都会有自己的语法</li><li>接下来我们就简单了解一下 php 的语法规则</li><li><code>php</code> 里面有一个必须要注意的点 <strong>每一个语句后面都要有 <code>;</code></strong></li></ul><h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><ul><li><p>在 php 中没有 <code>var</code> 关键字给我们定义变量</p></li><li><p>直接使用 <code>$</code> 来确定一个变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 下面就是一个定义了一个变量，并且赋值为 100</span></span><br><span class="line">  <span class="comment"># 变量名就是 $num</span></span><br><span class="line">  $num = <span class="number">100</span>;</span><br><span class="line">  </span><br><span class="line">  $boo = <span class="keyword">true</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 下面是一个字符串</span></span><br><span class="line">  $str = <span class="string">"你好 php"</span>;</span><br><span class="line">  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><ul><li><p>在 php 中使用条件语句和 js 基本一致</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  </span><br><span class="line">$boo = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($boo) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'你好，欢迎观临！'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'您还没有登陆'</span>;</span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><ul><li><p>在 php 中循环语句和 js 基本一致</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$num = <span class="number">5</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $num; $i++) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'hello php'</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><ul><li><p>在 php 中，字符串拼接不再是使用 <code>+</code> 进行拼接了，而是使用 <code>.</code> 进行拼接</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$str = <span class="string">'hello '</span>;</span><br><span class="line">$str2 = <span class="string">'world'</span>;</span><br><span class="line">$str3 = $str . $str2;</span><br><span class="line"><span class="keyword">echo</span> $str3;</span><br><span class="line"><span class="comment"># 得到的就是 hello world</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul><li><p>在 php 中的数组和 js 中特别不一样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 创建一个数组</span></span><br><span class="line">  $arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  print_r($arr);</span><br><span class="line">  <span class="comment"># Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 )</span></span><br><span class="line">  <span class="comment"># 这个就类似于我们 js 中的数组，按照索引来的</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 创建一个关联数组</span></span><br><span class="line">  $arr2 = <span class="keyword">array</span>(<span class="string">'name'</span> =&gt; <span class="string">'Jack'</span>, <span class="string">'age'</span> =&gt; <span class="number">18</span>, <span class="string">'gender'</span> =&gt; <span class="string">'男'</span>)</span><br><span class="line">  print_r($arr2)</span><br><span class="line">  <span class="comment"># Array ( [name] =&gt; Jack [age] =&gt; 18 [gender] =&gt; 男 )</span></span><br><span class="line">  <span class="comment"># 这个就类似于我们 js 中的 对象，键值对的形式</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h2><ul><li>mysql 是一个数据库的名字</li><li>和 php 合作的比较好的数据库</li><li>之前我们说过一个问题，前端向后端索要数据，后端就是去数据库中查询数据，返回给前端</li><li>接下来就聊聊使用 php 操作数据库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MySQL 是最流行的关系型数据库管理系统（非关系型数据库简略介绍）</span><br><span class="line">关系数据库管理系统(Relational Database Management System)的特点</span><br><span class="line">数据以表格的形式出现</span><br><span class="line">每行为各种记录名称</span><br><span class="line">许多的行和列组成一张表单</span><br><span class="line">若干的表单组成database</span><br><span class="line">主键：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</span><br></pre></td></tr></table></figure><h3 id="数据库的数据类型"><a href="#数据库的数据类型" class="headerlink" title="数据库的数据类型"></a>数据库的数据类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">* 数值类型</span><br><span class="line"></span><br><span class="line">| 类型 | 大小 | 用途 |</span><br><span class="line">| ------ | ------ | ------ |</span><br><span class="line">| TINYINT | 1 字节 | 小整数值 |</span><br><span class="line">| SMALLINT | 2 字节 | 大整数值 |</span><br><span class="line">| MEDIUMINT | 3 字节 | 大整数值 |</span><br><span class="line">| INT或INTEGER | 4 字节 | 大整数值 |</span><br><span class="line">| BIGINT | 8 字节 | 极大整数值 |</span><br><span class="line">| FLOAT | 4 字节 | 单精度 浮点数值 |</span><br><span class="line">| DOUBLE | 8 字节 | 双精度 浮点数值 |</span><br><span class="line">| DECIMAL |  | 小数值 |</span><br><span class="line"></span><br><span class="line">* 日期和时间类型</span><br><span class="line"></span><br><span class="line">| 类型 | 格式 | 用途 |</span><br><span class="line">| ------ | ------ | ------ |</span><br><span class="line">| DATE | YYYY-MM-DD | 日期值 |</span><br><span class="line">| TIME | HH:MM:SS | 时间值或持续时间 |</span><br><span class="line">| YEAR | YYYY | 年份值 |</span><br><span class="line">| DATETIME | YYYY-MM-DD HH:MM:SS | 混合日期和时间值 |</span><br><span class="line">| TIMESTAMP | YYYYMMDD HHMMSS | 时间戳 |</span><br><span class="line"></span><br><span class="line">* 字符串类型</span><br><span class="line"></span><br><span class="line">| 类型 | 大小 | 用途 |</span><br><span class="line">| ------ | ------ | ------ |</span><br><span class="line">| CHAR | 0-255字节 | 定长字符串 |</span><br><span class="line">| VARCHAR | 0-65535 字节 | 变长字符串 |</span><br><span class="line">| TINYBLOB | 0-255字节 | 不超过 255 个字符的二进制字符串 |</span><br><span class="line">| TINYTEXT | 0-255字节 | 短文本字符串 |</span><br><span class="line">| BLOB | 0-65 535字节 | 二进制形式的长文本数据 |</span><br><span class="line">| TEXT | 0-65 535字节 | 长文本数据 |</span><br><span class="line">| MEDIUMBLOB | 0-16 777 215字节 | 二进制形式的中等长度文本数据 |</span><br><span class="line">| MEDIUMTEXT | 0-16 777 215字节 | 中等长度文本数据 |</span><br><span class="line">| LONGBLOB | 0-4 294 967 295字节 | 二进制形式的极大文本数据 |</span><br><span class="line">| LONGTEXT | 0-4 294 967 295字节 | 极大文本数据 |</span><br></pre></td></tr></table></figure><h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><ul><li>之前都是对数据库的简单了解，不需要全都背下来</li><li>我们只要了解一下就可以了</li><li>接下来我们就是使用 php 链接 mysql 数据库进行数据的增删改查</li><li>想要操作数据库，除了需要 php 的语法以外，还需要一个 mysql 的 sql 语句</li><li>使用 php 操作数据库的步骤<ol><li>和数据库建立链接</li><li>使用 sql 语句对数据库进行操作</li><li>获取结果</li><li>和数据库的链接断开</li></ol></li></ul><h4 id="和数据库建立链接"><a href="#和数据库建立链接" class="headerlink" title="和数据库建立链接"></a>和数据库建立链接</h4><ul><li><p>在 php 中我们使用 <code>mysql_connect()</code> 方法来建立和数据库的链接</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment"># 下面就是建立链接，$link 会得到一个链接信息</span></span><br><span class="line">  <span class="comment"># $link = mysql_connect('ip地址', '数据库用户名', '数据库密码'); </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>我们有了链接信息 <code>$link</code> 以后就可以继续去操作数据库了</li></ul></li></ul><h4 id="确定操作哪个哪个库"><a href="#确定操作哪个哪个库" class="headerlink" title="确定操作哪个哪个库"></a>确定操作哪个哪个库</h4><ul><li><p>刚才是和数据库建立了链接，我们还要确定操作哪个库</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment"># 下面就是确定你要操作哪个库  </span></span><br><span class="line">  <span class="comment"># mysql_select_db('你要操作的库的名称', $link);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="执行-sql-语句操作数据库"><a href="#执行-sql-语句操作数据库" class="headerlink" title="执行 sql 语句操作数据库"></a>执行 sql 语句操作数据库</h4><ul><li><p>接下来就是使用 sql 语句去这个库里面进行增删改查的操作了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment"># 下面就是使用 sql 语句对数据库进行操作</span></span><br><span class="line">  <span class="comment"># $res = mysql_query('你要执行的 sql 语句');      </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这里有一个注意的点：<ul><li>我们拿到的结果是一个我们看不懂的处理信息</li><li>需要使用 mysql_fetch_row || mysql_fetch_assoc 解析一下结果才能看得懂</li></ul></li></ul></li></ul><h4 id="关闭链接"><a href="#关闭链接" class="headerlink" title="关闭链接"></a>关闭链接</h4><ul><li><p>全部用完以后我们最好是关闭一下数据库链接</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment"># mysql_close($conn);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="完整步骤"><a href="#完整步骤" class="headerlink" title="完整步骤"></a>完整步骤</h4><ul><li><p>我们完整的写一下操作的步骤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $conn = mysql_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>);</span><br><span class="line">  mysql_select_db(<span class="string">'test1913'</span>);</span><br><span class="line">  $res = mysql_query(<span class="string">'SELECT * FROM `student`'</span>);</span><br><span class="line">  $row = mysql_fetch_assoc($res);</span><br><span class="line">  mysql_close($conn);</span><br><span class="line"></span><br><span class="line">  print_r($row);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="常用的-sql-语句"><a href="#常用的-sql-语句" class="headerlink" title="常用的 sql 语句"></a>常用的 sql 语句</h3><ul><li>刚才说了怎么操作数据库</li><li>现在我们学习一下，操作数据库时候常用的 sql 语句</li><li>我们就是依靠这些 sql 语句来进行数据库操作的</li></ul><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><ul><li><p>查询语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment"># 查询 student 这个表里面的所有数据</span></span><br><span class="line">  $sql = <span class="string">'SELECT * FROM `student`'</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="comment"># 查询 student 表中的数据里面 gender 为 男 的数据</span></span><br><span class="line">  $sql = <span class="string">'SELECT * FROM `student` WHERE `gender`="男"'</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="comment"># 查询 student 表中的数据里面 age 大于 18 的数据</span></span><br><span class="line">  $sql = <span class="string">'SELECT * FROM `student` WHERE `age`&gt;18'</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="comment"># 查询 student 表中的数据里面 age 大于 18 且 gender 为 男 的数据</span></span><br><span class="line">  $sql = <span class="string">'SELECT * FROM `student` WHERE `age`&gt;18 AND `gender`="男"'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 查询 student 表中的数据里面 age 小于 22 或者 age 大于 28 的数据</span></span><br><span class="line">  $sql = <span class="string">'SELECT * FROM `student` WHERE `age`&lt;22 OR `age`&gt;28'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 查询 student 表中的数据里面从 第几条开始 查询多少条</span></span><br><span class="line">  $sql = <span class="string">'SELECT * FROM `student` LIMIT 0, 10'</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="comment"># 先按照条件筛选出数据以后再进行分页查询</span></span><br><span class="line">  <span class="comment"># 下面是查询表中所有 age&gt;18 且 性别为男的所有数据，查出来以后从第 10 条开始查 10 条</span></span><br><span class="line">  $sql = <span class="string">'SELECT * FROM `student` WHERE `age`&gt;18 AND `gender`="男" LIMIT 10, 10'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 查询表的模糊查询</span></span><br><span class="line">  <span class="comment"># 下面表示查询表中所有数据里面 name 字段中包含 "三" 字的数据</span></span><br><span class="line">  $sql = <span class="string">'SELECT * FROM `student` WHERE `name` LIKE "%三%"'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 查询排序，查询的时候按照某一个字段升序或降序排序</span></span><br><span class="line">  $sql = <span class="string">'SELECT * FROM `student` ORDER BY `age` ASC'</span>;</span><br><span class="line">  $sql = <span class="string">'SELECT * FROM `student` ORDER BY `age` DESC'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><ul><li><p>增加语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment"># 向表中增加一条数据，再增加的时候主键不能由我们书写，而是 mysql 数据库自己递增</span></span><br><span class="line">  $sql = <span class="string">'INSERT INTO `student` VALUES(null, "张三", 18, "男", 1913, 100)'</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="comment"># 插入固定几个键的数据，其他的用默认值</span></span><br><span class="line">  $sql = <span class="string">'INSERT INTO `student` (`name`, `age`) VALUES("李四", 22)'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><ul><li><p>删除语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment"># 删除表中 id 为 100 的数据</span></span><br><span class="line">  $sql = <span class="string">'DELETE FROM `student` WHERE `id`=100'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 删除表中 name 为 张三 的数据</span></span><br><span class="line">  $sql = <span class="string">'DELETE FROM `student` WHERE `name`="张三"'</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><ul><li><p>修改语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment"># 更新一条 id 为 100 的数据中的 name 字段的值和 age 字段的值</span></span><br><span class="line">  $sql = <span class="string">'UPDATE `student` SET `name`="张三", `age`=10 WHERE `id`=100'</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment"># 更新数据的时候让所有的数据增加一些内容</span></span><br><span class="line">  $sql = <span class="string">'UPDATE `student` SET `age`=age+1'</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;PHP&quot;&gt;&lt;a href=&quot;#PHP&quot; class=&quot;headerlink&quot; title=&quot;PHP&quot;&gt;&lt;/a&gt;PHP&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;PHP 一门后端语言&lt;/li&gt;
&lt;li&gt;为什么要学习一个后端语言呢？&lt;ul&gt;
&lt;li&gt;目前市场上的需求，要求前端人员掌握一个后端语言&lt;/li&gt;
&lt;li&gt;方便和后端开发人员进行交互&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;基本组织架构&quot;&gt;&lt;a href=&quot;#基本组织架构&quot; class=&quot;headerlink&quot; title=&quot;基本组织架构&quot;&gt;&lt;/a&gt;基本组织架构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在讲后端语言之前，我们简单的了解一下我们基本的组织架构&lt;/li&gt;
&lt;li&gt;我们是一个 &lt;strong&gt;前端开发工程师&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;还有一个工作叫做 &lt;strong&gt;后端开发工程师&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;我们一个网站的组织架构基本上由下面的步骤完成&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户&lt;/strong&gt; =&amp;gt; &lt;strong&gt;前端&lt;/strong&gt; =&amp;gt; &lt;strong&gt;后端&lt;/strong&gt; =&amp;gt; &lt;strong&gt;数据库&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="千锋" scheme="http://yoursite.com/categories/千锋/"/>
    
    
  </entry>
  
  <entry>
    <title>DAY4-1_面向对象</title>
    <link href="http://yoursite.com/2021/11/03/DAY4-1-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2021/11/03/DAY4-1-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-11-03T02:38:34.000Z</published>
    <updated>2021-11-03T02:38:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><ul><li>首先，我们要明确，面向对象不是语法，是一个思想，是一种 <strong>编程模式</strong></li><li>面向： 面（脸），向（朝着）</li><li>面向过程： 脸朝着过程 =》 关注着过程的编程模式</li><li>面向对象： 脸朝着对象 =》 关注着对象的编程模式</li><li>实现一个效果<ul><li>在面向过程的时候，我们要关注每一个元素，每一个元素之间的关系，顺序，。。。</li><li>在面向过程的时候，我们要关注的就是找到一个对象来帮我做这个事情，我等待结果</li></ul></li><li>例子 🌰： 我要吃面条<ul><li>面向过程<ul><li>用多少面粉</li><li>用多少水</li><li>怎么和面</li><li>怎么切面条</li><li>做开水</li><li>煮面</li><li>吃面</li></ul></li><li>面向对象<ul><li>找到一个面馆</li><li>叫一碗面</li><li>等着吃</li></ul></li><li>面向对象就是对面向过程的封装</li></ul></li><li>我们以前的编程思想是，每一个功能，都按照需求一步一步的逐步完成</li><li>我们以后的编程思想是，每一个功能，都先创造一个 <strong>面馆</strong>，这个 <strong>面馆</strong> 能帮我们作出一个 <strong>面（完成这个功能的对象）</strong>，然后用 <strong>面馆</strong> 创造出一个 <strong>面</strong>，我们只要等到结果就好了</li></ul><a id="more"></a><h2 id="创建对象的方式"><a href="#创建对象的方式" class="headerlink" title="创建对象的方式"></a>创建对象的方式</h2><ul><li>因为面向对象就是一个找到对象的过程</li><li>所以我们先要了解如何创建一个对象</li></ul><h3 id="调用系统内置的构造函数创建对象"><a href="#调用系统内置的构造函数创建对象" class="headerlink" title="调用系统内置的构造函数创建对象"></a>调用系统内置的构造函数创建对象</h3><ul><li><p>js 给我们内置了一个 Object 构造函数</p></li><li><p>这个构造函数就是用来创造对象的</p></li><li><p>当 构造函数 和 new 关键字连用的时候，就可以为我们创造出一个对象</p></li><li><p>因为 js 是一个动态的语言，那么我们就可以动态的向对象中添加成员了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 就能得到一个空对象</span></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="built_in">Object</span>() </span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常操作对象</span></span><br><span class="line">o1.name = <span class="string">'Jack'</span></span><br><span class="line">o1.age = <span class="number">18</span></span><br><span class="line">o1.gender = <span class="string">'男'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="字面量的方式创建一个对象"><a href="#字面量的方式创建一个对象" class="headerlink" title="字面量的方式创建一个对象"></a>字面量的方式创建一个对象</h3><ul><li><p>直接使用字面量的形式，也就是直接写 <code>{}</code></p></li><li><p>可以在写的时候就添加好成员，也可以动态的添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字面量方式创建对象</span></span><br><span class="line"><span class="keyword">var</span> o1 = &#123;</span><br><span class="line">  name: <span class="string">'Jack'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  gender: <span class="string">'男'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再来一个</span></span><br><span class="line"><span class="keyword">var</span> o2 = &#123;&#125;</span><br><span class="line">o2.name = <span class="string">'Rose'</span></span><br><span class="line">o2.age = <span class="number">20</span></span><br><span class="line">o2.gender = <span class="string">'女'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="使用工厂函数的方式创建对象"><a href="#使用工厂函数的方式创建对象" class="headerlink" title="使用工厂函数的方式创建对象"></a>使用工厂函数的方式创建对象</h3><ul><li><p>先书写一个工厂函数</p></li><li><p>这个工厂函数里面可以创造出一个对象，并且给对象添加一些属性，还能把对象返回</p></li><li><p>使用这个工厂函数创造对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 先创建一个工厂函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 手动创建一个对象</span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 手动的向对象中添加成员</span></span><br><span class="line">  obj.name = <span class="string">'Jack'</span></span><br><span class="line">  obj.age = <span class="number">18</span></span><br><span class="line">  obj.gender = <span class="string">'男'</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 手动返回一个对象</span></span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用这个工厂函数创建对象</span></span><br><span class="line"><span class="keyword">var</span> o1 = createObj()</span><br><span class="line"><span class="keyword">var</span> o2 = createObj()</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用自定义构造函数创建对象"><a href="#使用自定义构造函数创建对象" class="headerlink" title="使用自定义构造函数创建对象"></a>使用自定义构造函数创建对象</h3><ul><li><p>工厂函数需要经历三个步骤</p><ul><li>手动创建对象</li><li>手动添加成员</li><li>手动返回对象</li></ul></li><li><p>构造函数会比工厂函数简单一下</p><ul><li>自动创建对象</li><li>手动添加成员</li><li>自动返回对象</li></ul></li><li><p>先书写一个构造函数</p></li><li><p>在构造函数内向对象添加一些成员</p></li><li><p>使用这个构造函数创造一个对象（和 new 连用）</p></li><li><p>构造函数可以创建对象，并且创建一个带有属性和方法的对象</p></li><li><p>面向对象就是要想办法找到一个有属性和方法的对象</p></li><li><p>面向对象就是我们自己制造 <strong>构造函数</strong> 的过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 先创造一个构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, gender</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">18</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.gender = gender</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用构造函数创建对象</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="string">'man'</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Rose'</span>, <span class="string">'woman'</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="构造函数详解"><a href="#构造函数详解" class="headerlink" title="构造函数详解"></a>构造函数详解</h2><ul><li>我们了解了对象的创建方式</li><li>我们的面向对象就是要么能直接得到一个对象</li><li>要么就弄出一个能创造对象的东西，我们自己创造对象</li><li>我们的构造函数就能创造对象，所以接下来我们就详细聊聊 <strong>构造函数</strong></li></ul><h3 id="构造函数的基本使用"><a href="#构造函数的基本使用" class="headerlink" title="构造函数的基本使用"></a>构造函数的基本使用</h3><ul><li><p>和普通函数一样，只不过 <strong>调用的时候要和 new 连用</strong>，不然就是一个普通函数调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> Person()  <span class="comment">// 能得到一个空对象</span></span><br><span class="line"><span class="keyword">var</span> o2 = Person()      <span class="comment">// 什么也得不到，这个就是普通函数调用</span></span><br></pre></td></tr></table></figure><ul><li>注意： <strong>不写 new 的时候就是普通函数调用，没有创造对象的能力</strong></li></ul></li><li><p>首字母大写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> person() <span class="comment">// 能得到一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> Person() <span class="comment">// 能得到一个对象</span></span><br></pre></td></tr></table></figure><ul><li>注意： <strong>首字母不大写，只要和 new 连用，就有创造对象的能力</strong></li></ul></li><li><p>当调用的时候如果不需要传递参数可以不写 <code>()</code>，建议都写上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> Person()  <span class="comment">// 能得到一个空对象</span></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> Person    <span class="comment">// 能得到一个空对象</span></span><br></pre></td></tr></table></figure><ul><li>注意： <strong>如果不需要传递参数，那么可以不写 （），如果传递参数就必须写</strong></li></ul></li><li><p>构造函数内部的 this，由于和 new 连用的关系，是指向当前实例对象的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> Person()  <span class="comment">// 本次调用的时候，this =&gt; o1</span></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> Person()  <span class="comment">// 本次调用的时候，this =&gt; o2</span></span><br></pre></td></tr></table></figure><ul><li>注意： <strong>每次 new 的时候，函数内部的 this 都是指向当前这次的实例化对象</strong></li></ul></li><li><p>因为构造函数会自动返回一个对象，所以构造函数内部不要写 return</p><ul><li>你如果 return 一个基本数据类型，那么写了没有意义</li><li>如果你 return 一个引用数据类型，那么构造函数本身的意义就没有了</li></ul></li></ul><h3 id="使用构造函数创建一个对象"><a href="#使用构造函数创建一个对象" class="headerlink" title="使用构造函数创建一个对象"></a>使用构造函数创建一个对象</h3><ul><li><p>我们在使用构造函数的时候，可以通过一些代码和内容来向当前的对象中添加一些内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'Jack'</span></span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure><ul><li>我们得到的两个对象里面都有自己的成员 <strong>name</strong> 和 <strong>age</strong></li></ul></li><li><p>我们在写构造函数的时候，是不是也可以添加一些方法进去呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'Jack'</span></span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">18</span></span><br><span class="line">  <span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello constructor'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure><ul><li>显然是可以的，我们的到的两个对象中都有 <code>sayHi</code> 这个函数</li><li>也都可以正常调用</li></ul></li><li><p>但是这样好不好呢？缺点在哪里？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'Jack'</span></span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">18</span></span><br><span class="line">  <span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello constructor'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次 new 的时候， Person 这个函数要执行一遍</span></span><br><span class="line"><span class="comment">// 执行一遍就会创造一个新的函数，并且把函数地址赋值给 this.sayHi</span></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二次 new 的时候， Person 这个函数要执行一遍</span></span><br><span class="line"><span class="comment">// 执行一遍就会创造一个新的函数，并且把函数地址赋值给 this.sayHi</span></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure><ul><li>这样的话，那么我们两个对象内的 <code>sayHi</code> 函数就是一个代码一摸一样，功能一摸一样</li><li>但是是两个空间函数，占用两个内存空间</li><li>也就是说 <code>o1.sayHi</code> 是一个地址，<code>o2.sayHi</code> 是一个地址</li><li>所以我们执行 <code>console.log(o1 === o2.sayHi)</code> 的到的结果是 <code>false</code></li><li>缺点： <strong>一摸一样的函数出现了两次，占用了两个空间地址</strong></li></ul></li><li><p>怎么解决这个问题呢？</p><ul><li>就需要用到一个东西，叫做 <strong>原型</strong></li></ul></li></ul><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><ul><li>原型的出现，就是为了解决 <strong>构造函数的缺点</strong></li><li>也就是给我们提供了一个给对象添加函数的方法</li><li>不然构造函数只能给对象添加属性，不能合理的添加函数就太 LOW 了</li></ul><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><ul><li><p><strong>每一个函数天生自带一个成员，叫做 prototype，是一个对象空间</strong></p></li><li><p>即然每一个函数都有，构造函数也是函数，构造函数也有这个对象空间</p></li><li><p>这个 <code>prototype</code> 对象空间可以由函数名来访问</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype) <span class="comment">// 是一个对象</span></span><br></pre></td></tr></table></figure><ul><li>即然是个对象，那么我们就可以向里面放入一些东西</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">'prototype'</span></span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们发现了一个叫做 <code>prototype</code> 的空间是和函数有关联的</p></li><li><p>并且可以向里面存储一些东西</p></li><li><p>重点： <strong>在函数的 prototype 里面存储的内容，不是给函数使用的，是给函数的每一个实例化对象使用的</strong></p></li><li><p>那实例化对象怎么使用能？</p></li></ul><h3 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h3><ul><li><p><strong>每一个对象都天生自带一个成员，叫做 <code>__proto__</code>，是一个对象空间</strong></p></li><li><p>即然每一个对象都有，实例化对象也是对象，那么每一个实例化对象也有这个成员</p></li><li><p>这个 <code>__proto__</code> 对象空间是给每一个对象使用的</p></li><li><p>当你访问一个对象中的成员的时候</p><ul><li>如果这个对象自己本身有这个成员，那么就会直接给你结果</li><li>如果没有，就会去 <code>__proto__</code> 这个对象空间里面找，里面有的话就给你结果</li><li>未完待续。。。</li></ul></li><li><p>那么这个 <code>__proto__</code> 又指向哪里呢？</p><ul><li>这个对象是由哪个构造函数 new 出来的</li><li>那么这个对象的 <code>__proto__</code> 就指向这个构造函数的 <code>prototype</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.__proto__ === Person.prototype) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>我们发现实例化对象的 <code>__proto__</code> 和所属的构造函数的 <code>prototype</code> 是一个对象空间</li><li>我们可以通过构造函数名称来向 <code>prototype</code> 中添加成员</li><li>对象在访问的时候自己没有，可以自动去自己的 <code>__proto__</code> 中查找</li><li>那么，我们之前构造函数的缺点就可以解决了<ul><li>我们可以把函数放在构造函数的 <code>prototype</code> 中</li><li>实例化对象访问的时候，自己没有，就会自动去 <code>__proto__</code> 中找</li><li>那么也可以使用了</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello Person'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person()</span><br><span class="line">p1.sayHi()</span><br></pre></td></tr></table></figure><ul><li><code>p1</code> 自己没有 <code>sayHi</code> 方法，就会去自己的 <code>__proto__</code> 中查找</li><li><code>p1.__proto__</code> 就是 <code>Person.prototype</code></li><li>我们又向 <code>Person.prototype</code> 中添加了 <code>sayHi</code> 方法</li><li>所以 <code>p1.sayHi</code> 就可以执行了</li></ul></li><li><p>到这里，当我们实例化多个对象的时候，每个对象里面都没有方法</p><ul><li>都是去所属的构造函数的 <code>protottype</code> 中查找</li><li>那么每一个对象使用的函数，其实都是同一个函数</li><li>那么就解决了我们构造函数的缺点</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayHi === p2.sayHi)</span><br></pre></td></tr></table></figure><ul><li><code>p1</code> 是 <code>Person</code> 的一个实例</li><li><code>p2</code> 是 <code>Person</code> 的一个实例</li><li>也就是说 <code>p1.__proto__</code> 和 <code>p2.__proto__</code> 指向的都是 <code>Person.prototype</code></li><li>当 <code>p1</code> 去调用 <code>sayHi</code> 方法的时候是去 <code>Person.prototype</code> 中找</li><li>当 <code>p2</code> 去调用 <code>sayHi</code> 方法的时候是去 <code>Person.prototype</code> 中找</li><li>那么两个实例化对象就是找到的一个方法，也是执行的一个方法</li></ul></li><li><p>结论</p><ul><li>当我们写构造函数的时候</li><li><strong>属性我们直接写在构造函数体内</strong></li><li><strong>方法我们写在原型上</strong></li></ul></li></ul><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><ul><li>我们刚才聊过构造函数了，也聊了原型</li><li>那么问题出现了，我们说构造函数的 <code>prototype</code> 是一个对象</li><li>又说了每一个对象都天生自带一个 <code>__proto__</code> 属性</li><li>那么 <strong>构造函数的 prototype</strong> 里面的 <code>__proto__</code> 属性又指向哪里呢？</li></ul><h3 id="一个对象所属的构造函数"><a href="#一个对象所属的构造函数" class="headerlink" title="一个对象所属的构造函数"></a>一个对象所属的构造函数</h3><ul><li><p>每一个对象都有一个自己所属的构造函数</p></li><li><p>比如： 数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组本身也是一个对象</span></span><br><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br></pre></td></tr></table></figure><ul><li>以上两种方式都是创造一个数组</li><li>我们就说数组所属的构造函数就是 <code>Array</code></li></ul></li><li><p>比如： 函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数本身也是一个对象</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="built_in">Function</span>()</span><br></pre></td></tr></table></figure><ul><li>以上两种方式都是创造一个函数</li><li>我们就说函数所属的构造函数就是 <code>Function</code></li></ul></li></ul><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><ul><li>对象的 <code>__proto__</code> 里面也有一个成员叫做 <strong><code>constructor</code></strong></li><li>这个属性就是指向当前这个对象所属的构造函数</li></ul><h3 id="链状结构"><a href="#链状结构" class="headerlink" title="链状结构"></a>链状结构</h3><ul><li>当一个对象我们不知道准确的是谁构造的时候，我们呢就把它看成 <code>Object</code> 的实例化对象</li><li>也就是说，我们的 <strong>构造函数 的 prototype 的 <code>__proto__</code></strong> 指向的是 <code>Object.prototype</code></li><li>那么 <code>Object.prototype</code> 也是个对象，那么它的 <code>__proto__</code> 又指向谁呢？</li><li>因为 <code>Object</code> 的 js 中的顶级构造函数，我们有一句话叫 <strong>万物皆对象</strong></li><li>所以 <code>Object.prototype</code> 就到顶了，<code>Object.prototype</code> 的 <code>__proto__</code> 就是 null</li></ul><h3 id="原型链的访问原则"><a href="#原型链的访问原则" class="headerlink" title="原型链的访问原则"></a>原型链的访问原则</h3><ul><li>我们之前说过，访问一个对象的成员的时候，自己没有就会去 <code>__proto__</code> 中找</li><li>接下来就是，如果 <code>__proto__</code> 里面没有就再去 <code>__proto__</code> 里面找</li><li>一直找到 <code>Object.prototype</code> 里面都没有，那么就会返回 <code>undefiend</code></li></ul><h3 id="对象的赋值"><a href="#对象的赋值" class="headerlink" title="对象的赋值"></a>对象的赋值</h3><ul><li>到这里，我们就会觉得，如果是赋值的话，那么也会按照原型链的规则来</li><li>但是： <strong>并不是！并不是！并不是！</strong> 重要的事情说三遍</li><li>赋值的时候，就是直接给对象自己本身赋值<ul><li>如果原先有就是修改</li><li>原先没有就是添加</li><li>不会和 <code>__proto__</code> 有关系</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>到了这里，我们就发现了面向对象的思想模式了</p><ul><li>当我想完成一个功能的时候</li><li>先看看内置构造函数有没有能给我提供一个完成功能对象的能力</li><li>如果没有，我们就自己写一个构造函数，能创造出一个完成功能的对象</li><li>然后在用我们写的构造函数 new 一个对象出来，帮助我们完成功能就行了</li></ul></li><li><p>比如： tab选项卡</p><ul><li>我们要一个对象</li><li>对象包含一个属性：是每一个点击的按钮</li><li>对象包含一个属性：是每一个切换的盒子</li><li>对象包含一个方法：是点击按钮能切换盒子的能力</li><li>那么我们就需要自己写一个构造函数，要求 new 出来的对象有这些内容就好了</li><li>然后在用构造函数 new 一个对象就行了</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;首先，我们要明确，面向对象不是语法，是一个思想，是一种 &lt;strong&gt;编程模式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;面向： 面（脸），向（朝着）&lt;/li&gt;
&lt;li&gt;面向过程： 脸朝着过程 =》 关注着过程的编程模式&lt;/li&gt;
&lt;li&gt;面向对象： 脸朝着对象 =》 关注着对象的编程模式&lt;/li&gt;
&lt;li&gt;实现一个效果&lt;ul&gt;
&lt;li&gt;在面向过程的时候，我们要关注每一个元素，每一个元素之间的关系，顺序，。。。&lt;/li&gt;
&lt;li&gt;在面向过程的时候，我们要关注的就是找到一个对象来帮我做这个事情，我等待结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;例子 🌰： 我要吃面条&lt;ul&gt;
&lt;li&gt;面向过程&lt;ul&gt;
&lt;li&gt;用多少面粉&lt;/li&gt;
&lt;li&gt;用多少水&lt;/li&gt;
&lt;li&gt;怎么和面&lt;/li&gt;
&lt;li&gt;怎么切面条&lt;/li&gt;
&lt;li&gt;做开水&lt;/li&gt;
&lt;li&gt;煮面&lt;/li&gt;
&lt;li&gt;吃面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;面向对象&lt;ul&gt;
&lt;li&gt;找到一个面馆&lt;/li&gt;
&lt;li&gt;叫一碗面&lt;/li&gt;
&lt;li&gt;等着吃&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;面向对象就是对面向过程的封装&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我们以前的编程思想是，每一个功能，都按照需求一步一步的逐步完成&lt;/li&gt;
&lt;li&gt;我们以后的编程思想是，每一个功能，都先创造一个 &lt;strong&gt;面馆&lt;/strong&gt;，这个 &lt;strong&gt;面馆&lt;/strong&gt; 能帮我们作出一个 &lt;strong&gt;面（完成这个功能的对象）&lt;/strong&gt;，然后用 &lt;strong&gt;面馆&lt;/strong&gt; 创造出一个 &lt;strong&gt;面&lt;/strong&gt;，我们只要等到结果就好了&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="千锋" scheme="http://yoursite.com/categories/千锋/"/>
    
    
  </entry>
  
  <entry>
    <title>DAY1-2_分支结构</title>
    <link href="http://yoursite.com/2021/09/27/DAY1-2/"/>
    <id>http://yoursite.com/2021/09/27/DAY1-2/</id>
    <published>2021-09-27T05:49:59.000Z</published>
    <updated>2021-10-11T12:14:46.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><ul><li>我们的 js 代码都是顺序执行的（从上到下）</li><li>逻辑分支就是根据我们设定好的条件来决定要不要执行某些代码</li></ul><h2 id="IF-条件分支结构"><a href="#IF-条件分支结构" class="headerlink" title="IF 条件分支结构"></a>IF 条件分支结构</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><ul><li><p>通过一个 if 语句来决定代码执行与否</p></li><li><p>语法： <code>if (条件) { 要执行的代码 }</code></p></li><li><p>通过 <code>()</code> 里面的条件是否成立来决定 <code>{}</code> 里面的代码是否执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件为 true 的时候执行 &#123;&#125; 里面的代码</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  alert(<span class="string">'因为条件是 true，我会执行'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件为 false 的时候不执行 &#123;&#125; 里面的代码</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">alert(<span class="string">'因为条件是 false，我不会执行'</span>)    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h3 id="if-else-语句"><a href="#if-else-语句" class="headerlink" title="if else 语句"></a>if else 语句</h3><ul><li><p>通过 if 条件来决定，执行哪一个 <code>{}</code> 里面的代码</p></li><li><p>语法： <code>if (条件) { 条件为 true 的时候执行 } else { 条件为 false 的时候执行 }</code></p></li><li><p>两个 <code>{}</code> 内的代码一定有一个会执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件为 true 的时候，会执行 if 后面的 &#123;&#125; </span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  alert(<span class="string">'因为条件是 true，我会执行'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">'因为条件是 true，我不会执行'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件为 false 的时候，会执行 else 后面的 &#123;&#125;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  alert(<span class="string">'因为条件为 false，我不会执行'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">'因为条件为 false，我会执行'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="if-else-if-…-语句"><a href="#if-else-if-…-语句" class="headerlink" title="if else if … 语句"></a>if else if … 语句</h3><ul><li><p>可以通过 if 和 else if 来设置多个条件进行判断</p></li><li><p>语法：<code>if (条件1) { 条件1为 true 的时候执行 } else if (条件2) { 条件2为 true 的时候执行 }</code></p></li><li><p>会从头开始依次判断条件</p><ul><li>如果第一个条件为 true 了，那么就会执行后面的 <code>{}</code> 里面的内容</li><li>如果第一个条件为 false，那么就会判断第二个条件，依次类推</li></ul></li><li><p>多个 <code>{}</code> ，只会有一个被执行，一旦有一个条件为 true 了，后面的就不在判断了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个条件为 true，第二个条件为 false，最终会打印 “我是代码段1”</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  alert(<span class="string">'我是代码段1'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">alert(<span class="string">'我是代码段2'</span>)           </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个条件为 true，第二个条件为 true，最终会打印 “我是代码段1”</span></span><br><span class="line"><span class="comment">// 因为只要前面有一个条件满足了，就不会继续判断了</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  alert(<span class="string">'我是代码段1'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  alert(<span class="string">'我是代码段2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个条件为 false，第二个条件为 true，最终会打印 “我是代码段2”</span></span><br><span class="line"><span class="comment">// 只有前一个条件为 false 的时候才会继续向后判断</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  alert(<span class="string">'我是代码段1'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  alert(<span class="string">'我是代码段2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个条件为 false，第二个条件为 false，最终什么也不会发生</span></span><br><span class="line"><span class="comment">// 因为当所有条件都为 false 的时候，两个 &#123;&#125; 里面的代码都不会执行</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  alert(<span class="string">'我是代码段1'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  alert(<span class="string">'我是代码段2'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="if-else-if-…-else-语句"><a href="#if-else-if-…-else-语句" class="headerlink" title="if else if … else 语句"></a>if else if … else 语句</h3><ul><li><p>和之前的 <code>if else if ...</code> 基本一致，只不过是在所有条件都不满足的时候，执行最后 else 后面的 <code>{}</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个条件为 false，第二个条件为 false，最终会打印 “我是代码段3”</span></span><br><span class="line"><span class="comment">// 只有前面所有的条件都不满足的时候会执行 else 后面的 &#123;&#125; 里面的代码</span></span><br><span class="line"><span class="comment">// 只要前面有一个条件满足了，那么后面的就都不会执行了</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  alert(<span class="string">'我是代码段1'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  alert(<span class="string">'我是代码段2'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">'我是代码段3'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="SWITCH-条件分支结构"><a href="#SWITCH-条件分支结构" class="headerlink" title="SWITCH 条件分支结构"></a>SWITCH 条件分支结构</h2><ul><li><p>也是条件判断语句的一种</p></li><li><p>是对于某一个变量的判断</p></li><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (要判断的变量) &#123;</span><br><span class="line">  <span class="keyword">case</span> 情况<span class="number">1</span>:</span><br><span class="line">    情况<span class="number">1</span>要执行的代码</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> 情况<span class="number">2</span>:</span><br><span class="line">    情况<span class="number">2</span>要执行的代码</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> 情况<span class="number">3</span>:</span><br><span class="line">    情况<span class="number">3</span>要执行的代码</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    上述情况都不满足的时候执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>要判断某一个变量 等于 某一个值得时候使用</li></ul></li><li><p>例子🌰： 根据变量给出的数字显示是星期几</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> week = <span class="number">1</span></span><br><span class="line"><span class="keyword">switch</span> (week) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    alert(<span class="string">'星期一'</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    alert(<span class="string">'星期二'</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    alert(<span class="string">'星期三'</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    alert(<span class="string">'星期四'</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    alert(<span class="string">'星期五'</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    alert(<span class="string">'星期六'</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    alert(<span class="string">'星期日'</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    alert(<span class="string">'请输入一个 1 ～ 7 之间的数字'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="三元运算（扩展）"><a href="#三元运算（扩展）" class="headerlink" title="三元运算（扩展）"></a>三元运算（扩展）</h2><ul><li><p>三元运算，就是用 <strong>两个符号</strong> 组成一个语句</p></li><li><p>三元运算只是对 <strong>if else</strong> 语句的一个简写形式</p></li><li><p>语法： <code>条件 ? 条件为 true 的时候执行 : 条件为 false 的时候执行</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">age &gt;= <span class="number">18</span> ? alert(<span class="string">'已经成年'</span>) : alert(<span class="string">'没有成年'</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;分支结构&quot;&gt;&lt;a href=&quot;#分支结构&quot; class=&quot;headerlink&quot; title=&quot;分支结构&quot;&gt;&lt;/a&gt;分支结构&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;我们的 js 代码都是顺序执行的（从上到下）&lt;/li&gt;
&lt;li&gt;逻辑分支就是根据我们设定好的条件来决定要不要执行某些代码&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;IF-条件分支结构&quot;&gt;&lt;a href=&quot;#IF-条件分支结构&quot; class=&quot;headerlink&quot; title=&quot;IF 条件分支结构&quot;&gt;&lt;/a&gt;IF 条件分支结构&lt;/h2&gt;&lt;h3 id=&quot;if-语句&quot;&gt;&lt;a href=&quot;#if-语句&quot; class=&quot;headerlink&quot; title=&quot;if 语句&quot;&gt;&lt;/a&gt;if 语句&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过一个 if 语句来决定代码执行与否&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;语法： &lt;code&gt;if (条件) { 要执行的代码 }&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过 &lt;code&gt;()&lt;/code&gt; 里面的条件是否成立来决定 &lt;code&gt;{}&lt;/code&gt; 里面的代码是否执行&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 条件为 true 的时候执行 &amp;#123;&amp;#125; 里面的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alert(&lt;span class=&quot;string&quot;&gt;&#39;因为条件是 true，我会执行&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 条件为 false 的时候不执行 &amp;#123;&amp;#125; 里面的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	alert(&lt;span class=&quot;string&quot;&gt;&#39;因为条件是 false，我不会执行&#39;&lt;/span&gt;)    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="千锋" scheme="http://yoursite.com/categories/千锋/"/>
    
    
  </entry>
  
  <entry>
    <title>DAY1-3_循环结构</title>
    <link href="http://yoursite.com/2021/09/27/DAY1-3/"/>
    <id>http://yoursite.com/2021/09/27/DAY1-3/</id>
    <published>2021-09-27T05:49:59.000Z</published>
    <updated>2021-10-11T12:14:56.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><ul><li>循环结构，就是根据某些给出的条件，重复的执行同一段代码</li><li>循环必须要有某些固定的内容组成<ol><li>初始化</li><li>条件判断</li><li>要执行的代码</li><li>自身改变</li></ol></li></ul><h2 id="WHILE-循环"><a href="#WHILE-循环" class="headerlink" title="WHILE 循环"></a>WHILE 循环</h2><ul><li><p><code>while</code>，中文叫 当…时，其实就是当条件满足时就执行代码，一旦不满足了就不执行了</p></li><li><p>语法 <code>while (条件) { 满足条件就执行 }</code></p></li><li><p>因为满足条件就执行，所以我们写的时候一定要注意，就是设定一个边界值，不然就一直循环下去了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 初始化条件</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 2. 条件判断</span></span><br><span class="line"><span class="keyword">while</span> (num &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="comment">// 3. 要执行的代码</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'当前的 num 的值是 '</span> + num)</span><br><span class="line">  <span class="comment">// 4. 自身改变</span></span><br><span class="line">  num = num + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果没有自身改变，那么就会一直循环不停了</li></ul></li></ul><a id="more"></a><h2 id="DO-WHILE-循环"><a href="#DO-WHILE-循环" class="headerlink" title="DO WHILE 循环"></a>DO WHILE 循环</h2><ul><li><p>是一个和 <code>while</code> 循环类似的循环</p></li><li><p><code>while</code> 会先进行条件判断，满足就执行，不满足直接就不执行了</p></li><li><p>但是 <code>do while</code> 循环是，先不管条件，先执行一回，然后在开始进行条件判断</p></li><li><p>语法： <code>do { 要执行的代码 } while (条件)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面这个代码，条件一开始就不满足，但是依旧会执行一次 do 后面 &#123;&#125; 内部的代码</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我执行了一次'</span>)</span><br><span class="line">  num = num + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">while</span> (num &lt; <span class="number">10</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="FOR-循环"><a href="#FOR-循环" class="headerlink" title="FOR 循环"></a>FOR 循环</h2><ul><li><p>和 <code>while</code> 和 <code>do while</code> 循环都不太一样的一种循环结构</p></li><li><p>道理是和其他两种一样的，都是循环执行代码的</p></li><li><p>语法： <code>for (var i = 0; i &lt; 10; i++) { 要执行的代码 }</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把初始化，条件判断，自身改变，写在了一起</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 这里写的是要执行的代码</span></span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台会依次输出 1 ~ 10</span></span><br></pre></td></tr></table></figure></li><li><p>这个只是看起来不太舒服，但是用起来比较好用</p></li></ul><h2 id="BREAK-终止循环"><a href="#BREAK-终止循环" class="headerlink" title="BREAK 终止循环"></a>BREAK 终止循环</h2><ul><li><p>在循环没有进行完毕的时候，因为我设置的条件满足，提前终止循环</p></li><li><p>比如：我要吃五个包子，吃到三个的时候，不能在吃了，我就停止吃包子这个事情</p></li><li><p>要终止循环，就可以直接使用 <code>break</code> 关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 没循环一次，吃一个包子</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我吃了一个包子'</span>)</span><br><span class="line">  <span class="comment">// 当 i 的值为 3 的时候，条件为 true，执行 &#123;&#125; 里面的代码终止循环</span></span><br><span class="line">  <span class="comment">// 循环就不会继续向下执行了，也就没有 4 和 5 了</span></span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="CONTINUE-结束本次循环"><a href="#CONTINUE-结束本次循环" class="headerlink" title="CONTINUE 结束本次循环"></a>CONTINUE 结束本次循环</h2><ul><li><p>在循环中，把循环的本次跳过去，继续执行后续的循环</p></li><li><p>比如：吃五个包子，到第三个的时候，第三个掉地下了，不吃了，跳过第三个，继续吃第四个和第五个</p></li><li><p>跳过本次循环，就可以使用 <code>continue</code> 关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 当 i 的值为 3 的时候，执行 &#123;&#125; 里面的代码</span></span><br><span class="line">  <span class="comment">// &#123;&#125; 里面有 continue，那么本次循环后面的代码就都不执行了</span></span><br><span class="line">  <span class="comment">// 自动算作 i 为 3 的这一次结束了，去继续执行 i = 4 的那次循环了</span></span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这个是第三个包子，掉地下了，我不吃了'</span>)</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我吃了一个包子'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;循环结构&quot;&gt;&lt;a href=&quot;#循环结构&quot; class=&quot;headerlink&quot; title=&quot;循环结构&quot;&gt;&lt;/a&gt;循环结构&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;循环结构，就是根据某些给出的条件，重复的执行同一段代码&lt;/li&gt;
&lt;li&gt;循环必须要有某些固定的内容组成&lt;ol&gt;
&lt;li&gt;初始化&lt;/li&gt;
&lt;li&gt;条件判断&lt;/li&gt;
&lt;li&gt;要执行的代码&lt;/li&gt;
&lt;li&gt;自身改变&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;WHILE-循环&quot;&gt;&lt;a href=&quot;#WHILE-循环&quot; class=&quot;headerlink&quot; title=&quot;WHILE 循环&quot;&gt;&lt;/a&gt;WHILE 循环&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;while&lt;/code&gt;，中文叫 当…时，其实就是当条件满足时就执行代码，一旦不满足了就不执行了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;语法 &lt;code&gt;while (条件) { 满足条件就执行 }&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;因为满足条件就执行，所以我们写的时候一定要注意，就是设定一个边界值，不然就一直循环下去了&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1. 初始化条件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2. 条件判断&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (num &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 3. 要执行的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;当前的 num 的值是 &#39;&lt;/span&gt; + num)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 4. 自身改变&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  num = num + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;如果没有自身改变，那么就会一直循环不停了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="千锋" scheme="http://yoursite.com/categories/千锋/"/>
    
    
  </entry>
  
  <entry>
    <title>DAY1-1_JavaScript基础语法</title>
    <link href="http://yoursite.com/2021/09/27/DAY1-1/"/>
    <id>http://yoursite.com/2021/09/27/DAY1-1/</id>
    <published>2021-09-27T05:49:59.000Z</published>
    <updated>2021-10-11T12:13:45.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript基础语法"><a href="#JavaScript基础语法" class="headerlink" title="JavaScript基础语法"></a>JavaScript基础语法</h1><ul><li><code>HTML</code> ：标记语言</li><li><code>JavaScript</code> ：编程语言</li></ul><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><h3 id="JavaScript发展历史（JS）"><a href="#JavaScript发展历史（JS）" class="headerlink" title="JavaScript发展历史（JS）"></a>JavaScript发展历史（JS）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 1994年，网景公司(Netscape)发布了Navigator浏览器0.9版，这是世界上第一款比较成熟的网络浏览器，轰动一时。但是这是一款名副其实的浏览器--只能浏览页面，浏览器无法与用户互动,当时解决这个问题有两个办法，一个是采用现有的语言,许它们直接嵌入网页。另一个是发明一种全新的语言。</span><br><span class="line">liveScript ==&gt; javaScript ==&gt; ECMAscript</span><br><span class="line"></span><br><span class="line">2. 1995年Sun公司将Oak语言改名为Java，正式向市场推出。Sun公司大肆宣传，许诺这种语言可以&quot;一次编写，到处运 行&quot;(Write Once, Run Anywhere)，它看上去很可能成为未来的主宰。</span><br><span class="line"></span><br><span class="line">3. 网景公司动了心，决定与Sun公司结成联盟</span><br><span class="line"></span><br><span class="line">4. 34岁的系统程序员Brendan Eich登场了。1995年4月，网景公司录用了他,他只用10天时间就把Javascript设计出来了。（多肽语言）</span><br><span class="line"></span><br><span class="line">5. (1)借鉴C语言的基本语法; (2)借鉴Java语言的数据类型和内存管理; (3)借鉴Scheme语言，将函数提升到&quot;第一等公民&quot;(first class)的地位; (4)借鉴Self语言，使用基于原型(prototype)的继承机制。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="JavaScript能干什么"><a href="#JavaScript能干什么" class="headerlink" title="JavaScript能干什么"></a>JavaScript能干什么</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 常见的网页效果【表单验证，轮播图。。。】</span><br><span class="line">2. 与H5配合实现游戏【水果忍者： http://www.jq22.com/demo/html5-fruit-ninja/】</span><br><span class="line">3. 实现应用级别的程序【http://naotu.baidu.com】</span><br><span class="line">4. 实现统计效果【http://echarts.baidu.com/examples/】</span><br><span class="line">5. 地理定位等功能【http://lbsyun.baidu.com/jsdemo.htm#i4_5】</span><br><span class="line">6. 在线学编程【https://codecombat.163.com/play/】</span><br><span class="line">7. js可以实现人工智能【面部识别】</span><br><span class="line">8. 。。。</span><br></pre></td></tr></table></figure><h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. ECMASCRIPT: 定义了javascript的语法规范,描述了语言的基本语法和数据类型</span><br><span class="line">2. BOM (Browser Object Model): 浏览器对象模型</span><br><span class="line">  - 有一套成熟的可以操作浏览器的 API，通过 BOM 可以操作浏览器。比如： 弹出框、浏览器跳转、获取分辨率等</span><br><span class="line">3. DOM (Document Object Model): 文档对象模型</span><br><span class="line">  - 有一套成熟的可以操作页面元素的 API，通过 DOM 可以操作页面中的元素。比如： 增加个 div，减少个 div，给div 换个位置等</span><br></pre></td></tr></table></figure><p>总结： <strong>JS 就是通过固定的语法去操作 浏览器 和 标签结构 来实现网页上的各种效果</strong></p><h2 id="JavaScript代码的书写位置"><a href="#JavaScript代码的书写位置" class="headerlink" title="JavaScript代码的书写位置"></a>JavaScript代码的书写位置</h2><ul><li>和 <code>css</code> 一样，我们的 <code>js</code> 也可以有多种方式书写在页面上让其生效</li><li><code>js</code> 也有多种方式书写，分为 <strong>行内式</strong>， <strong>内嵌式</strong>，<strong>外链式</strong></li></ul><h3 id="行内式-JS-代码（不推荐）"><a href="#行内式-JS-代码（不推荐）" class="headerlink" title="行内式 JS 代码（不推荐）"></a>行内式 JS 代码（不推荐）</h3><ul><li>写在标签上的 js 代码需要依靠事件（行为）来触发</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 写在 a 标签的 href 属性上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert('我是一个弹出层');"</span>&gt;</span>点击一下试试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 写在其他元素上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('我是一个弹出层')"</span>&gt;</span>点一下试试看<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">注：onclick 是一个事件（点击事件），当点击元素的时候执行后面的 js 代码</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内嵌式-JS-代码"><a href="#内嵌式-JS-代码" class="headerlink" title="内嵌式 JS 代码"></a>内嵌式 JS 代码</h3><ul><li>内嵌式的 js 代码会在页面打开的时候直接触发</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 html 页面书写一个 script 标签，标签内部书写 js 代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">'我是一个弹出层'</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">注：script 标签可以放在 head 里面也可以放在 body 里面</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="外链式-JS-代码（推荐）"><a href="#外链式-JS-代码（推荐）" class="headerlink" title="外链式 JS 代码（推荐）"></a>外链式 JS 代码（推荐）</h3><ul><li>外链式 js 代码只要引入了 html 页面，就会在页面打开的时候直接触发</li><li>新建一个 <code>.js</code> 后缀的文件，在文件内书写 js 代码，把写好的 js 文件引入 html 页面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是 index.js 文件</span></span><br><span class="line">alert(<span class="string">'我是一个弹出层'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 我是一个 html 文件 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过 script 标签的 src 属性，把写好的 js 文件引入页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 一个页面可以引入多个 js 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index2.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index3.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JS-中的注释"><a href="#JS-中的注释" class="headerlink" title="JS 中的注释"></a>JS 中的注释</h2><ul><li>学习一个语言，先学习一个语言的注释，因为注释是给我们自己看的，也是给开发人员看的</li><li>写好一个注释，有利于我们以后阅读代码</li></ul><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><ul><li>一般就是用来描述下面一行代码的作用</li><li>可以直接写两个 <code>/</code> ，也可以按 <code>ctrl + /</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我是一个单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面代码表示在浏览器里面出现一个弹出层</span></span><br><span class="line">alert(<span class="string">'我是一个弹出层'</span>)</span><br></pre></td></tr></table></figure><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><ul><li>一般用来写一大段话，或者注释一段代码</li><li>可以直接写 <code>/**/</code> 然后在两个星号中间写注释，也可以按 <code>shift + alt + a</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">我是一个多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注释的代码不会执行</span></span><br><span class="line"><span class="comment">alert('我是一个弹出层')</span></span><br><span class="line"><span class="comment">alert('我是一个弹出层')</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">alert(<span class="string">'我是一个弹出层'</span>)</span><br></pre></td></tr></table></figure><h2 id="变量（重点）"><a href="#变量（重点）" class="headerlink" title="变量（重点）"></a>变量（重点）</h2><ul><li>变量指的是在程序中保存数据的一个容器</li><li>变量是计算机内存中存储数据的标识符，根据变量名称可以获取到内存中存储的数据</li><li>也就是说，我们向内存中存储了一个数据，然后要给这个数据起一个名字，为了是我们以后再次找到他</li><li>语法： <code>var 变量名 = 值</code></li></ul><h3 id="定义变量及赋值"><a href="#定义变量及赋值" class="headerlink" title="定义变量及赋值"></a>定义变量及赋值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个变量</span></span><br><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给一个变量赋值</span></span><br><span class="line">num = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个变量的同时给其赋值</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">200</span>;</span><br></pre></td></tr></table></figure><ul><li>注意：<ol><li>一个变量名只能存储一个值</li><li>当再次给一个变量赋值的时候，前面一次的值就没有了</li><li>变量名称区分大小写（JS 区分大小写）</li></ol></li></ul><h3 id="变量的命名规则和命名规范"><a href="#变量的命名规则和命名规范" class="headerlink" title="变量的命名规则和命名规范"></a>变量的命名规则和命名规范</h3><ul><li>规则： 必须遵守的，不遵守就是错<ol><li>一个变量名称可以由 <strong>数字</strong>、<strong>字母</strong>、<strong>英文下划线（_）</strong>、<strong>美元符号（$）</strong> 组成</li><li>严格区分大小写</li><li>不能由数字开头，不要使用中文汉字命名</li><li>不能是 <strong>保留字</strong> 或者 <strong>关键字</strong></li><li>不要出现空格</li></ol></li><li>规范： 建议遵守的（开发者默认），不遵守不会报错<ol><li>变量名尽量有意义（语义化）</li><li>遵循驼峰命名规则，由多个单词组成的时候，从第二个单词开始首字母大写</li></ol></li></ul><h2 id="数据类型（重点）"><a href="#数据类型（重点）" class="headerlink" title="数据类型（重点）"></a>数据类型（重点）</h2><ul><li>是指我们存储在内存中的数据的类型</li><li>我们通常分为两大类 <strong>基本数据类型</strong> 和 <strong>复杂数据类型</strong></li></ul><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ol><li>数值类型（number）<ul><li>一切数字都是数值类型（包括二进制，十进制，十六进制等）</li><li>NaN（not a number），一个非数字</li></ul></li><li>字符串类型（string）<ul><li>被引号包裹的所有内容（可以是单引号也可以是双引号）</li></ul></li><li>布尔类型（boolean）<ul><li>只有两个（true 或者 false）</li></ul></li><li>null类型（null）<ul><li>只有一个，就是 null，表示空的意思</li></ul></li><li>undefined类型（undefined）<ul><li>只有一个，就是 undefined，表示没有值的意思</li></ul></li></ol><h3 id="复杂数据类型（暂时先不讲）"><a href="#复杂数据类型（暂时先不讲）" class="headerlink" title="复杂数据类型（暂时先不讲）"></a>复杂数据类型（暂时先不讲）</h3><ol><li>对象类型（object）</li><li>函数类型（function）</li><li>。。。</li></ol><h2 id="判断数据类型"><a href="#判断数据类型" class="headerlink" title="判断数据类型"></a>判断数据类型</h2><ul><li>既然已经把数据分开了类型，那么我们就要知道我们存储的数据是一个什么类型的数据</li><li>使用 <code>typeof</code> 关键字来进行判断</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种使用方式</span></span><br><span class="line"><span class="keyword">var</span> n1 = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> n1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种使用方式</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">'abcdefg'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(s1));</span><br></pre></td></tr></table></figure><h3 id="判断一个变量是不是数字"><a href="#判断一个变量是不是数字" class="headerlink" title="判断一个变量是不是数字"></a>判断一个变量是不是数字</h3><ul><li>可以使用 <code>isNaN</code> 这个方法来判断一个变量是不是数字</li><li><code>isNaN</code> ：is not a number</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果变量是一个数字</span></span><br><span class="line"><span class="keyword">var</span> n1 = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(n1)); <span class="comment">//=&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果变量不是一个数字</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">'Jack'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(s1)); <span class="comment">//=&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><ul><li>数据类型之间的转换，比如数字转成字符串，字符串转成布尔，布尔转成数字等</li></ul><h3 id="其他数据类型转成数值"><a href="#其他数据类型转成数值" class="headerlink" title="其他数据类型转成数值"></a>其他数据类型转成数值</h3><ol><li><p><code>Number(变量)</code></p><ul><li>可以把一个变量强制转换成数值类型</li><li>可以转换小数，会保留小数</li><li>可以转换布尔值</li><li>遇到不可转换的都会返回 NaN</li></ul></li><li><p><code>parseInt(变量)</code></p><ul><li>从第一位开始检查，是数字就转换，知道一个不是数字的内容</li><li>开头就不是数字，那么直接返回 NaN</li><li>不认识小数点，只能保留整数</li></ul></li><li><p><code>parseFloat(变量)</code></p><ul><li><p>从第一位开始检查，是数字就转换，知道一个不是数字的内容</p></li><li><p>开头就不是数字，那么直接返回 NaN</p></li><li><p>认识一次小数点</p></li></ul></li><li><p>除了加法以外的数学运算</p><ul><li>运算符两边都是可运算数字才行</li><li>如果运算符任何一遍不是一个可运算数字，那么就会返回 NaN</li><li>加法不可以用</li></ul></li></ol><h3 id="其他数据类型转成字符串"><a href="#其他数据类型转成字符串" class="headerlink" title="其他数据类型转成字符串"></a>其他数据类型转成字符串</h3><ol><li><code>变量.toString()</code><ul><li>有一些数据类型不能使用 <code>toString()</code> 方法，比如 undefined 和 null</li></ul></li><li><code>String(变量)</code><ul><li>所有数据类型都可以</li></ul></li><li>使用加法运算<ul><li>在 JS 里面，<code>+</code> 由两个含义</li><li>字符串拼接： 只要 <code>+</code> 任意一边是字符串，就会进行字符串拼接</li><li>加法运算：只有 <code>+</code> 两边都是数字的时候，才会进行数学运算</li></ul></li></ol><h3 id="其他数据类型转成布尔"><a href="#其他数据类型转成布尔" class="headerlink" title="其他数据类型转成布尔"></a>其他数据类型转成布尔</h3><ol><li><code>Boolean(变量)</code><ul><li>在 js 中，只有 <code>&#39;&#39;</code>、<code>0</code>、<code>null</code>、<code>undefined</code>、<code>NaN</code>，这些是 false，其余都是 true</li></ul></li></ol><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li>就是在代码里面进行运算的时候使用的符号，不光只是数学运算，我们在 js 里面还有很多的运算方式</li></ul><h3 id="数学运算符"><a href="#数学运算符" class="headerlink" title="数学运算符"></a>数学运算符</h3><ol><li><p><code>+</code></p><ul><li>只有符号两边都是数字的时候才会进行加法运算</li><li>只要符号任意一边是字符串类型，就会进行字符串拼接</li></ul></li><li><p><code>-</code></p><ul><li><p>会执行减法运算</p></li><li><p>会自动把两边都转换成数字进行运算</p></li></ul></li><li><p><code>*</code></p><ul><li>会执行乘法运算</li><li>会自动把两边都转换成数字进行运算</li></ul></li><li><p><code>/</code></p><ul><li>会执行除法运算</li><li>会自动把两边都转换成数字进行运算</li></ul></li><li><p><code>%</code></p><ul><li>会执行取余运算</li><li>会自动把两边都转换成数字进行运算</li></ul></li></ol><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ol><li><p><code>=</code></p><ul><li>就是把 <code>=</code> 右边的赋值给等号左边的变量名</li><li><code>var num = 100</code></li><li>就是把 100 赋值给 num 变量</li><li>那么 num 变量的值就是 100</li></ul></li><li><p><code>+=</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">a += <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//=&gt; 20</span></span><br></pre></td></tr></table></figure><ul><li><code>a += 10</code> 等价于 <code>a = a + 10</code></li></ul></li><li><p><code>-=</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">a -= <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//=&gt; 0</span></span><br></pre></td></tr></table></figure><ul><li><code>a -= 10</code> 等价于 <code>a = a - 10</code></li></ul></li><li><p><code>*=</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">a *= <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//=&gt; 100</span></span><br></pre></td></tr></table></figure><ul><li><code>a *= 10</code> 等价于 <code>a = a * 10</code></li></ul></li><li><p><code>/+</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">a /= <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//=&gt; 1</span></span><br></pre></td></tr></table></figure><ul><li><code>a /= 10</code> 等价于 <code>a = a / 10</code></li></ul></li><li><p><code>%=</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">a %= <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//=&gt; 0</span></span><br></pre></td></tr></table></figure><ul><li><code>a %= 10</code> 等价于 <code>a = a % 10</code></li></ul></li></ol><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ol><li><code>==</code><ul><li>比较符号两边的值是否相等，不管数据类型</li><li><code>1 == &#39;1&#39;</code></li><li>两个的值是一样的，所以得到 true</li></ul></li><li><code>===</code><ul><li>比较符号两边的值和数据类型是否都相等</li><li><code>1 === &#39;1&#39;</code></li><li>两个值虽然一样，但是因为数据类型不一样，所以得到 false</li></ul></li><li><code>!=</code><ul><li>比较符号两边的值是否不等</li><li><code>1 != &#39;1&#39;</code></li><li>因为两边的值是相等的，所以比较他们不等的时候得到 false</li></ul></li><li><code>!==</code><ul><li>比较符号两边的数据类型和值是否不等</li><li><code>1 !== &#39;1&#39;</code></li><li>因为两边的数据类型确实不一样，所以得到 true</li></ul></li><li><code>&gt;=</code><ul><li>比较左边的值是否 大于或等于 右边的值</li><li><code>1 &gt;= 1</code>  true</li><li><code>1 &gt;= 0</code>  true</li><li><code>1 &gt;= 2</code>  false</li></ul></li><li><code>&lt;=</code><ul><li>比较左边的值是否 小于或等于 右边的值</li><li><code>1 &lt;= 2</code>  true</li><li><code>1 &lt;= 1</code>  true</li><li><code>1 &lt;= 0</code>  false </li></ul></li><li><code>&gt;</code><ul><li>比较左边的值是否 大于 右边的值</li><li><code>1 &gt; 0</code>  true</li><li><code>1 &gt; 1</code>  false</li><li><code>1 &gt; 2</code>  false</li></ul></li><li><code>&lt;</code><ul><li>比较左边的值是否 小于 右边的值</li><li><code>1 &lt; 2</code>  true</li><li><code>1 &lt; 1</code> false</li><li><code>1 &lt; 0</code> false</li></ul></li></ol><p>###逻辑运算符 </p><ol><li><code>&amp;&amp;</code><ul><li>进行 且 的运算</li><li>符号左边必须为 true 并且右边也是 true，才会返回 true</li><li>只要有一边不是 true，那么就会返回 false</li><li><code>true &amp;&amp; true</code>  true</li><li><code>true &amp;&amp; false</code>  false</li><li><code>false &amp;&amp; true</code>  false</li><li><code>false &amp;&amp; false</code>  false</li></ul></li><li><code>||</code><ul><li>进行 或 的运算</li><li>符号的左边为 true 或者右边为 true，都会返回 true</li><li>只有两边都是 false 的时候才会返回 false</li><li><code>true || true</code>  true</li><li><code>true || false</code>  true</li><li><code>false || true</code>  true</li><li><code>false || false</code>  false</li></ul></li><li><code>!</code><ul><li>进行 取反 运算</li><li>本身是 true 的，会变成 false</li><li>本身是 false 的，会变成 true</li><li><code>!true</code>  false</li><li><code>!false</code>  true</li></ul></li></ol><h3 id="自增自减运算符（一元运算符）"><a href="#自增自减运算符（一元运算符）" class="headerlink" title="自增自减运算符（一元运算符）"></a>自增自减运算符（一元运算符）</h3><ol><li><p><code>++</code></p><ul><li><p>进行自增运算</p></li><li><p>分成两种，<strong>前置++</strong> 和 <strong>后置++</strong></p></li><li><p>前置++，会先把值自动 +1，在返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(++a);</span><br><span class="line"><span class="comment">// 会返回 11，并且把 a 的值变成 11</span></span><br></pre></td></tr></table></figure></li><li><p>后置++，会先把值返回，在自动+1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a++);</span><br><span class="line"><span class="comment">// 会返回 10，然后把 a 的值变成 11</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>--</code></p><ul><li>进行自减运算</li><li>分成两种，<strong>前置–</strong> 和 <strong>后置–</strong></li><li>和 <code>++</code> 运算符道理一样</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;JavaScript基础语法&quot;&gt;&lt;a href=&quot;#JavaScript基础语法&quot; class=&quot;headerlink&quot; title=&quot;JavaScript基础语法&quot;&gt;&lt;/a&gt;JavaScript基础语法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTML&lt;/code&gt; ：标记语言&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JavaScript&lt;/code&gt; ：编程语言&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;h3 id=&quot;JavaScript发展历史（JS）&quot;&gt;&lt;a href=&quot;#JavaScript发展历史（JS）&quot; class=&quot;headerlink&quot; title=&quot;JavaScript发展历史（JS）&quot;&gt;&lt;/a&gt;JavaScript发展历史（JS）&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. 1994年，网景公司(Netscape)发布了Navigator浏览器0.9版，这是世界上第一款比较成熟的网络浏览器，轰动一时。但是这是一款名副其实的浏览器--只能浏览页面，浏览器无法与用户互动,当时解决这个问题有两个办法，一个是采用现有的语言,许它们直接嵌入网页。另一个是发明一种全新的语言。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	liveScript ==&amp;gt; javaScript ==&amp;gt; ECMAscript&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. 1995年Sun公司将Oak语言改名为Java，正式向市场推出。Sun公司大肆宣传，许诺这种语言可以&amp;quot;一次编写，到处运	 行&amp;quot;(Write Once, Run Anywhere)，它看上去很可能成为未来的主宰。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. 网景公司动了心，决定与Sun公司结成联盟&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4. 34岁的系统程序员Brendan Eich登场了。1995年4月，网景公司录用了他,他只用10天时间就把Javascript设计出来了。（多肽语言）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5. (1)借鉴C语言的基本语法; (2)借鉴Java语言的数据类型和内存管理; (3)借鉴Scheme语言，将函数提升到&amp;quot;第一等公民&amp;quot;(first class)的地位; (4)借鉴Self语言，使用基于原型(prototype)的继承机制。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="千锋" scheme="http://yoursite.com/categories/千锋/"/>
    
    
  </entry>
  
  <entry>
    <title>DAY1-4_函数（上）</title>
    <link href="http://yoursite.com/2021/09/27/DAY1-4/"/>
    <id>http://yoursite.com/2021/09/27/DAY1-4/</id>
    <published>2021-09-27T05:49:59.000Z</published>
    <updated>2021-10-11T12:15:04.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数（上）"><a href="#函数（上）" class="headerlink" title="函数（上）"></a>函数（上）</h1><ul><li>我们代码里面所说的函数和我们上学的时候学习的什么三角函数、二次函数之类的不是一个东西</li></ul><h2 id="函数的概念"><a href="#函数的概念" class="headerlink" title="函数的概念"></a>函数的概念</h2><ul><li><p>对于 js 来说，函数就是把任意一段代码放在一个 <strong>盒子</strong> 里面</p></li><li><p>在我想要让这段代码执行的时候，直接执行这个 <strong>盒子</strong> 里面的代码就行</p></li><li><p>先看一段代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个是我们以前写的一段代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数，这个 &#123;&#125; 就是那个 “盒子”</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这个函数我们以前写的代码</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h2 id="函数的两个阶段（重点）"><a href="#函数的两个阶段（重点）" class="headerlink" title="函数的两个阶段（重点）"></a>函数的两个阶段（重点）</h2><ul><li>按照我们刚才的说法，两个阶段就是 <strong>放在盒子里面</strong> 和 <strong>让盒子里面的代码执行</strong></li></ul><h3 id="函数定义阶段"><a href="#函数定义阶段" class="headerlink" title="函数定义阶段"></a>函数定义阶段</h3><ul><li><p>定义阶段就是我们把代码 <strong>放在盒子里面</strong></p></li><li><p>我们就要学习怎么 <strong>放进去</strong>，也就是书写一个函数</p></li><li>我们有两种定义方式 <strong>声明式</strong> 和 <strong>赋值式</strong></li></ul><h4 id="声明式"><a href="#声明式" class="headerlink" title="声明式"></a>声明式</h4><ul><li><p>使用 <code>function</code> 这个关键字来声明一个函数</p></li><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 一段代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// function: 声明函数的关键字，表示接下来是一个函数了</span></span><br><span class="line"><span class="comment">// fn: 函数的名字，我们自己定义的（遵循变量名的命名规则和命名规范）</span></span><br><span class="line"><span class="comment">// (): 必须写，是用来放参数的位置（一会我们再聊）</span></span><br><span class="line"><span class="comment">// &#123;&#125;: 就是我们用来放一段代码的位置（也就是我们刚才说的 “盒子”）</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="赋值式"><a href="#赋值式" class="headerlink" title="赋值式"></a>赋值式</h4><ul><li><p>其实就是和我们使用 <code>var</code> 关键字是一个道理了</p></li><li><p>首先使用 <code>var</code> 定义一个变量，把一个函数当作值直接赋值给这个变量就可以了</p></li><li><p>语法： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 一段代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不需要在 function 后面书写函数的名字了，因为在前面已经有了</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="函数调用阶段"><a href="#函数调用阶段" class="headerlink" title="函数调用阶段"></a>函数调用阶段</h3><ul><li>就是让 <strong>盒子里面</strong> 的代码执行一下</li><li>让函数执行</li><li>两种定义函数的方式不同，但是调用函数的方式都以一样的</li></ul><h4 id="调用一个函数"><a href="#调用一个函数" class="headerlink" title="调用一个函数"></a>调用一个函数</h4><ul><li><p>函数调用就是直接写 <code>函数名()</code> 就可以了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明式函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我是 fn 函数'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">fn()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值式函数</span></span><br><span class="line"><span class="keyword">var</span> fn2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我是 fn2 函数'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure><ul><li>注意： <strong>定义完一个函数以后，如果没有函数调用，那么写在 {} 里面的代码没有意义，只有调用以后才会执行</strong></li></ul></li></ul><h4 id="调用上的区别"><a href="#调用上的区别" class="headerlink" title="调用上的区别"></a>调用上的区别</h4><ul><li><p>虽然两种定义方式的调用都是一样的，但是还是有一些区别的</p></li><li><p>声明式函数： 调用可以在 <strong>定义之前或者定义之后</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以调用</span></span><br><span class="line">fn()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明式函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我是 fn 函数'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以调用</span></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure></li><li><p>赋值式函数： 调用只能在 <strong>定义之前</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 会报错</span></span><br><span class="line">fn()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值式函数</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我是 fn 函数'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以调用</span></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure></li></ul><h2 id="函数的参数（重点）"><a href="#函数的参数（重点）" class="headerlink" title="函数的参数（重点）"></a>函数的参数（重点）</h2><ul><li><p>我们在定义函数和调用函数的时候都出现过 <code>()</code></p></li><li><p>现在我们就来说一下这个 <code>()</code> 的作用</p></li><li><p>就是用来放参数的位置</p></li><li><p>参数分为两种 <strong>行参</strong> 和 <strong>实参</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">行参写在这里</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 一段代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(实参写在这里)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值式函数</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params">行参写在这里</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 一段代码</span></span><br><span class="line">&#125;</span><br><span class="line">fn(实参写在这里)</span><br></pre></td></tr></table></figure></li></ul><h3 id="行参和实参的作用"><a href="#行参和实参的作用" class="headerlink" title="行参和实参的作用"></a>行参和实参的作用</h3><ol><li><p>行参</p><ul><li><p>就是在函数内部可以使用的变量，在函数外部不能使用</p></li><li><p>每写一个单词，就相当于在函数内部定义了一个可以使用的变量（遵循变量名的命名规则和命名规范）</p></li><li><p>多个单词之间以 <code>,</code> 分隔</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 书写一个参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在函数内部就可以使用 num 这个变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 在函数内部就可以使用 num 这个变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 书写两个参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在函数内部就可以使用 num1 和 num2 这两个变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun1 = <span class="function"><span class="keyword">function</span> (<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在函数内部就可以使用 num1 和 num2 这两个变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果只有行参的话，那么在函数内部使用的值个变量是没有值的，也就是 <code>undefined</code></p></li><li><p><strong>行参的值是在函数调用的时候由实参决定的</strong></p></li></ul></li><li><p>实参</p><ul><li><p>在函数调用的时候给行参赋值的</p></li><li><p>也就是说，在调用的时候是给一个实际的内容的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 函数内部可以使用 num </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数的本次调用，书写的实参是 100</span></span><br><span class="line"><span class="comment">// 那么本次调用的时候函数内部的 num 就是 100</span></span><br><span class="line">fn(<span class="number">100</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数的本次调用，书写的实参是 200</span></span><br><span class="line"><span class="comment">// 那么本次调用的时候函数内部的 num 就是 200</span></span><br><span class="line">fn(<span class="number">200</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>函数内部的行参的值，由函数调用的时候传递的实参决定</strong></p></li><li><p><strong>多个参数的时候，是按照顺序一一对应的</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 函数内部可以使用 num1 和 num2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数本次调用的时候，书写的参数是 100 和 200</span></span><br><span class="line"><span class="comment">// 那么本次调用的时候，函数内部的 num1 就是 100，num2 就是 200</span></span><br><span class="line">fn(<span class="number">100</span>, <span class="number">200</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="参数个数的关系"><a href="#参数个数的关系" class="headerlink" title="参数个数的关系"></a>参数个数的关系</h3><ol><li><p>行参比实参少</p><ul><li><p>因为是按照顺序一一对应的</p></li><li><p>行参少就会拿不到实参给的值，所以在函数内部就没有办法用到这个值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 函数内部可以使用 num1 和 num2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本次调用的时候，传递了两个实参，100 200 和 300</span></span><br><span class="line"><span class="comment">// 100 对应了 num1，200 对应了 num2，300 没有对应的变量</span></span><br><span class="line"><span class="comment">// 所以在函数内部就没有办法依靠变量来使用 300 这个值</span></span><br><span class="line">fn(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="2"><li><p>行参比实参多</p><ul><li><p>因为是按照顺序一一对应的</p></li><li><p>所以多出来的行参就是没有值的，就是 <code>undefined</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num1, num2, num3</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 函数内部可以使用 num1 num2 和 num3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本次调用的时候，传递了两个实参，100 和 200</span></span><br><span class="line"><span class="comment">// 就分别对应了 num1 和 num2</span></span><br><span class="line"><span class="comment">// 而 num3 没有实参和其对应，那么 num3 的值就是 undefined</span></span><br><span class="line">fn(<span class="number">100</span>, <span class="number">200</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="函数的return（重点）"><a href="#函数的return（重点）" class="headerlink" title="函数的return（重点）"></a>函数的return（重点）</h2><ul><li>return 返回的意思，其实就是给函数一个 <strong>返回值</strong> 和 <strong>终断函数</strong></li></ul><h3 id="终断函数"><a href="#终断函数" class="headerlink" title="终断函数"></a>终断函数</h3><ul><li><p>当我开始执行函数以后，函数内部的代码就会从上到下的依次执行</p></li><li><p>必须要等到函数内的代码执行完毕</p></li><li><p>而 <code>return</code> 关键字就是可以在函数中间的位置停掉，让后面的代码不在继续执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 写了 return 以后，后面的 4 和 5 就不会继续执行了</span></span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure></li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul><li><p>函数调用本身也是一个表达式，表达式就应该有一个值出现</p></li><li><p>现在的函数执行完毕之后，是不会有结果出现的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如 1 + 2 是一个表达式，那么 这个表达式的结果就是 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> + <span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn() 也是一个表达式，这个表达式就没有结果出现</span></span><br><span class="line"><span class="built_in">console</span>.log(fn()) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li><p><code>return</code> 关键字就是可以给函数执行完毕一个结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 执行代码</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时，fn() 这个表达式执行完毕之后就有结果出现了</span></span><br><span class="line"><span class="built_in">console</span>.log(fn()) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><ul><li>我们可以在函数内部使用 <code>return</code> 关键把任何内容当作这个函数运行后的结果</li></ul></li></ul><h2 id="函数的优点"><a href="#函数的优点" class="headerlink" title="函数的优点"></a>函数的优点</h2><ul><li>函数就是对一段代码的封装，在我们想调用的时候调用</li><li>函数的几个优点<ol><li>封装代码，使代码更加简洁</li><li>复用，在重复功能的时候直接调用就好</li><li>代码执行时机，随时可以在我们想要执行的时候执行</li></ol></li></ul><h2 id="预解析（重点）"><a href="#预解析（重点）" class="headerlink" title="预解析（重点）"></a>预解析（重点）</h2><ul><li><strong>预解析</strong> 其实就是聊聊 js 代码的编译和执行</li><li>js 是一个解释型语言，就是在代码执行之前，先对代码进行通读和解释，然后在执行代码</li><li>也就是说，我们的 js 代码在运行的时候，会经历两个环节 <strong>解释代码</strong> 和 <strong>执行代码</strong></li></ul><h3 id="解释代码"><a href="#解释代码" class="headerlink" title="解释代码"></a>解释代码</h3><ul><li><p>因为是在所有代码执行之前进行解释，所以叫做 <strong>预解析（预解释）</strong></p></li><li><p>需要解释的内容有两个</p><ul><li>声明式函数<ul><li>在内存中先声明有一个变量名是函数名，并且这个名字代表的内容是一个函数</li></ul></li><li><code>var</code> 关键字<ul><li>在内存中先声明有一个变量名</li></ul></li></ul></li><li><p>看下面一段代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fn()</span><br><span class="line"><span class="built_in">console</span>.log(num)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我是 fn 函数'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>经过预解析之后可以变形为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我是 fn 函数'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num</span><br><span class="line"></span><br><span class="line">fn()</span><br><span class="line"><span class="built_in">console</span>.log(num)</span><br><span class="line">num = <span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>赋值是函数会按照 <code>var</code> 关键字的规则进行预解析</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;函数（上）&quot;&gt;&lt;a href=&quot;#函数（上）&quot; class=&quot;headerlink&quot; title=&quot;函数（上）&quot;&gt;&lt;/a&gt;函数（上）&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;我们代码里面所说的函数和我们上学的时候学习的什么三角函数、二次函数之类的不是一个东西&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;函数的概念&quot;&gt;&lt;a href=&quot;#函数的概念&quot; class=&quot;headerlink&quot; title=&quot;函数的概念&quot;&gt;&lt;/a&gt;函数的概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对于 js 来说，函数就是把任意一段代码放在一个 &lt;strong&gt;盒子&lt;/strong&gt; 里面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在我想要让这段代码执行的时候，直接执行这个 &lt;strong&gt;盒子&lt;/strong&gt; 里面的代码就行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;先看一段代码&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这个是我们以前写的一段代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 函数，这个 &amp;#123;&amp;#125; 就是那个 “盒子”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 这个函数我们以前写的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="千锋" scheme="http://yoursite.com/categories/千锋/"/>
    
    
  </entry>
  
  <entry>
    <title>DAY1-5_函数（下）</title>
    <link href="http://yoursite.com/2021/09/27/DAY1-5/"/>
    <id>http://yoursite.com/2021/09/27/DAY1-5/</id>
    <published>2021-09-27T05:49:59.000Z</published>
    <updated>2021-10-11T12:15:14.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数（下）"><a href="#函数（下）" class="headerlink" title="函数（下）"></a>函数（下）</h1><h2 id="作用域（重点）"><a href="#作用域（重点）" class="headerlink" title="作用域（重点）"></a>作用域（重点）</h2><ul><li>什么是作用域，就是一个变量可以生效的范围</li><li>变量不是在所有地方都可以使用的，而这个变量的使用范围就是作用域</li></ul><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><ul><li><p>全局作用域是最大的作用域</p></li><li><p>在全局作用域中定义的变量可以在任何地方使用</p></li><li><p>页面打开的时候，浏览器会自动给我们生成一个全局作用域 window</p></li><li><p>这个作用域会一直存在，直到页面关闭就销毁了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面两个变量都是存在在全局作用域下面的，都是可以在任意地方使用的</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">200</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><ul><li><p>局部作用域就是在全局作用域下面有开辟出来的一个相对小一些的作用域</p></li><li><p>在局部作用域中定义的变量只能在这个局部作用域内部使用</p></li><li><p><strong>在 JS 中只有函数能生成一个局部作用域，别的都不行</strong></p></li><li><p>每一个函数，都是一个局部作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个 num 是一个全局作用域下的变量 在任何地方都可以使用</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 下面这个变量就是一个 fn 局部作用域内部的变量</span></span><br><span class="line">  <span class="comment">// 只能在 fn 函数内部使用</span></span><br><span class="line">  <span class="keyword">var</span> num2 = <span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure></li></ul><h2 id="变量使用规则（重点）"><a href="#变量使用规则（重点）" class="headerlink" title="变量使用规则（重点）"></a>变量使用规则（重点）</h2><ul><li>有了作用域以后，变量就有了使用范围，也就有了使用规则</li><li>变量使用规则分为两种，<strong>访问规则</strong> 和 <strong>赋值规则</strong></li></ul><h3 id="访问规则"><a href="#访问规则" class="headerlink" title="访问规则"></a>访问规则</h3><ul><li><p>当我想获取一个变量的值的时候，我们管这个行为叫做 <strong>访问</strong></p></li><li><p>获取变量的规则： </p><ul><li>首先，在自己的作用域内部查找，如果有，就直接拿来使用</li><li>如果没有，就去上一级作用域查找，如果有，就拿来使用</li><li>如果没有，就继续去上一级作用域查找，依次类推</li><li>如果一直到全局作用域都没有这个变量，那么就会直接报错（该变量 is not defined）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num2 = <span class="number">200</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num3 = <span class="number">300</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(num3) <span class="comment">// 自己作用域内有，拿过来用</span></span><br><span class="line">    <span class="built_in">console</span>.log(num2) <span class="comment">// 自己作用域内没有，就去上一级，就是 fn 的作用域里面找，发现有，拿过来用</span></span><br><span class="line">    <span class="built_in">console</span>.log(num) <span class="comment">// 自己这没有，去上一级 fn 那里也没有，再上一级到全局作用域，发现有，直接用</span></span><br><span class="line">    <span class="built_in">console</span>.log(a) <span class="comment">// 自己没有，一级一级找上去到全局都没有，就会报错</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  fun()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure></li><li><p>变量的访问规则 也叫做 作用域的查找机制</p></li><li><p>作用域的查找机制只能是向上找，不能向下找</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 发现自己作用域没有，自己就是全局作用域，没有再上一级了，直接报错</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="赋值规则"><a href="#赋值规则" class="headerlink" title="赋值规则"></a>赋值规则</h3><ul><li><p>当你想给一个变量赋值的时候，那么就先要找到这个变量，在给他赋值</p></li><li><p>变量赋值规则：</p><ul><li>先在自己作用域内部查找，有就直接赋值</li><li>没有就去上一级作用域内部查找，有就直接赋值</li><li>在没有再去上一级作用域查找，有就直接赋值</li><li>如果一直找到全局作用域都没有，那么就把这个变量定义为全局变量，在给他赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  num = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn 调用以后，要给 num 赋值</span></span><br><span class="line"><span class="comment">// 查看自己的作用域内部没有 num 变量</span></span><br><span class="line"><span class="comment">// 就会向上一级查找</span></span><br><span class="line"><span class="comment">// 上一级就是全局作用域，发现依旧没有</span></span><br><span class="line"><span class="comment">// 那么就会把 num 定义为全局的变量，并为其赋值</span></span><br><span class="line"><span class="comment">// 所以 fn() 以后，全局就有了一个变量叫做 num 并且值是 100</span></span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><ul><li><p>什么是递归函数</p></li><li><p>在编程世界里面，递归就是一个自己调用自己的手段</p></li><li><p>递归函数： 一个函数内部，调用了自己，循环往复</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面这个代码就是一个最简单的递归函数</span></span><br><span class="line"><span class="comment">// 在函数内部调用了自己，函数一执行，就调用自己一次，在调用再执行，循环往复，没有止尽</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fn()</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure></li><li><p>其实递归函数和循环很类似</p></li><li><p>需要有初始化，自增，执行代码，条件判断的，不然就是一个没有尽头的递归函数，我们叫做 <strong>死递归</strong></p></li></ul><h2 id="简单实现一个递归"><a href="#简单实现一个递归" class="headerlink" title="简单实现一个递归"></a>简单实现一个递归</h2><ul><li><p>我们先在用递归函数简单实现一个效果</p></li><li><p>需求： 求 1 至 5 的和</p><ul><li>先算 1 + 2 得 3</li><li>再算 3 + 3 得 6</li><li>再算 6 + 4 得 10 </li><li>再算 10 + 5 得 15</li><li>结束</li></ul></li><li><p>开始书写，写递归函数先要写结束条件（为了避免出现 “死递归”）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 传递进来的是 1</span></span><br><span class="line">  <span class="comment">// 当 n === 5 的时候要结束</span></span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>再写不满足条件的时候我们的递归处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 传递进来的是 1</span></span><br><span class="line">  <span class="comment">// 当 n === 5 的时候要结束</span></span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 不满足条件的时候，就是当前数字 + 比自己大 1 的数字</span></span><br><span class="line">    <span class="keyword">return</span> n + add(n + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="简单了解对象"><a href="#简单了解对象" class="headerlink" title="简单了解对象"></a>简单了解对象</h2><ul><li><p>对象是一个复杂数据类型</p></li><li><p>其实说是复杂，但是没有很复杂，只不过是存储了一些基本数据类型的一个集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  num: <span class="number">100</span>,</span><br><span class="line">  str: <span class="string">'hello world'</span>,</span><br><span class="line">  boo: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里的 <code>{}</code> 和函数中的 <code>{}</code> 不一样</p></li><li><p>函数里面的是写代码的，而对象里面是写一些数据的</p></li><li><p><strong>对象就是一个键值对的集合</strong></p></li><li><p><code>{}</code> 里面的每一个键都是一个成员</p></li><li><p>也就是说，我们可以把一些数据放在一个对象里面，那么他们就互不干扰了</p></li><li><p>其实就是我们准备一个房子，把我们想要的数据放进去，然后把房子的地址给到变量名，当我们需要某一个数据的时候，就可以根据变量名里面存储的地址找到对应的房子，然后去房子里面找到对应的数据</p></li></ul><h3 id="创建一个对象"><a href="#创建一个对象" class="headerlink" title="创建一个对象"></a>创建一个对象</h3><ul><li><p>字面量的方式创建一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个空对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 像对象中添加成员</span></span><br><span class="line">obj.name = <span class="string">'Jack'</span></span><br><span class="line">obj.age = <span class="number">18</span></span><br></pre></td></tr></table></figure></li><li><p>内置构造函数的方式创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个空对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向对象中添加成员</span></span><br><span class="line">obj.name = <span class="string">'Rose'</span></span><br><span class="line">obj.age = <span class="number">20</span></span><br></pre></td></tr></table></figure><ul><li>Object 是 js 内置给我们的构造函数，用于创建一个对象使用的</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;函数（下）&quot;&gt;&lt;a href=&quot;#函数（下）&quot; class=&quot;headerlink&quot; title=&quot;函数（下）&quot;&gt;&lt;/a&gt;函数（下）&lt;/h1&gt;&lt;h2 id=&quot;作用域（重点）&quot;&gt;&lt;a href=&quot;#作用域（重点）&quot; class=&quot;headerlink&quot; title=&quot;作用域（重点）&quot;&gt;&lt;/a&gt;作用域（重点）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;什么是作用域，就是一个变量可以生效的范围&lt;/li&gt;
&lt;li&gt;变量不是在所有地方都可以使用的，而这个变量的使用范围就是作用域&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;全局作用域&quot;&gt;&lt;a href=&quot;#全局作用域&quot; class=&quot;headerlink&quot; title=&quot;全局作用域&quot;&gt;&lt;/a&gt;全局作用域&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;全局作用域是最大的作用域&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在全局作用域中定义的变量可以在任何地方使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;页面打开的时候，浏览器会自动给我们生成一个全局作用域 window&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这个作用域会一直存在，直到页面关闭就销毁了&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 下面两个变量都是存在在全局作用域下面的，都是可以在任意地方使用的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num2 = &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="千锋" scheme="http://yoursite.com/categories/千锋/"/>
    
    
  </entry>
  
  <entry>
    <title>DAY2-2_ES5/String</title>
    <link href="http://yoursite.com/2021/09/27/DAY2-2/"/>
    <id>http://yoursite.com/2021/09/27/DAY2-2/</id>
    <published>2021-09-27T05:49:59.000Z</published>
    <updated>2021-10-11T12:15:29.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES5-String"><a href="#ES5-String" class="headerlink" title="ES5/String"></a>ES5/String</h1><h2 id="严格模式（了解）"><a href="#严格模式（了解）" class="headerlink" title="严格模式（了解）"></a>严格模式（了解）</h2><ul><li>我们都知道 js 是一个相对不很严谨的语言</li><li>而且开发的时候，一些代码也不是很严格要求</li><li>而严格模式就是对开发的时候写的一些内容做了要求</li></ul><h3 id="开启严格模式"><a href="#开启严格模式" class="headerlink" title="开启严格模式"></a>开启严格模式</h3><ul><li><p>想开启严格模式，直接在代码最开始的位置写上字符串 <code>use strict</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="string">'use strtic'</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 下面代码书写就要按照严格模式来书写</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h3 id="严格模式的规则"><a href="#严格模式的规则" class="headerlink" title="严格模式的规则"></a>严格模式的规则</h3><ol><li><p>声明变量必须有 <code>var</code> 关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strtic'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line">num2 = <span class="number">200</span> <span class="comment">// 这个就会报错</span></span><br></pre></td></tr></table></figure><ul><li>之前了解过，在声明变量的时候，如果没有 var 关键字，那么按照作用域的规则会自动定义成全局变量</li><li>严格模式下不可以，会报错</li></ul></li><li><p>函数的行参不可以重复</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strtic'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">p1, p1</span>) </span>&#123;&#125; <span class="comment">// 直接就会报错</span></span><br></pre></td></tr></table></figure><ul><li>在非严格模式下，函数两个行参一样，是不会报错的，只不过就是相当于在函数内部只有一个变量了</li><li>但是在严格模式下会报错</li></ul></li><li><p>声明式函数调用的时候函数内部没有 this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'use strtic'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure><ul><li>本身，全局声明式函数在调用的时候，函数内部的 this 是指向 window 的</li><li>在严格模式下，是没有 this 的</li></ul></li></ol><h2 id="ES5-中常见的数组常用方法"><a href="#ES5-中常见的数组常用方法" class="headerlink" title="ES5 中常见的数组常用方法"></a>ES5 中常见的数组常用方法</h2><ul><li>之前我们讲过的数组常用方法都是 ES3 的方法</li><li>今天来说一些 ES5 中的方法</li></ul><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><ul><li><p><code>indexOf</code> 用来找到数组中某一项的索引</p></li><li><p>语法： <code>indexOf(你要找的数组中的项)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 indexOf 超找数组中的某一项</span></span><br><span class="line"><span class="keyword">var</span> index = arr.indexOf(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(index) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>我们要找的是数组中值为 3 的那一项</li><li>返回的就是值为 3 的那一项在该数组中的索引</li></ul></li><li><p>如果你要找的内容在数组中没有，那么就会返回 -1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 indexOf 超找数组中的某一项</span></span><br><span class="line"><span class="keyword">var</span> index = arr.indexOf(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(index) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><ul><li>你要找的值在数组中不存在，那么就会返回 -1</li></ul></li></ul><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><ul><li><p>和 for 循环一个作用，就是用来遍历数组的</p></li><li><p>语法：<code>arr.forEach(function (item, index, arr) {})</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 forEach 遍历数组</span></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// item 就是数组中的每一项</span></span><br><span class="line">  <span class="comment">// index 就是数组的索引</span></span><br><span class="line">  <span class="comment">// arr 就是原始数组</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'数组的第 '</span> + index + <span class="string">' 项的值是 '</span> + item + <span class="string">'，原始数组是'</span>, arr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>forEach() 的时候传递的那个函数，会根据数组的长度执行</li><li>数组的长度是多少，这个函数就会执行多少回</li></ul></li></ul><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><ul><li><p>和 forEach 类似，只不过可以对数组中的每一项进行操作，返回一个新的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 map 遍历数组</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// item 就是数组中的每一项</span></span><br><span class="line">  <span class="comment">// index 就是数组的索引</span></span><br><span class="line">  <span class="comment">// arr 就是原始数组</span></span><br><span class="line">  <span class="keyword">return</span> item + <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArr) <span class="comment">// [11, 12, 13]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><ul><li><p>和 map 的使用方式类似，按照我们的条件来筛选数组</p></li><li><p>把原始数组中满足条件的筛选出来，组成一个新的数组返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 filter 过滤数组</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// item 就是数组中的每一项</span></span><br><span class="line">  <span class="comment">// index 就是数组的索引</span></span><br><span class="line">  <span class="comment">// arr 就是原始数组</span></span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArr) <span class="comment">// [2, 3]</span></span><br></pre></td></tr></table></figure><ul><li>我们设置的条件就是 <code>&gt; 1</code></li><li>返回的新数组就会是原始数组中所有 <code>&gt; 1</code> 的项</li></ul></li></ul><h2 id="创建字符串（了解）"><a href="#创建字符串（了解）" class="headerlink" title="创建字符串（了解）"></a>创建字符串（了解）</h2><ul><li><p>我们创建字符串也分为两种方法 <strong>字面量</strong> 和 <strong>构造函数</strong></p></li><li><p>字面量： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'hello'</span></span><br></pre></td></tr></table></figure></li><li><p>构造函数创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="ASCII-字符集（了解）"><a href="#ASCII-字符集（了解）" class="headerlink" title="ASCII 字符集（了解）"></a>ASCII 字符集（了解）</h2><ul><li>我们都知道，计算机只能存储 <code>0101010</code> 这样的二进制数字</li><li>那么我们的 <code>a ~ z</code> / <code>A ~ Z</code> / <code>$</code> / <code>@</code> /… 之类的内容也有由二进制数字组成的</li><li>我们可以简单的理解为， <code>a ~ z</code> / <code>A ~ Z</code> / <code>$</code> / <code>@</code> /… 之类的内容都有一个自己的编号，然后在计算机存储的时候，是存储的这些编号，我们看的时候，也是通过这些编号在解析成我们要看到的内容给我们看到</li><li><img src="J:/qf(二阶段" alt>资料/day1-1/课程资料/课程资料/week2/assets/ASCII控制字符.png)</li><li><img src="J:/qf(二阶段" alt>资料/day1-1/课程资料/课程资料/week2/assets/ASCII显示字符.png)</li><li>上面的就是 ASCII 对照表，我们只需要知道他是这么存储的就好</li></ul><h3 id="unicode-编码"><a href="#unicode-编码" class="headerlink" title="unicode 编码"></a>unicode 编码</h3><ul><li>我们看到了，ASCII 只有这 128 个字符的编码结构</li><li>但是因为 ASCII 出现的比较早，而且是美国发明的，早起时候这些内容就够用了</li><li>因为存储一些英文的内容，传递一些英文的文章什么的都够用了</li><li>那么对于这个世界来说肯定是不够用的</li><li>因为我们的汉字没有办法存储，包括一些其他国家的语言也没有办法存储</li><li>所以就出现了 unicode 编码，也叫（万国码，统一码）</li><li>unicode 对照表就是一个和 ASCII 一样的对照表，只不过变得很大很大，因为存储的内容特别的多</li><li>而且包含了世界上大部分国家的文字，所以我们的文字和字符现在在存储的时候，都是按照 unicode 编码转换成数字进行存储</li><li>我们的 UTF-8 就是一种 8 位的unicode字符集</li></ul><h2 id="字符串的常用方法"><a href="#字符串的常用方法" class="headerlink" title="字符串的常用方法"></a>字符串的常用方法</h2><ul><li>我们操作字符串，也有一堆的方法来帮助我们操作</li><li>字符串和数组有一个一样的地方，也是按照索引来排列的</li></ul><h3 id="charAt"><a href="#charAt" class="headerlink" title="charAt"></a>charAt</h3><ul><li><p><code>charAt(索引)</code>  是找到字符串中指定索引位置的内容返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Jack'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 charAt 找到字符串中的某一个内容</span></span><br><span class="line"><span class="keyword">var</span> index = str.charAt(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(index) <span class="comment">// c</span></span><br></pre></td></tr></table></figure><ul><li>因为字符串也是按照索引进行排列的，也是同样从 0 开始</li><li>所以索引 2 的位置就是 c</li></ul></li><li><p>如果没有对应的索引，那么就会返回 空字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Jack'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 charAt 找到字符串中的某一个内容</span></span><br><span class="line"><span class="keyword">var</span> index = str.charAt(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(index) <span class="comment">// ''</span></span><br></pre></td></tr></table></figure><ul><li>这个字符串根本没有索引 10 的位置</li><li>所以就会返回一个空字符串 <code>&#39;&#39;</code></li></ul></li></ul><h3 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt"></a>charCodeAt</h3><ul><li><p><code>charCodeAt(索引)</code> 就是返回对应索引位置的 unicode 编码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Jack'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 charAt 找到字符串中的某一个内容</span></span><br><span class="line"><span class="keyword">var</span> index = str.charCodeAt(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(index) <span class="comment">// 74</span></span><br></pre></td></tr></table></figure><ul><li>因为 <code>J</code> 在 unicode 对照表里面存储的是 74，所以就会返回 74</li></ul></li></ul><h3 id="indexOf-1"><a href="#indexOf-1" class="headerlink" title="indexOf"></a>indexOf</h3><ul><li><p><code>indexOf</code> 就是按照字符找到对应的索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Jack'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 indexOf 找到对应的索引</span></span><br><span class="line"><span class="keyword">var</span> index = str.indexOf(<span class="string">'J'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(index) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><ul><li>因为字符 <code>J</code> 在字符串 <code>Jack</code> 中的索引位置是 0</li><li>所以会返回 0</li></ul></li></ul><h3 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h3><ul><li><p><code>substring</code> 是用来截取字符串使用的</p></li><li><p>语法： <code>substring(从哪个索引开始，到哪个索引截止)</code>，包含开始索引，不包含结束索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'hello'</span></span><br><span class="line"><span class="comment">//         01234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 substring 截取字符串</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.substring(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newStr) <span class="comment">// el</span></span><br></pre></td></tr></table></figure><ul><li>从索引 1 开始，到索引 3 截止，包含前面的索引不包含后面的索引</li><li>所以返回的是 el</li></ul></li></ul><h3 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h3><ul><li><p><code>substr</code> 也是用来截取字符串的</p></li><li><p>语法：<code>substr(从哪个索引开始，截取多少个)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'hello'</span></span><br><span class="line"><span class="comment">//         01234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 substr 截取字符串</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.substr(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newStr) <span class="comment">// ell</span></span><br></pre></td></tr></table></figure><ul><li>这个方法和 <code>substring</code> 不一样的是，第二个参数是截取多少个</li><li>从索引 1 开始，截取 3 个，所以得到的是 <code>ell</code></li></ul></li></ul><h3 id="toLowerCase-和-toUpperCase"><a href="#toLowerCase-和-toUpperCase" class="headerlink" title="toLowerCase 和 toUpperCase"></a>toLowerCase 和 toUpperCase</h3><ul><li><p>这两个方法分别使用用来给字符串转成 小写字母 和 大写字母 的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = hello</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 toUpperCase 转换成大写</span></span><br><span class="line"><span class="keyword">var</span> upper = str.toUpperCase()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(upper) <span class="comment">// HELLO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 toLowerCase 转换成小写</span></span><br><span class="line"><span class="keyword">var</span> lower = upper.toLowerCase()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(lower) <span class="comment">// hello</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;ES5-String&quot;&gt;&lt;a href=&quot;#ES5-String&quot; class=&quot;headerlink&quot; title=&quot;ES5/String&quot;&gt;&lt;/a&gt;ES5/String&lt;/h1&gt;&lt;h2 id=&quot;严格模式（了解）&quot;&gt;&lt;a href=&quot;#严格模式（了解）&quot; class=&quot;headerlink&quot; title=&quot;严格模式（了解）&quot;&gt;&lt;/a&gt;严格模式（了解）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我们都知道 js 是一个相对不很严谨的语言&lt;/li&gt;
&lt;li&gt;而且开发的时候，一些代码也不是很严格要求&lt;/li&gt;
&lt;li&gt;而严格模式就是对开发的时候写的一些内容做了要求&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;开启严格模式&quot;&gt;&lt;a href=&quot;#开启严格模式&quot; class=&quot;headerlink&quot; title=&quot;开启严格模式&quot;&gt;&lt;/a&gt;开启严格模式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;想开启严格模式，直接在代码最开始的位置写上字符串 &lt;code&gt;use strict&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&#39;use strtic&#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 下面代码书写就要按照严格模式来书写&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="千锋" scheme="http://yoursite.com/categories/千锋/"/>
    
    
  </entry>
  
  <entry>
    <title>DAY2-1_数组</title>
    <link href="http://yoursite.com/2021/09/27/DAY2-1/"/>
    <id>http://yoursite.com/2021/09/27/DAY2-1/</id>
    <published>2021-09-27T05:49:59.000Z</published>
    <updated>2021-10-11T12:15:21.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul><li><p>什么是数组？</p></li><li><p>字面理解就是 <strong>数字的组合</strong></p></li><li><p>其实不太准确，准确的来说数组是一个 <strong>数据的集合</strong></p></li><li><p>也就是我们把一些数据放在一个盒子里面，按照顺序排好</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'hello'</span>, <span class="literal">true</span>, <span class="literal">false</span>]</span><br></pre></td></tr></table></figure></li><li><p>这个东西就是一个数组，存储着一些数据的集合</p></li></ul><h2 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a>数据类型分类</h2><ul><li><code>number</code> / <code>string</code> / <code>boolean</code> / <code>undefined</code> / <code>null</code> / <code>object</code> / <code>function</code>  /  <code>array</code> / …</li><li>数组也是数据类型中的一种</li><li><p>我们简单的把所有数据类型分为两个大类 <strong>基本数据类型</strong> 和 <strong>复杂数据类型</strong></p></li><li><p>基本数据类型： <code>number</code> / <code>string</code> / <code>boolean</code> / <code>undefined</code> / <code>null</code> </p></li><li>复杂数据类型： <code>object</code> / <code>function</code>  /  <code>array</code> / …</li></ul><a id="more"></a><h2 id="创建一个数组"><a href="#创建一个数组" class="headerlink" title="创建一个数组"></a>创建一个数组</h2><ul><li>数组就是一个 <code>[]</code></li><li>在 <code>[]</code> 里面存储着各种各样的数据，按照顺序依次排好</li></ul><h3 id="字面量创建一个数组"><a href="#字面量创建一个数组" class="headerlink" title="字面量创建一个数组"></a>字面量创建一个数组</h3><ul><li><p>直接使用 <code>[]</code> 的方式创建一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = []</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个有内容的数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="内置构造函数创建数组"><a href="#内置构造函数创建数组" class="headerlink" title="内置构造函数创建数组"></a>内置构造函数创建数组</h3><ul><li><p>使用 js 的内置构造函数 <code>Array</code> 创建一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个长度为 10 的数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个有内容的数组</span></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="数组的-length"><a href="#数组的-length" class="headerlink" title="数组的 length"></a>数组的 length</h3><ul><li><p>length:  长度的意思</p></li><li><p>length 就是表示数组的长度，数组里面有多少个成员，length 就是多少</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.length) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数组的索引"><a href="#数组的索引" class="headerlink" title="数组的索引"></a>数组的索引</h3><ul><li><p>索引，也叫做下标，是指一个数据在数组里面排在第几个的位置</p></li><li><p>注意： <strong>在所有的语言里面，索引都是从 0 开始的</strong></p></li><li><p>在 js 里面也一样，数组的索引从 0 开始</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'hello'</span>, <span class="string">'world'</span>]</span><br></pre></td></tr></table></figure></li><li><p>上面这个数组中，<strong>第 0 个</strong> 数据就是字符串 <code>hello</code>，<strong>第 1 个</strong> 数据就是字符串 <code>world</code></p></li><li><p>想获取数组中的第几个就使用 <code>数组[索引]</code> 来获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'hello'</span>, <span class="string">'world'</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]) <span class="comment">// hello</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">1</span>]) <span class="comment">// world</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="数据类型之间存储的区别（重点）"><a href="#数据类型之间存储的区别（重点）" class="headerlink" title="数据类型之间存储的区别（重点）"></a>数据类型之间存储的区别（重点）</h2><ul><li>既然我们区分了基本数据类型和复杂数据类型</li><li>那么他们之间就一定会存在一些区别</li><li>他们最大的区别就是在存储上的区别</li><li>我们的存储空间分成两种 <strong>栈</strong> 和 <strong>堆</strong></li><li>栈： 主要存储基本数据类型的内容</li><li>堆： 主要存储复杂数据类型的内容</li></ul><h3 id="基本数据类型在内存中的存储情况"><a href="#基本数据类型在内存中的存储情况" class="headerlink" title="基本数据类型在内存中的存储情况"></a>基本数据类型在内存中的存储情况</h3><ul><li><code>var num = 100</code>，在内存中的存储情况</li><li><img src="J:/qf(二阶段" alt>资料/day1-1/课程资料/课程资料/week2/assets/基本数据类型在内存中的存储情况.png)</li><li>直接在 <strong>栈空间</strong> 内有存储一个数据</li></ul><h3 id="复杂数据类型在内存中的存储情况"><a href="#复杂数据类型在内存中的存储情况" class="headerlink" title="复杂数据类型在内存中的存储情况"></a>复杂数据类型在内存中的存储情况</h3><ul><li><p>下面这个 对象 的存储</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'Jack'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  gender: <span class="string">'男'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><img src="J:/qf(二阶段" alt>资料/day1-1/课程资料/课程资料/week2/assets/复杂数据类型在内存中的存储情况.png)</p></li><li><p>复杂数据类型的存储</p><ol><li>在堆里面开辟一个存储空间</li><li>把数据存储到存储空间内</li><li>把存储空间的地址赋值给栈里面的变量</li></ol></li><li><p>这就是数据类型之间存储的区别</p></li></ul><h3 id="数据类型之间的比较"><a href="#数据类型之间的比较" class="headerlink" title="数据类型之间的比较"></a>数据类型之间的比较</h3><ul><li><p>基本数据类型是 <strong>值</strong> 之间的比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'1'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num == str) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>复杂数据类型是 <strong>地址</strong> 之间的比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">'Jack'</span> &#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">'Jack'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj == obj2) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>因为我们创建了两个对象，那么就会在 堆空间 里面开辟两个存储空间存储数据（两个地址）</li><li>虽然存储的内容是一样的，那么也是两个存储空间，两个地址</li><li>复杂数据类型之间就是地址的比较，所以 <code>obj</code> 和 <code>obj2</code> 两个变量的地址不一样</li><li>所以我们得到的就是 <code>false</code></li></ul></li></ul><h2 id="数组的常用方法"><a href="#数组的常用方法" class="headerlink" title="数组的常用方法"></a>数组的常用方法</h2><ul><li><p>数组是一个复杂数据类型，我们在操作它的时候就不能再想基本数据类型一样操作了</p></li><li><p>比如我们想改变一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们想把数组变成只有 1 和 2</span></span><br><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><ul><li>这样肯定是不合理，因为这样不是在改变之前的数组</li><li>相当于心弄了一个数组给到 arr 这个变量了</li><li>相当于把 arr 里面存储的地址给换了，也就是把存储空间换掉了，而不是在之前的空间里面修改</li><li>所以我们就需要借助一些方法，在不改变存储空间的情况下，把存储空间里面的数据改变了</li></ul></li></ul><h3 id="数组常用方法之-push"><a href="#数组常用方法之-push" class="headerlink" title="数组常用方法之 push"></a>数组常用方法之 push</h3><ul><li><p><code>push</code> 是用来在数组的末尾追加一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 push 方法追加一个元素在末尾</span></span><br><span class="line">arr.push(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数组常用方法之-pop"><a href="#数组常用方法之-pop" class="headerlink" title="数组常用方法之 pop"></a>数组常用方法之 pop</h3><ul><li><p><code>pop</code> 是用来删除数组末尾的一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 pop 方法删除末尾的一个元素</span></span><br><span class="line">arr.pop()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数组常用方法之-unshift"><a href="#数组常用方法之-unshift" class="headerlink" title="数组常用方法之 unshift"></a>数组常用方法之 unshift</h3><ul><li><p><code>unshift</code> 是在数组的最前面添加一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 unshift 方法想数组的最前面添加一个元素</span></span><br><span class="line">arr.unshift(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [4, 1, 2, 3]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数组常用方法之-shift"><a href="#数组常用方法之-shift" class="headerlink" title="数组常用方法之  shift"></a>数组常用方法之  shift</h3><ul><li><p><code>shift</code> 是删除数组最前面的一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 shift 方法删除数组最前面的一个元素</span></span><br><span class="line">arr.shift()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [2, 3]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数组常用方法之-splice"><a href="#数组常用方法之-splice" class="headerlink" title="数组常用方法之 splice"></a>数组常用方法之 splice</h3><ul><li><p><code>splice</code> 是截取数组中的某些内容，按照数组的索引来截取</p></li><li><p>语法： <code>splice(从哪一个索引位置开始，截取多少个，替换的新元素)</code> （第三个参数可以不写）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 splice 方法截取数组</span></span><br><span class="line">arr.splice(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1, 4, 5]</span></span><br></pre></td></tr></table></figure><ul><li><code>arr.splice(1, 2)</code> 表示从索引 1 开始截取 2 个内容</li><li>第三个参数没有写，就是没有新内容替换掉截取位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 splice 方法截取数组</span></span><br><span class="line">arr.splice(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'我是新内容'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1, '我是新内容', 4, 5]</span></span><br></pre></td></tr></table></figure><ul><li><code>arr.splice(1, 2, &#39;我是新内容&#39;)</code> 表示从索引 1 开始截取 2 个内容</li><li>然后用第三个参数把截取完空出来的位置填充</li></ul></li></ul><h3 id="数组常用方法之-reverse"><a href="#数组常用方法之-reverse" class="headerlink" title="数组常用方法之 reverse"></a>数组常用方法之 reverse</h3><ul><li><p><code>reverse</code> 是用来反转数组使用的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 reverse 方法来反转数组</span></span><br><span class="line">arr.reverse()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数组常用方法之-sort"><a href="#数组常用方法之-sort" class="headerlink" title="数组常用方法之 sort"></a>数组常用方法之 sort</h3><ul><li><p><code>sort</code> 是用来给数组排序的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 sort 方法给数组排序</span></span><br><span class="line">arr.sort()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ul><li>这个只是一个基本的简单用法</li></ul></li></ul><h3 id="数组常用方法之-concat"><a href="#数组常用方法之-concat" class="headerlink" title="数组常用方法之 concat"></a>数组常用方法之 concat</h3><ul><li><p><code>concat</code> 是把多个数组进行拼接</p></li><li><p>和之前的方法有一些不一样的地方，就是 <code>concat</code> 不会改变原始数组，而是返回一个新的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 concat 方法拼接数组</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.concat([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArr) <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><ul><li>注意： <strong>concat 方法不会改变原始数组</strong></li></ul></li></ul><h3 id="数组常用方法之-join"><a href="#数组常用方法之-join" class="headerlink" title="数组常用方法之 join"></a>数组常用方法之 join</h3><ul><li><p><code>join</code> 是把数组里面的每一项内容链接起来，变成一个字符串</p></li><li><p>可以自己定义每一项之间链接的内容 <code>join(要以什么内容链接)</code></p></li><li><p>不会改变原始数组，而是把链接好的字符串返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 join 链接数组</span></span><br><span class="line"><span class="keyword">var</span> str = arr.join(<span class="string">'-'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(str) <span class="comment">// 1-2-3</span></span><br></pre></td></tr></table></figure><ul><li>注意： <strong>join 方法不会改变原始数组，而是返回链接好的字符串</strong></li></ul></li></ul><h2 id="for-和-for-in-循环"><a href="#for-和-for-in-循环" class="headerlink" title="for 和 for in 循环"></a>for 和 for in 循环</h2><ul><li><p>因为数组的索引就可以获取数组中的内容</p></li><li><p>数组的索引又是按照 0 ～ n 顺序排列</p></li><li><p>我们就可以使用 for 循环来循环数组，因为 for 循环我们也可以设置成 0 ～ n 顺序增加</p></li><li><p>我们把这个行为叫做 <strong>遍历</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 for 循环遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会在控制台依次打印出 1， 2， 3， 4， 5</span></span><br></pre></td></tr></table></figure><ul><li><code>i &lt; arr.length</code> 因为 length 就是数组的长度，就是一个数字，所以我们可以直接用它来决定循环次数</li><li><code>console.log(arr[i])</code> 因为随着循环，i 的值会从 0 开始依次增加</li><li>所以我们实际上就相当于在打印 <code>arr[0]</code> / <code>arr[1]</code> / …</li></ul></li></ul><ul><li><p>因为 <strong>对象</strong> 是没有索引的，所以我们没有办法使用 for 循环来遍历</p></li><li><p>这里我们使用 for in 循环来遍历对象</p></li><li><p>先来看一段代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'Jack'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会在控制台打印两次内容，分别是 name 和 age</span></span><br></pre></td></tr></table></figure><ul><li>for in 循环的遍历是按照对象中有多少成员来决定了</li><li>有多少成员，就会执行多少次</li><li><code>key</code> 是我们自己定义的一个变量，就和 for 循环的时候我们定义的 i 一个道理</li><li>在每次循环的过程中，key 就代表着对象中某一个成员的 <strong>属性名</strong></li></ul></li></ul><h2 id="数组的排序"><a href="#数组的排序" class="headerlink" title="数组的排序"></a>数组的排序</h2><ul><li>排序，就是把一个乱序的数组，通过我们的处理，让他变成一个有序的数组</li><li>今天我们讲解两种方式来排序一个数组 <strong>冒泡排序</strong> 和 <strong>选择排序</strong></li></ul><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul><li><p>先遍历数组，让挨着的两个进行比较，如果前一个比后一个大，那么就把两个换个位置</p></li><li><p>数组遍历一遍以后，那么最后一个数字就是最大的那个了</p></li><li><p>然后进行第二遍的遍历，还是按照之前的规则，第二大的数字就会跑到倒数第二的位置</p></li><li><p>以此类推，最后就会按照顺序把数组排好了</p><ol><li><p>我们先来准备一个乱序的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><ul><li>接下来我们就会用代码让数组排序</li></ul></li><li><p>先不着急循环，先来看数组里面内容换个位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假定我现在要让数组中的第 0 项和第 1 项换个位置</span></span><br><span class="line"><span class="comment">// 需要借助第三个变量</span></span><br><span class="line"><span class="keyword">var</span> tmp = arr[<span class="number">0</span>]</span><br><span class="line">arr[<span class="number">0</span>] = arr[<span class="number">1</span>]</span><br><span class="line">arr[<span class="number">1</span>] = tmp</span><br></pre></td></tr></table></figure></li><li><p>第一次遍历数组，把最大的放到最后面去</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="comment">// 判断，如果数组中的当前一个比后一个大，那么两个交换一下位置</span></span><br><span class="line">  <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = arr[i]</span><br><span class="line">    arr[i] = arr[i + <span class="number">1</span>]</span><br><span class="line">    arr[i + <span class="number">1</span>] = tmp</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历完毕以后，数组就会变成 [3, 1, 5, 6, 4, 7, 2, 8, 9]</span></span><br></pre></td></tr></table></figure><ul><li>第一次结束以后，数组中的最后一个，就会是最大的那个数字</li><li>然后我们把上面的这段代码执行多次。数组有多少项就执行多少次</li></ul></li><li><p>按照数组的长度来遍历多少次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 判断，如果数组中的当前一个比后一个大，那么两个交换一下位置</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">var</span> tmp = arr[i]</span><br><span class="line">      arr[i] = arr[i + <span class="number">1</span>]</span><br><span class="line">      arr[i + <span class="number">1</span>] = tmp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束以后，数组就排序好了</span></span><br></pre></td></tr></table></figure></li><li><p>给一些优化</p><ul><li><p>想象一个问题，假设数组长度是 9，第八次排完以后</p></li><li><p>后面八个数字已经按照顺序排列好了，剩下的那个最小的一定是在最前面</p></li><li><p>那么第九次就已经没有意义了，因为最小的已经在最前面了，不会再有任何换位置出现了</p></li><li><p>那么我们第九次遍历就不需要了，所以我们可以减少一次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 判断，如果数组中的当前一个比后一个大，那么两个交换一下位置</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">var</span> tmp = arr[i]</span><br><span class="line">      arr[i] = arr[i + <span class="number">1</span>]</span><br><span class="line">      arr[i + <span class="number">1</span>] = tmp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二个问题，第一次的时候，已经把最大的数字放在最后面了</p></li><li><p>那么第二次的时候，其实倒数第二个和最后一个就不用比了</p></li><li><p>因为我们就是要把倒数第二大的放在倒数第二的位置，即使比较了，也不会换位置</p></li><li><p>第三次就要倒数第三个数字就不用再和后两个比较了</p></li><li><p>以此类推，那么其实每次遍历的时候，就遍历当前次数 - 1 次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span> - j; i++) &#123;</span><br><span class="line">    <span class="comment">// 判断，如果数组中的当前一个比后一个大，那么两个交换一下位置</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">var</span> tmp = arr[i]</span><br><span class="line">      arr[i] = arr[i + <span class="number">1</span>]</span><br><span class="line">      arr[i + <span class="number">1</span>] = tmp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>至此，一个冒泡排序就完成了</p></li></ol></li></ul><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><ul><li><p>先假定数组中的第 0 个就是最小的数字的索引</p></li><li><p>然后遍历数组，只要有一个数字比我小，那么就替换之前记录的索引</p></li><li><p>知道数组遍历结束后，就能找到最小的那个索引，然后让最小的索引换到第 0 个的位置</p></li><li><p>再来第二趟遍历，假定第 1 个是最小的数字的索引</p></li><li><p>在遍历一次数组，找到比我小的那个数字的索引</p></li><li><p>遍历结束后换个位置</p></li><li><p>依次类推，也可以把数组排序好</p><ol><li><p>准备一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure></li><li><p>假定数组中的第 0 个是最小数字的索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minIndex = <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>遍历数组，判断，只要数字比我小，那么就替换掉原先记录的索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minIndex = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr[i] &lt; arr[minIndex]) &#123;</span><br><span class="line">    minIndex = i</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历结束后找到最小的索引</span></span><br><span class="line"><span class="comment">// 让第 minIndex 个和第 0 个交换</span></span><br><span class="line"><span class="keyword">var</span> tmp = arr[minIndex]</span><br><span class="line">arr[minIndex] = arr[<span class="number">0</span>]</span><br><span class="line">arr[<span class="number">0</span>] = tmp</span><br></pre></td></tr></table></figure></li><li><p>按照数组的长度重复执行上面的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">  <span class="comment">// 因为第一遍的时候假定第 0 个，第二遍的时候假定第 1 个</span></span><br><span class="line">  <span class="comment">// 所以我们要假定第 j 个就行</span></span><br><span class="line">  <span class="keyword">var</span> minIndex = j</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 因为之前已经把最小的放在最前面了，后面的循环就不需要判断前面的了</span></span><br><span class="line">  <span class="comment">// 直接从 j + 1 开始</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = j + <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; arr[minIndex]) &#123;</span><br><span class="line">      minIndex = i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历结束后找到最小的索引</span></span><br><span class="line">  <span class="comment">// 第一堂的时候是和第 0 个交换，第二趟的时候是和第 1 个交换</span></span><br><span class="line">  <span class="comment">// 我们直接和第 j 个交换就行</span></span><br><span class="line">  <span class="keyword">var</span> tmp = arr[minIndex]</span><br><span class="line">  arr[minIndex] = arr[j]</span><br><span class="line">  arr[j] = tmp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一些优化</p><ul><li><p>和之前一样，倒数第二次排序完毕以后，就已经排好了，最后一次没有必要了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">  <span class="keyword">var</span> minIndex = j</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = j + <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; arr[minIndex]) &#123;</span><br><span class="line">      minIndex = i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> tmp = arr[minIndex]</span><br><span class="line">  arr[minIndex] = arr[j]</span><br><span class="line">  arr[j] = tmp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在交换变量之前，可以判断一下，如果我们遍历后得到的索引和当前的索引一直</p></li><li><p>那么就证明当前这个就是目前最小的，那么就没有必要交换</p></li><li><p>做一我们要判断，最小作引和当前作引不一样的时候，才交换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">  <span class="keyword">var</span> minIndex = j</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = j + <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; arr[minIndex]) &#123;</span><br><span class="line">      minIndex = i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (minIndex !== j) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = arr[minIndex]</span><br><span class="line">    arr[minIndex] = arr[j]</span><br><span class="line">    arr[j] = tmp   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>至此，选择排序完成</p></li></ol></li></ul><h2 id="函数参数传递基本数据类型和复杂数据类型的区别"><a href="#函数参数传递基本数据类型和复杂数据类型的区别" class="headerlink" title="函数参数传递基本数据类型和复杂数据类型的区别"></a>函数参数传递基本数据类型和复杂数据类型的区别</h2><ul><li><p>之前我们知道了，基本数据类型和复杂数据类型在存储上是有区别的</p></li><li><p>那么他们在赋值之间也是有区别的</p></li><li><p>基本数据类型之间的赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> num2 = num</span><br><span class="line"></span><br><span class="line">num2 = <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">console</span>.log(num2) <span class="comment">// 200</span></span><br></pre></td></tr></table></figure><ul><li>相当于是把 num 的值复制了一份一摸一样的给了 num2 变量</li><li>赋值以后两个在没有关系</li></ul></li><li><p>复杂数据类型之间的赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'Jack'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj</span><br><span class="line"></span><br><span class="line">obj2.name = <span class="string">'Rose'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.name) <span class="comment">// Rose</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.name) <span class="comment">// Rose</span></span><br></pre></td></tr></table></figure><ul><li>因为复杂数据类型，变量存储的是地址，真实内容在 堆空间 内存储</li><li>所以赋值的时候相当于把 obj 存储的那个地址复制了一份给到了 obj2 变量</li><li>现在 obj 和 obj2 两个变量存储的地址一样，指向一个内存空间</li><li>所以使用 obj2 这个变量修改空间内的内容，obj 指向的空间也会跟着改变了</li></ul></li></ul><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><ul><li><p>函数的参数也是赋值的之中，在函数调用的时候，实参给行参赋值</p></li><li><p>和之前变量赋值的规则是一样的</p></li><li><p>函数传递基本数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  n = <span class="number">200</span></span><br><span class="line">  <span class="built_in">console</span>.log(n) <span class="comment">// 200</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line">fn(num)</span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><ul><li>和之前变量赋值的时候一样，在把 num 的值复制了一份一摸一样的给到了函数内部的行参 n</li><li>两个之间在没有任何关系了</li></ul></li><li><p>函数传递复杂数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  o.name = <span class="string">'Rose'</span></span><br><span class="line">  <span class="built_in">console</span>.log(o.name) <span class="comment">// Rose</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'Jack'</span></span><br><span class="line">&#125;</span><br><span class="line">fn(obj)</span><br><span class="line"><span class="built_in">console</span>.log(obj.name) <span class="comment">// Rose</span></span><br></pre></td></tr></table></figure><ul><li>和之前变量赋值的时候一样，把 obj 内存储的地址复制了一份一摸一样的给到函数内部的行参 o</li><li>函数外部的 obj 和函数内部的行参 o，存储的是一个地址，指向的是一个存储空间</li><li>所以两个变量操作的是一个存储空间</li><li>在函数内部改变了空间内的数据</li><li>obj 看到的也是改变以后的内容</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;什么是数组？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字面理解就是 &lt;strong&gt;数字的组合&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其实不太准确，准确的来说数组是一个 &lt;strong&gt;数据的集合&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;也就是我们把一些数据放在一个盒子里面，按照顺序排好&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这个东西就是一个数组，存储着一些数据的集合&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;数据类型分类&quot;&gt;&lt;a href=&quot;#数据类型分类&quot; class=&quot;headerlink&quot; title=&quot;数据类型分类&quot;&gt;&lt;/a&gt;数据类型分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;number&lt;/code&gt; / &lt;code&gt;string&lt;/code&gt; / &lt;code&gt;boolean&lt;/code&gt; / &lt;code&gt;undefined&lt;/code&gt; / &lt;code&gt;null&lt;/code&gt; / &lt;code&gt;object&lt;/code&gt; / &lt;code&gt;function&lt;/code&gt;  /  &lt;code&gt;array&lt;/code&gt; / …&lt;/li&gt;
&lt;li&gt;数组也是数据类型中的一种&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我们简单的把所有数据类型分为两个大类 &lt;strong&gt;基本数据类型&lt;/strong&gt; 和 &lt;strong&gt;复杂数据类型&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基本数据类型： &lt;code&gt;number&lt;/code&gt; / &lt;code&gt;string&lt;/code&gt; / &lt;code&gt;boolean&lt;/code&gt; / &lt;code&gt;undefined&lt;/code&gt; / &lt;code&gt;null&lt;/code&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;复杂数据类型： &lt;code&gt;object&lt;/code&gt; / &lt;code&gt;function&lt;/code&gt;  /  &lt;code&gt;array&lt;/code&gt; / …&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="千锋" scheme="http://yoursite.com/categories/千锋/"/>
    
    
  </entry>
  
  <entry>
    <title>DAY2-3_Math 和 Date</title>
    <link href="http://yoursite.com/2021/09/27/DAY2-3/"/>
    <id>http://yoursite.com/2021/09/27/DAY2-3/</id>
    <published>2021-09-27T05:49:59.000Z</published>
    <updated>2021-10-11T12:15:41.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Math-和-Date"><a href="#Math-和-Date" class="headerlink" title="Math 和 Date"></a>Math 和 Date</h1><ul><li>Math 是 js 的一个内置对象，提供了一堆的方法帮助我们操作 <strong>数字</strong></li><li>Date 是 js 的一个内置对象，提供了一堆的方法帮助我们操作 <strong>时间</strong></li></ul><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><ul><li>没有什么多余的东西，就是一堆的方法来操作数字</li></ul><h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><ul><li><p><code>Math.random()</code> 这个方法是用来生成一个 <code>0 ~ 1</code> 之间的随机数</p></li><li><p>每次执行生成的数字都不一样，但是一定是 <code>0 ~ 1</code> 之间的</p></li><li><p>生成的数字包含 0 ，但是不包含 1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="built_in">Math</span>.random()</span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 得到一个随机数</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h3 id="round"><a href="#round" class="headerlink" title="round"></a>round</h3><ul><li><p><code>Math.round()</code> 是将一个小数 <strong>四舍五入</strong> 变成一个整数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10.1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(num)) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">10.6</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(num2)) <span class="comment">// 11</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="abs"><a href="#abs" class="headerlink" title="abs"></a>abs</h3><ul><li><p><code>Math.abs()</code> 是返回一个数字的绝对值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">-10</span></span><br><span class="line"><span class="built_in">console</span>.log(math.abs(num)) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="ceil"><a href="#ceil" class="headerlink" title="ceil"></a>ceil</h3><ul><li><p><code>Math.ceil()</code> 是将一个小数 <strong>向上取整</strong> 得到的整数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10.1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(num)) <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">10.9</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(num2)) <span class="comment">// 11</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="floor"><a href="#floor" class="headerlink" title="floor"></a>floor</h3><ul><li><p><code>Math.floor()</code> 是将一个小数 <strong>向下取整</strong> 的到的整数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10.1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(num)) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">10.9</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(num2)) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="max"><a href="#max" class="headerlink" title="max"></a>max</h3><ul><li><p><code>Math.max()</code> 得到的是你传入的几个数字之中最大的那个数字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="min"><a href="#min" class="headerlink" title="min"></a>min</h3><ul><li><p><code>Math.min()</code> 得到的是你传入的几个数字之中最小的那个数字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="PI"><a href="#PI" class="headerlink" title="PI"></a>PI</h3><ul><li><p><code>Math.PI</code> 得到的是 <code>π</code> 的值，也就是 <code>3.1415936...</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.PI) <span class="comment">// 3.141592653589793</span></span><br></pre></td></tr></table></figure><ul><li>因为计算机的计算精度问题，只能得到小数点后 15 位</li><li><strong>使用 Math.PI 的时候，是不需要加 () 的</strong></li></ul></li></ul><h2 id="数字转换进制"><a href="#数字转换进制" class="headerlink" title="数字转换进制"></a>数字转换进制</h2><ol><li><p><code>toString()</code> 方法可以在数字转成字符串的时候给出一个进制数</p><ul><li><p>语法： <code>toString(你要转换的进制)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">2</span>)) <span class="comment">// 1100100</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">8</span>)) <span class="comment">// 144</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">16</span>)) <span class="comment">// 64</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>parseInt()</code> 方法可以在字符串转成数字的时候把字符串当成多少进制转成十进制</p><ul><li><p>语法： <code>parseInt(要转换的字符串，当作几进制来转换)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="number">100</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str, <span class="number">8</span>)) <span class="comment">// 64 把 100 当作一个 八进制 的数字转换成 十进制 以后得到的</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str, <span class="number">16</span>)) <span class="comment">// 256 把 100 当作 十六进制 的数字转换成 十进制 以后得到的</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str, <span class="number">2</span>)) <span class="comment">// 4 把 100 当作 二进制 的数字转换成 十进制 以后得到的</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><ul><li>js 提供的内置构造函数，专门用来获取时间的</li></ul><h3 id="new-Date"><a href="#new-Date" class="headerlink" title="new Date()"></a>new Date()</h3><ul><li><p><code>new Date()</code> 在不传递参数的情况下是默认返回当前时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="built_in">console</span>.log(time) <span class="comment">// 当前时间 Fri Mar 01 2019 13:11:23 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p><code>new Date()</code> 在传入参数的时候，可以获取到一个你传递进去的时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-03-03 13:11:11'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(time) <span class="comment">// Sun Mar 03 2019 13:11:11 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p><code>new Date()</code> 传递的参数有多种情况</p><ol><li><p>传递两个数字，第一个表示年，第二个表示月份</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">00</span>) <span class="comment">// 月份从 0 开始计数，0 表示 1月，11 表示 12月</span></span><br><span class="line"><span class="built_in">console</span>.log(time) <span class="comment">// Tue Jan 01 2019 00:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>传递三个数字，前两个不变，第三个表示该月份的第几天，从 1 到 31</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">00</span>, <span class="number">05</span>) </span><br><span class="line"><span class="built_in">console</span>.log(time) <span class="comment">// Sat Jan 05 2019 00:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>传递四个数字，前三个不变，第四个表示当天的几点，从 0 到 23</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">00</span>, <span class="number">05</span>, <span class="number">22</span>) </span><br><span class="line"><span class="built_in">console</span>.log(time) <span class="comment">// Sat Jan 05 2019 22:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>传递五个数字，前四个不变，第五个表示的是该小时的多少分钟，从 0 到 59</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">00</span>, <span class="number">05</span>, <span class="number">22</span>, <span class="number">33</span>) </span><br><span class="line"><span class="built_in">console</span>.log(time) <span class="comment">// Sat Jan 05 2019 22:33:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>传递六个数字，前五个不变，第六个表示该分钟的多少秒，从 0 到 59</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">00</span>, <span class="number">05</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">55</span>) </span><br><span class="line"><span class="built_in">console</span>.log(time) <span class="comment">// Sat Jan 05 2019 22:33:55 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>传入字符串的形式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019'</span>)) </span><br><span class="line"><span class="comment">// Tue Jan 01 2019 08:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-02'</span>)) </span><br><span class="line"><span class="comment">// Fri Feb 01 2019 08:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-02-03'</span>)) </span><br><span class="line"><span class="comment">// Sun Feb 03 2019 08:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-02-03 13:'</span>)) </span><br><span class="line"><span class="comment">// Sun Feb 03 2019 13:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-02-03 13:13:'</span>)) </span><br><span class="line"><span class="comment">// Sun Feb 03 2019 13:13:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-02-03 13:13:13'</span>)) </span><br><span class="line"><span class="comment">// Sun Feb 03 2019 13:13:13 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="将日期字符串格式化成指定内容"><a href="#将日期字符串格式化成指定内容" class="headerlink" title="将日期字符串格式化成指定内容"></a>将日期字符串格式化成指定内容</h2><ul><li>比如我们得到的时间字符串是 <code>Sun Feb 03 2019 13:13:13 GMT+0800 (中国标准时间)</code></li><li>我指向得到这个日期中是那一年，我们就要靠截取字符串的形式得到</li><li>但是现在 js 为我们提供了一系列的方法来得到里面的指定内容</li></ul><h3 id="getFullYear"><a href="#getFullYear" class="headerlink" title="getFullYear"></a>getFullYear</h3><ul><li><p><code>getFullYear()</code> 方式是得到指定字符串中的哪一年</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="built_in">console</span>.log(time.getFullYear()) <span class="comment">// 2019</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="getMonth"><a href="#getMonth" class="headerlink" title="getMonth"></a>getMonth</h3><ul><li><p><code>getMonth()</code> 方法是得到指定字符串中的哪一个月份 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="built_in">console</span>.log(time.getMonth()) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li>这里要有一个注意的地方</li><li>月份是从 0 开始数的</li><li>0 表示 1月，1 表示 2月，依此类推</li></ul></li></ul><h3 id="getDate"><a href="#getDate" class="headerlink" title="getDate"></a>getDate</h3><ul><li><p><code>getDate()</code> 方法是得到指定字符串中的哪一天</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="built_in">console</span>.log(time.getDate()) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="getHours"><a href="#getHours" class="headerlink" title="getHours"></a>getHours</h3><ul><li><p><code>getHours()</code> 方法是得到指定字符串中的哪小时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="built_in">console</span>.log(time.getHours()) <span class="comment">// 8</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="getMinutes"><a href="#getMinutes" class="headerlink" title="getMinutes"></a>getMinutes</h3><ul><li><p><code>getMinutes()</code> 方法是得到指定字符串中的哪分钟</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="built_in">console</span>.log(time.getMinutes()) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="getSeconds"><a href="#getSeconds" class="headerlink" title="getSeconds"></a>getSeconds</h3><ul><li><p><code>getSeconds()</code> 方法是得到指定字符串中的哪秒钟</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="built_in">console</span>.log(time.getSeconds()) <span class="comment">// 22</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="getDay"><a href="#getDay" class="headerlink" title="getDay"></a>getDay</h3><ul><li><p><code>getDay()</code> 方法是得到指定字符串当前日期是一周中的第几天（周日是 0，周六是 6）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="built_in">console</span>.log(time.getDay()) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="getTime"><a href="#getTime" class="headerlink" title="getTime"></a>getTime</h3><ul><li><p><code>getTime()</code> 方法是得到执行时间到 <code>格林威治时间</code> 的毫秒数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">03</span>, <span class="number">08</span>, <span class="number">08</span>, <span class="number">00</span>, <span class="number">22</span>)</span><br><span class="line"><span class="built_in">console</span>.log(time.getTime()) <span class="comment">// 1554681622000</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="获取时间差"><a href="#获取时间差" class="headerlink" title="获取时间差"></a>获取时间差</h2><ul><li>是指获取两个时间点之间相差的时间</li><li>在 js 中是不能用时间直接做 减法 的</li><li>我们需要一些特殊的操作</li><li>在编程的世界里面，有一个特殊的时间，是 <code>1970年01月01日00时00分00秒</code></li><li>这个时间我们叫做 <code>格林威治时间</code></li><li>所有的编程世界里面，这个时间都是一样的，而且 <code>格林威治时间</code> 的数字是 0</li><li>从 <code>格林威治时间</code> 开始，每经过1毫秒，数字就会 + 1</li><li>所以我们可以获取到任意一个时间节点到 <code>格林威治时间</code> 的毫秒数</li><li>然后在用两个毫秒数相减，就能得到两个时间点之间相差的毫秒数</li><li>我们在通过这个毫秒数得到准确的时间</li></ul><h3 id="计算时间差"><a href="#计算时间差" class="headerlink" title="计算时间差"></a>计算时间差</h3><ul><li>例如：我们现在计算一下 <code>2019-01-01 00:00:00</code> 到 <code>2019-01-03 04:55:34</code> 的时间差</li></ul><ol><li><p>先获取两个时间点到 <code>格林威治时间</code> 的毫秒数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-01-01 00:00:00'</span>)</span><br><span class="line"><span class="keyword">var</span> time2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-01-03 04:55:34'</span>)</span><br><span class="line"></span><br><span class="line">time1 = time1.getTime()</span><br><span class="line">time2 = time2.getTime()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(time1) <span class="comment">// 1546272000000</span></span><br><span class="line"><span class="built_in">console</span>.log(time2) <span class="comment">// 1546462534000</span></span><br></pre></td></tr></table></figure></li><li><p>两个时间相减，得到两个时间点之间相差的毫秒数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> differenceTime = time2 - time1</span><br><span class="line"><span class="built_in">console</span>.log(differenceTime) <span class="comment">// 190534000</span></span><br></pre></td></tr></table></figure><ul><li>现在我们计算出了两个时间点之间相差的毫秒数</li></ul></li><li><p>把我们计算的毫秒数换算成时间</p><ul><li><p>先计算出有多少天</p></li><li><p>以为一天是 <code>1000 * 60 * 60 * 24</code> 毫秒</p></li><li><p>用总的毫秒数除以一天的毫秒数，就能得到多少天了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-01-01 00:00:00'</span>)</span><br><span class="line"><span class="keyword">var</span> time2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-01-03 04:55:34'</span>)</span><br><span class="line">time1 = time1.getTime()</span><br><span class="line">time2 = time2.getTime()</span><br><span class="line"><span class="keyword">var</span> differenceTime = time2 - time1</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整的天数</span></span><br><span class="line"><span class="keyword">var</span> day = differenceTime / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>) <span class="comment">// 2.20525462962963</span></span><br><span class="line">day = <span class="built_in">Math</span>.ceil(day) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>因为得到的是有小数的天数，我们向下取整，得到有多少个整的天数</li></ul></li><li><p>使用 <code>differenceTime</code> 减去两天所包含的毫秒数，剩下的就是不够一天的毫秒数</p></li><li><p>用不够一天的毫秒数计算出有多少个小时</p></li><li><p>因为一个小时是 <code>1000 * 60 * 60</code> 毫秒</p></li><li><p>用不够一天的毫秒数除以一小时的毫秒数，就能得到多少小时了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-01-01 00:00:00'</span>)</span><br><span class="line"><span class="keyword">var</span> time2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-01-03 04:55:34'</span>)</span><br><span class="line">time1 = time1.getTime()</span><br><span class="line">time2 = time2.getTime()</span><br><span class="line"><span class="keyword">var</span> differenceTime = time2 - time1</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整的天数</span></span><br><span class="line"><span class="keyword">var</span> day = differenceTime / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>) <span class="comment">// 2.20525462962963</span></span><br><span class="line">day = <span class="built_in">Math</span>.floor(day) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整的小时数</span></span><br><span class="line"><span class="keyword">var</span> afterHours = differenceTime - (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> hours = afterHours / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>)</span><br><span class="line">hours = <span class="built_in">Math</span>.floor(hours) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><ul><li>和刚才一样的道理，我们需要向下取整</li></ul></li><li><p>同理，使用 <code>afterHours</code> - 4个小时包含的毫秒数，剩下的就是不够一个小时的毫秒数</p></li><li><p>用不够一个小时的毫秒数计算出有多少分钟</p></li><li><p>因为一分钟是 <code>1000 * 60</code> 毫秒</p></li><li><p>用不够一个小时的毫秒数除以一分钟的毫秒数就能得到多少分钟了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-01-01 00:00:00'</span>)</span><br><span class="line"><span class="keyword">var</span> time2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-01-03 04:55:34'</span>)</span><br><span class="line">time1 = time1.getTime()</span><br><span class="line">time2 = time2.getTime()</span><br><span class="line"><span class="keyword">var</span> differenceTime = time2 - time1</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整的天数</span></span><br><span class="line"><span class="keyword">var</span> day = differenceTime / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>) <span class="comment">// 2.20525462962963</span></span><br><span class="line">day = <span class="built_in">Math</span>.floor(day) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整的小时数</span></span><br><span class="line"><span class="keyword">var</span> afterHours = differenceTime - (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> hours = afterHours / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>)</span><br><span class="line">hours = <span class="built_in">Math</span>.floor(hours) <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整分钟数</span></span><br><span class="line"><span class="keyword">var</span> afterMinutes = afterHours - (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">4</span>)</span><br><span class="line"><span class="keyword">var</span> minutes = afterMinutes / (<span class="number">1000</span> * <span class="number">60</span>)</span><br><span class="line">minutes = <span class="built_in">Math</span>.floor(minutes) <span class="comment">// 55</span></span><br></pre></td></tr></table></figure></li><li><p>和之前一样的道理计算出秒</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-01-01 00:00:00'</span>)</span><br><span class="line"><span class="keyword">var</span> time2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-01-03 04:55:34'</span>)</span><br><span class="line">time1 = time1.getTime()</span><br><span class="line">time2 = time2.getTime()</span><br><span class="line"><span class="keyword">var</span> differenceTime = time2 - time1</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整的天数</span></span><br><span class="line"><span class="keyword">var</span> day = differenceTime / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>) <span class="comment">// 2.20525462962963</span></span><br><span class="line">day = <span class="built_in">Math</span>.floor(day) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整的小时数</span></span><br><span class="line"><span class="keyword">var</span> afterHours = differenceTime - (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> hours = afterHours / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>)</span><br><span class="line">hours = <span class="built_in">Math</span>.floor(hours) <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整分钟数</span></span><br><span class="line"><span class="keyword">var</span> afterMinutes = afterHours - (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">4</span>)</span><br><span class="line"><span class="keyword">var</span> minutes = afterMinutes / (<span class="number">1000</span> * <span class="number">60</span>)</span><br><span class="line">minutes = <span class="built_in">Math</span>.floor(minutes) <span class="comment">// 55</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整秒数</span></span><br><span class="line"><span class="keyword">var</span> afterSeconds = afterMinutes - (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">55</span>)</span><br><span class="line"><span class="keyword">var</span> seconds = afterSeconds / <span class="number">1000</span></span><br><span class="line">seconds = <span class="built_in">Math</span>.floor(seconds) <span class="comment">// 34</span></span><br></pre></td></tr></table></figure></li><li><p>最后，同理减去整秒的数，剩下的就是毫秒数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-01-01 00:00:00'</span>)</span><br><span class="line"><span class="keyword">var</span> time2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-01-03 04:55:34'</span>)</span><br><span class="line">time1 = time1.getTime()</span><br><span class="line">time2 = time2.getTime()</span><br><span class="line"><span class="keyword">var</span> differenceTime = time2 - time1</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整的天数</span></span><br><span class="line"><span class="keyword">var</span> day = differenceTime / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>) <span class="comment">// 2.20525462962963</span></span><br><span class="line">day = <span class="built_in">Math</span>.floor(day) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整的小时数</span></span><br><span class="line"><span class="keyword">var</span> afterHours = differenceTime - (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> hours = afterHours / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span>)</span><br><span class="line">hours = <span class="built_in">Math</span>.floor(hours) <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整分钟数</span></span><br><span class="line"><span class="keyword">var</span> afterMinutes = afterHours - (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">4</span>)</span><br><span class="line"><span class="keyword">var</span> minutes = afterMinutes / (<span class="number">1000</span> * <span class="number">60</span>)</span><br><span class="line">minutes = <span class="built_in">Math</span>.floor(minutes) <span class="comment">// 55</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算整秒数</span></span><br><span class="line"><span class="keyword">var</span> afterSeconds = afterMinutes - (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">55</span>)</span><br><span class="line"><span class="keyword">var</span> seconds = afterSeconds / <span class="number">1000</span></span><br><span class="line">seconds = <span class="built_in">Math</span>.floor(seconds) <span class="comment">// 34</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算毫秒数</span></span><br><span class="line"><span class="keyword">var</span> milliSeconds = afterSeconds - (<span class="number">1000</span> * <span class="number">34</span>) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li><li><p>最后我们把结果输出一下就可以了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">'2019-01-01 00:00:00 和 2019-01-03 04:55:34 之间相差'</span>)</span><br><span class="line"><span class="built_in">document</span>.write(day + <span class="string">'天'</span> + hours + <span class="string">'小时'</span> + minutes + <span class="string">'分钟'</span> + seconds + <span class="string">'秒'</span> + milliSeconds + <span class="string">'毫秒'</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Math-和-Date&quot;&gt;&lt;a href=&quot;#Math-和-Date&quot; class=&quot;headerlink&quot; title=&quot;Math 和 Date&quot;&gt;&lt;/a&gt;Math 和 Date&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Math 是 js 的一个内置对象，提供了一堆的方法帮助我们操作 &lt;strong&gt;数字&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Date 是 js 的一个内置对象，提供了一堆的方法帮助我们操作 &lt;strong&gt;时间&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;Math&quot;&gt;&lt;a href=&quot;#Math&quot; class=&quot;headerlink&quot; title=&quot;Math&quot;&gt;&lt;/a&gt;Math&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;没有什么多余的东西，就是一堆的方法来操作数字&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;random&quot;&gt;&lt;a href=&quot;#random&quot; class=&quot;headerlink&quot; title=&quot;random&quot;&gt;&lt;/a&gt;random&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Math.random()&lt;/code&gt; 这个方法是用来生成一个 &lt;code&gt;0 ~ 1&lt;/code&gt; 之间的随机数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每次执行生成的数字都不一样，但是一定是 &lt;code&gt;0 ~ 1&lt;/code&gt; 之间的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;生成的数字包含 0 ，但是不包含 1&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(num) &lt;span class=&quot;comment&quot;&gt;// 得到一个随机数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="千锋" scheme="http://yoursite.com/categories/千锋/"/>
    
    
  </entry>
  
</feed>
